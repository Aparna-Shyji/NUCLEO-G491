
NUCLEO.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000628c  080001d8  080001d8  000011d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001dc  08006464  08006464  00007464  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006640  08006640  00008044  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08006640  08006640  00007640  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006648  08006648  00008044  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006648  08006648  00007648  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800664c  0800664c  0000764c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000044  20000000  08006650  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000f0  20000044  08006694  00008044  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000134  08006694  00008134  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00008044  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011ce9  00000000  00000000  00008074  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002cf9  00000000  00000000  00019d5d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e60  00000000  00000000  0001ca58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b03  00000000  00000000  0001d8b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001f9fc  00000000  00000000  0001e3bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013af5  00000000  00000000  0003ddb7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000bf427  00000000  00000000  000518ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00110cd3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003a48  00000000  00000000  00110d18  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000038  00000000  00000000  00114760  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000044 	.word	0x20000044
 80001f4:	00000000 	.word	0x00000000
 80001f8:	0800644c 	.word	0x0800644c

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000048 	.word	0x20000048
 8000214:	0800644c 	.word	0x0800644c

08000218 <strlen>:
 8000218:	4603      	mov	r3, r0
 800021a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800021e:	2a00      	cmp	r2, #0
 8000220:	d1fb      	bne.n	800021a <strlen+0x2>
 8000222:	1a18      	subs	r0, r3, r0
 8000224:	3801      	subs	r0, #1
 8000226:	4770      	bx	lr

08000228 <__aeabi_uldivmod>:
 8000228:	b953      	cbnz	r3, 8000240 <__aeabi_uldivmod+0x18>
 800022a:	b94a      	cbnz	r2, 8000240 <__aeabi_uldivmod+0x18>
 800022c:	2900      	cmp	r1, #0
 800022e:	bf08      	it	eq
 8000230:	2800      	cmpeq	r0, #0
 8000232:	bf1c      	itt	ne
 8000234:	f04f 31ff 	movne.w	r1, #4294967295
 8000238:	f04f 30ff 	movne.w	r0, #4294967295
 800023c:	f000 b988 	b.w	8000550 <__aeabi_idiv0>
 8000240:	f1ad 0c08 	sub.w	ip, sp, #8
 8000244:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000248:	f000 f806 	bl	8000258 <__udivmoddi4>
 800024c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000250:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000254:	b004      	add	sp, #16
 8000256:	4770      	bx	lr

08000258 <__udivmoddi4>:
 8000258:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800025c:	9d08      	ldr	r5, [sp, #32]
 800025e:	468e      	mov	lr, r1
 8000260:	4604      	mov	r4, r0
 8000262:	4688      	mov	r8, r1
 8000264:	2b00      	cmp	r3, #0
 8000266:	d14a      	bne.n	80002fe <__udivmoddi4+0xa6>
 8000268:	428a      	cmp	r2, r1
 800026a:	4617      	mov	r7, r2
 800026c:	d962      	bls.n	8000334 <__udivmoddi4+0xdc>
 800026e:	fab2 f682 	clz	r6, r2
 8000272:	b14e      	cbz	r6, 8000288 <__udivmoddi4+0x30>
 8000274:	f1c6 0320 	rsb	r3, r6, #32
 8000278:	fa01 f806 	lsl.w	r8, r1, r6
 800027c:	fa20 f303 	lsr.w	r3, r0, r3
 8000280:	40b7      	lsls	r7, r6
 8000282:	ea43 0808 	orr.w	r8, r3, r8
 8000286:	40b4      	lsls	r4, r6
 8000288:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800028c:	fa1f fc87 	uxth.w	ip, r7
 8000290:	fbb8 f1fe 	udiv	r1, r8, lr
 8000294:	0c23      	lsrs	r3, r4, #16
 8000296:	fb0e 8811 	mls	r8, lr, r1, r8
 800029a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800029e:	fb01 f20c 	mul.w	r2, r1, ip
 80002a2:	429a      	cmp	r2, r3
 80002a4:	d909      	bls.n	80002ba <__udivmoddi4+0x62>
 80002a6:	18fb      	adds	r3, r7, r3
 80002a8:	f101 30ff 	add.w	r0, r1, #4294967295
 80002ac:	f080 80ea 	bcs.w	8000484 <__udivmoddi4+0x22c>
 80002b0:	429a      	cmp	r2, r3
 80002b2:	f240 80e7 	bls.w	8000484 <__udivmoddi4+0x22c>
 80002b6:	3902      	subs	r1, #2
 80002b8:	443b      	add	r3, r7
 80002ba:	1a9a      	subs	r2, r3, r2
 80002bc:	b2a3      	uxth	r3, r4
 80002be:	fbb2 f0fe 	udiv	r0, r2, lr
 80002c2:	fb0e 2210 	mls	r2, lr, r0, r2
 80002c6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002ca:	fb00 fc0c 	mul.w	ip, r0, ip
 80002ce:	459c      	cmp	ip, r3
 80002d0:	d909      	bls.n	80002e6 <__udivmoddi4+0x8e>
 80002d2:	18fb      	adds	r3, r7, r3
 80002d4:	f100 32ff 	add.w	r2, r0, #4294967295
 80002d8:	f080 80d6 	bcs.w	8000488 <__udivmoddi4+0x230>
 80002dc:	459c      	cmp	ip, r3
 80002de:	f240 80d3 	bls.w	8000488 <__udivmoddi4+0x230>
 80002e2:	443b      	add	r3, r7
 80002e4:	3802      	subs	r0, #2
 80002e6:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002ea:	eba3 030c 	sub.w	r3, r3, ip
 80002ee:	2100      	movs	r1, #0
 80002f0:	b11d      	cbz	r5, 80002fa <__udivmoddi4+0xa2>
 80002f2:	40f3      	lsrs	r3, r6
 80002f4:	2200      	movs	r2, #0
 80002f6:	e9c5 3200 	strd	r3, r2, [r5]
 80002fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fe:	428b      	cmp	r3, r1
 8000300:	d905      	bls.n	800030e <__udivmoddi4+0xb6>
 8000302:	b10d      	cbz	r5, 8000308 <__udivmoddi4+0xb0>
 8000304:	e9c5 0100 	strd	r0, r1, [r5]
 8000308:	2100      	movs	r1, #0
 800030a:	4608      	mov	r0, r1
 800030c:	e7f5      	b.n	80002fa <__udivmoddi4+0xa2>
 800030e:	fab3 f183 	clz	r1, r3
 8000312:	2900      	cmp	r1, #0
 8000314:	d146      	bne.n	80003a4 <__udivmoddi4+0x14c>
 8000316:	4573      	cmp	r3, lr
 8000318:	d302      	bcc.n	8000320 <__udivmoddi4+0xc8>
 800031a:	4282      	cmp	r2, r0
 800031c:	f200 8105 	bhi.w	800052a <__udivmoddi4+0x2d2>
 8000320:	1a84      	subs	r4, r0, r2
 8000322:	eb6e 0203 	sbc.w	r2, lr, r3
 8000326:	2001      	movs	r0, #1
 8000328:	4690      	mov	r8, r2
 800032a:	2d00      	cmp	r5, #0
 800032c:	d0e5      	beq.n	80002fa <__udivmoddi4+0xa2>
 800032e:	e9c5 4800 	strd	r4, r8, [r5]
 8000332:	e7e2      	b.n	80002fa <__udivmoddi4+0xa2>
 8000334:	2a00      	cmp	r2, #0
 8000336:	f000 8090 	beq.w	800045a <__udivmoddi4+0x202>
 800033a:	fab2 f682 	clz	r6, r2
 800033e:	2e00      	cmp	r6, #0
 8000340:	f040 80a4 	bne.w	800048c <__udivmoddi4+0x234>
 8000344:	1a8a      	subs	r2, r1, r2
 8000346:	0c03      	lsrs	r3, r0, #16
 8000348:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800034c:	b280      	uxth	r0, r0
 800034e:	b2bc      	uxth	r4, r7
 8000350:	2101      	movs	r1, #1
 8000352:	fbb2 fcfe 	udiv	ip, r2, lr
 8000356:	fb0e 221c 	mls	r2, lr, ip, r2
 800035a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800035e:	fb04 f20c 	mul.w	r2, r4, ip
 8000362:	429a      	cmp	r2, r3
 8000364:	d907      	bls.n	8000376 <__udivmoddi4+0x11e>
 8000366:	18fb      	adds	r3, r7, r3
 8000368:	f10c 38ff 	add.w	r8, ip, #4294967295
 800036c:	d202      	bcs.n	8000374 <__udivmoddi4+0x11c>
 800036e:	429a      	cmp	r2, r3
 8000370:	f200 80e0 	bhi.w	8000534 <__udivmoddi4+0x2dc>
 8000374:	46c4      	mov	ip, r8
 8000376:	1a9b      	subs	r3, r3, r2
 8000378:	fbb3 f2fe 	udiv	r2, r3, lr
 800037c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000380:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000384:	fb02 f404 	mul.w	r4, r2, r4
 8000388:	429c      	cmp	r4, r3
 800038a:	d907      	bls.n	800039c <__udivmoddi4+0x144>
 800038c:	18fb      	adds	r3, r7, r3
 800038e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000392:	d202      	bcs.n	800039a <__udivmoddi4+0x142>
 8000394:	429c      	cmp	r4, r3
 8000396:	f200 80ca 	bhi.w	800052e <__udivmoddi4+0x2d6>
 800039a:	4602      	mov	r2, r0
 800039c:	1b1b      	subs	r3, r3, r4
 800039e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003a2:	e7a5      	b.n	80002f0 <__udivmoddi4+0x98>
 80003a4:	f1c1 0620 	rsb	r6, r1, #32
 80003a8:	408b      	lsls	r3, r1
 80003aa:	fa22 f706 	lsr.w	r7, r2, r6
 80003ae:	431f      	orrs	r7, r3
 80003b0:	fa0e f401 	lsl.w	r4, lr, r1
 80003b4:	fa20 f306 	lsr.w	r3, r0, r6
 80003b8:	fa2e fe06 	lsr.w	lr, lr, r6
 80003bc:	ea4f 4917 	mov.w	r9, r7, lsr #16
 80003c0:	4323      	orrs	r3, r4
 80003c2:	fa00 f801 	lsl.w	r8, r0, r1
 80003c6:	fa1f fc87 	uxth.w	ip, r7
 80003ca:	fbbe f0f9 	udiv	r0, lr, r9
 80003ce:	0c1c      	lsrs	r4, r3, #16
 80003d0:	fb09 ee10 	mls	lr, r9, r0, lr
 80003d4:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80003d8:	fb00 fe0c 	mul.w	lr, r0, ip
 80003dc:	45a6      	cmp	lr, r4
 80003de:	fa02 f201 	lsl.w	r2, r2, r1
 80003e2:	d909      	bls.n	80003f8 <__udivmoddi4+0x1a0>
 80003e4:	193c      	adds	r4, r7, r4
 80003e6:	f100 3aff 	add.w	sl, r0, #4294967295
 80003ea:	f080 809c 	bcs.w	8000526 <__udivmoddi4+0x2ce>
 80003ee:	45a6      	cmp	lr, r4
 80003f0:	f240 8099 	bls.w	8000526 <__udivmoddi4+0x2ce>
 80003f4:	3802      	subs	r0, #2
 80003f6:	443c      	add	r4, r7
 80003f8:	eba4 040e 	sub.w	r4, r4, lr
 80003fc:	fa1f fe83 	uxth.w	lr, r3
 8000400:	fbb4 f3f9 	udiv	r3, r4, r9
 8000404:	fb09 4413 	mls	r4, r9, r3, r4
 8000408:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 800040c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000410:	45a4      	cmp	ip, r4
 8000412:	d908      	bls.n	8000426 <__udivmoddi4+0x1ce>
 8000414:	193c      	adds	r4, r7, r4
 8000416:	f103 3eff 	add.w	lr, r3, #4294967295
 800041a:	f080 8082 	bcs.w	8000522 <__udivmoddi4+0x2ca>
 800041e:	45a4      	cmp	ip, r4
 8000420:	d97f      	bls.n	8000522 <__udivmoddi4+0x2ca>
 8000422:	3b02      	subs	r3, #2
 8000424:	443c      	add	r4, r7
 8000426:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 800042a:	eba4 040c 	sub.w	r4, r4, ip
 800042e:	fba0 ec02 	umull	lr, ip, r0, r2
 8000432:	4564      	cmp	r4, ip
 8000434:	4673      	mov	r3, lr
 8000436:	46e1      	mov	r9, ip
 8000438:	d362      	bcc.n	8000500 <__udivmoddi4+0x2a8>
 800043a:	d05f      	beq.n	80004fc <__udivmoddi4+0x2a4>
 800043c:	b15d      	cbz	r5, 8000456 <__udivmoddi4+0x1fe>
 800043e:	ebb8 0203 	subs.w	r2, r8, r3
 8000442:	eb64 0409 	sbc.w	r4, r4, r9
 8000446:	fa04 f606 	lsl.w	r6, r4, r6
 800044a:	fa22 f301 	lsr.w	r3, r2, r1
 800044e:	431e      	orrs	r6, r3
 8000450:	40cc      	lsrs	r4, r1
 8000452:	e9c5 6400 	strd	r6, r4, [r5]
 8000456:	2100      	movs	r1, #0
 8000458:	e74f      	b.n	80002fa <__udivmoddi4+0xa2>
 800045a:	fbb1 fcf2 	udiv	ip, r1, r2
 800045e:	0c01      	lsrs	r1, r0, #16
 8000460:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000464:	b280      	uxth	r0, r0
 8000466:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800046a:	463b      	mov	r3, r7
 800046c:	4638      	mov	r0, r7
 800046e:	463c      	mov	r4, r7
 8000470:	46b8      	mov	r8, r7
 8000472:	46be      	mov	lr, r7
 8000474:	2620      	movs	r6, #32
 8000476:	fbb1 f1f7 	udiv	r1, r1, r7
 800047a:	eba2 0208 	sub.w	r2, r2, r8
 800047e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000482:	e766      	b.n	8000352 <__udivmoddi4+0xfa>
 8000484:	4601      	mov	r1, r0
 8000486:	e718      	b.n	80002ba <__udivmoddi4+0x62>
 8000488:	4610      	mov	r0, r2
 800048a:	e72c      	b.n	80002e6 <__udivmoddi4+0x8e>
 800048c:	f1c6 0220 	rsb	r2, r6, #32
 8000490:	fa2e f302 	lsr.w	r3, lr, r2
 8000494:	40b7      	lsls	r7, r6
 8000496:	40b1      	lsls	r1, r6
 8000498:	fa20 f202 	lsr.w	r2, r0, r2
 800049c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004a0:	430a      	orrs	r2, r1
 80004a2:	fbb3 f8fe 	udiv	r8, r3, lr
 80004a6:	b2bc      	uxth	r4, r7
 80004a8:	fb0e 3318 	mls	r3, lr, r8, r3
 80004ac:	0c11      	lsrs	r1, r2, #16
 80004ae:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004b2:	fb08 f904 	mul.w	r9, r8, r4
 80004b6:	40b0      	lsls	r0, r6
 80004b8:	4589      	cmp	r9, r1
 80004ba:	ea4f 4310 	mov.w	r3, r0, lsr #16
 80004be:	b280      	uxth	r0, r0
 80004c0:	d93e      	bls.n	8000540 <__udivmoddi4+0x2e8>
 80004c2:	1879      	adds	r1, r7, r1
 80004c4:	f108 3cff 	add.w	ip, r8, #4294967295
 80004c8:	d201      	bcs.n	80004ce <__udivmoddi4+0x276>
 80004ca:	4589      	cmp	r9, r1
 80004cc:	d81f      	bhi.n	800050e <__udivmoddi4+0x2b6>
 80004ce:	eba1 0109 	sub.w	r1, r1, r9
 80004d2:	fbb1 f9fe 	udiv	r9, r1, lr
 80004d6:	fb09 f804 	mul.w	r8, r9, r4
 80004da:	fb0e 1119 	mls	r1, lr, r9, r1
 80004de:	b292      	uxth	r2, r2
 80004e0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004e4:	4542      	cmp	r2, r8
 80004e6:	d229      	bcs.n	800053c <__udivmoddi4+0x2e4>
 80004e8:	18ba      	adds	r2, r7, r2
 80004ea:	f109 31ff 	add.w	r1, r9, #4294967295
 80004ee:	d2c4      	bcs.n	800047a <__udivmoddi4+0x222>
 80004f0:	4542      	cmp	r2, r8
 80004f2:	d2c2      	bcs.n	800047a <__udivmoddi4+0x222>
 80004f4:	f1a9 0102 	sub.w	r1, r9, #2
 80004f8:	443a      	add	r2, r7
 80004fa:	e7be      	b.n	800047a <__udivmoddi4+0x222>
 80004fc:	45f0      	cmp	r8, lr
 80004fe:	d29d      	bcs.n	800043c <__udivmoddi4+0x1e4>
 8000500:	ebbe 0302 	subs.w	r3, lr, r2
 8000504:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000508:	3801      	subs	r0, #1
 800050a:	46e1      	mov	r9, ip
 800050c:	e796      	b.n	800043c <__udivmoddi4+0x1e4>
 800050e:	eba7 0909 	sub.w	r9, r7, r9
 8000512:	4449      	add	r1, r9
 8000514:	f1a8 0c02 	sub.w	ip, r8, #2
 8000518:	fbb1 f9fe 	udiv	r9, r1, lr
 800051c:	fb09 f804 	mul.w	r8, r9, r4
 8000520:	e7db      	b.n	80004da <__udivmoddi4+0x282>
 8000522:	4673      	mov	r3, lr
 8000524:	e77f      	b.n	8000426 <__udivmoddi4+0x1ce>
 8000526:	4650      	mov	r0, sl
 8000528:	e766      	b.n	80003f8 <__udivmoddi4+0x1a0>
 800052a:	4608      	mov	r0, r1
 800052c:	e6fd      	b.n	800032a <__udivmoddi4+0xd2>
 800052e:	443b      	add	r3, r7
 8000530:	3a02      	subs	r2, #2
 8000532:	e733      	b.n	800039c <__udivmoddi4+0x144>
 8000534:	f1ac 0c02 	sub.w	ip, ip, #2
 8000538:	443b      	add	r3, r7
 800053a:	e71c      	b.n	8000376 <__udivmoddi4+0x11e>
 800053c:	4649      	mov	r1, r9
 800053e:	e79c      	b.n	800047a <__udivmoddi4+0x222>
 8000540:	eba1 0109 	sub.w	r1, r1, r9
 8000544:	46c4      	mov	ip, r8
 8000546:	fbb1 f9fe 	udiv	r9, r1, lr
 800054a:	fb09 f804 	mul.w	r8, r9, r4
 800054e:	e7c4      	b.n	80004da <__udivmoddi4+0x282>

08000550 <__aeabi_idiv0>:
 8000550:	4770      	bx	lr
 8000552:	bf00      	nop

08000554 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8000554:	b480      	push	{r7}
 8000556:	b085      	sub	sp, #20
 8000558:	af00      	add	r7, sp, #0
 800055a:	6078      	str	r0, [r7, #4]
 800055c:	6039      	str	r1, [r7, #0]
  //return FATFS_LinkDriverEx(drv, path, 0);
	 uint8_t drv_num = disk.nbr;
 800055e:	4b18      	ldr	r3, [pc, #96]	@ (80005c0 <FATFS_LinkDriver+0x6c>)
 8000560:	7a5b      	ldrb	r3, [r3, #9]
 8000562:	73fb      	strb	r3, [r7, #15]
	    if (drv_num >= _VOLUMES)
 8000564:	7bfb      	ldrb	r3, [r7, #15]
 8000566:	2b00      	cmp	r3, #0
 8000568:	d001      	beq.n	800056e <FATFS_LinkDriver+0x1a>
	        return 1;
 800056a:	2301      	movs	r3, #1
 800056c:	e022      	b.n	80005b4 <FATFS_LinkDriver+0x60>

	    disk.is_initialized[drv_num] = 0;
 800056e:	7bfb      	ldrb	r3, [r7, #15]
 8000570:	4a13      	ldr	r2, [pc, #76]	@ (80005c0 <FATFS_LinkDriver+0x6c>)
 8000572:	2100      	movs	r1, #0
 8000574:	54d1      	strb	r1, [r2, r3]
	    disk.drv[drv_num] = (Diskio_drvTypeDef *)drv;
 8000576:	7bfb      	ldrb	r3, [r7, #15]
 8000578:	4a11      	ldr	r2, [pc, #68]	@ (80005c0 <FATFS_LinkDriver+0x6c>)
 800057a:	009b      	lsls	r3, r3, #2
 800057c:	4413      	add	r3, r2
 800057e:	687a      	ldr	r2, [r7, #4]
 8000580:	605a      	str	r2, [r3, #4]
	    disk.nbr++;
 8000582:	4b0f      	ldr	r3, [pc, #60]	@ (80005c0 <FATFS_LinkDriver+0x6c>)
 8000584:	7a5b      	ldrb	r3, [r3, #9]
 8000586:	b2db      	uxtb	r3, r3
 8000588:	3301      	adds	r3, #1
 800058a:	b2da      	uxtb	r2, r3
 800058c:	4b0c      	ldr	r3, [pc, #48]	@ (80005c0 <FATFS_LinkDriver+0x6c>)
 800058e:	725a      	strb	r2, [r3, #9]

	    path[0] = drv_num + '0';
 8000590:	7bfb      	ldrb	r3, [r7, #15]
 8000592:	3330      	adds	r3, #48	@ 0x30
 8000594:	b2da      	uxtb	r2, r3
 8000596:	683b      	ldr	r3, [r7, #0]
 8000598:	701a      	strb	r2, [r3, #0]
	    path[1] = ':';
 800059a:	683b      	ldr	r3, [r7, #0]
 800059c:	3301      	adds	r3, #1
 800059e:	223a      	movs	r2, #58	@ 0x3a
 80005a0:	701a      	strb	r2, [r3, #0]
	    path[2] = '/';
 80005a2:	683b      	ldr	r3, [r7, #0]
 80005a4:	3302      	adds	r3, #2
 80005a6:	222f      	movs	r2, #47	@ 0x2f
 80005a8:	701a      	strb	r2, [r3, #0]
	    path[3] = 0;
 80005aa:	683b      	ldr	r3, [r7, #0]
 80005ac:	3303      	adds	r3, #3
 80005ae:	2200      	movs	r2, #0
 80005b0:	701a      	strb	r2, [r3, #0]

	    return 0;
 80005b2:	2300      	movs	r3, #0
}
 80005b4:	4618      	mov	r0, r3
 80005b6:	3714      	adds	r7, #20
 80005b8:	46bd      	mov	sp, r7
 80005ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005be:	4770      	bx	lr
 80005c0:	20000060 	.word	0x20000060

080005c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005c8:	f000 fa67 	bl	8000a9a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005cc:	f000 f80a 	bl	80005e4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005d0:	f000 f894 	bl	80006fc <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80005d4:	f000 f846 	bl	8000664 <MX_USART1_UART_Init>
  MX_FATFS_Init();
 80005d8:	f003 fb5c 	bl	8003c94 <MX_FATFS_Init>
  test_fatfs();
 80005dc:	f000 f8bc 	bl	8000758 <test_fatfs>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005e0:	bf00      	nop
 80005e2:	e7fd      	b.n	80005e0 <main+0x1c>

080005e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b094      	sub	sp, #80	@ 0x50
 80005e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005ea:	f107 0318 	add.w	r3, r7, #24
 80005ee:	2238      	movs	r2, #56	@ 0x38
 80005f0:	2100      	movs	r1, #0
 80005f2:	4618      	mov	r0, r3
 80005f4:	f005 fef0 	bl	80063d8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005f8:	1d3b      	adds	r3, r7, #4
 80005fa:	2200      	movs	r2, #0
 80005fc:	601a      	str	r2, [r3, #0]
 80005fe:	605a      	str	r2, [r3, #4]
 8000600:	609a      	str	r2, [r3, #8]
 8000602:	60da      	str	r2, [r3, #12]
 8000604:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000606:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800060a:	f001 f86b 	bl	80016e4 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800060e:	2302      	movs	r3, #2
 8000610:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000612:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000616:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000618:	2340      	movs	r3, #64	@ 0x40
 800061a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800061c:	2300      	movs	r3, #0
 800061e:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000620:	f107 0318 	add.w	r3, r7, #24
 8000624:	4618      	mov	r0, r3
 8000626:	f001 f911 	bl	800184c <HAL_RCC_OscConfig>
 800062a:	4603      	mov	r3, r0
 800062c:	2b00      	cmp	r3, #0
 800062e:	d001      	beq.n	8000634 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000630:	f000 f934 	bl	800089c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000634:	230f      	movs	r3, #15
 8000636:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000638:	2301      	movs	r3, #1
 800063a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800063c:	2300      	movs	r3, #0
 800063e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000640:	2300      	movs	r3, #0
 8000642:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000644:	2300      	movs	r3, #0
 8000646:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000648:	1d3b      	adds	r3, r7, #4
 800064a:	2100      	movs	r1, #0
 800064c:	4618      	mov	r0, r3
 800064e:	f001 fc0f 	bl	8001e70 <HAL_RCC_ClockConfig>
 8000652:	4603      	mov	r3, r0
 8000654:	2b00      	cmp	r3, #0
 8000656:	d001      	beq.n	800065c <SystemClock_Config+0x78>
  {
    Error_Handler();
 8000658:	f000 f920 	bl	800089c <Error_Handler>
  }
}
 800065c:	bf00      	nop
 800065e:	3750      	adds	r7, #80	@ 0x50
 8000660:	46bd      	mov	sp, r7
 8000662:	bd80      	pop	{r7, pc}

08000664 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000668:	4b22      	ldr	r3, [pc, #136]	@ (80006f4 <MX_USART1_UART_Init+0x90>)
 800066a:	4a23      	ldr	r2, [pc, #140]	@ (80006f8 <MX_USART1_UART_Init+0x94>)
 800066c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800066e:	4b21      	ldr	r3, [pc, #132]	@ (80006f4 <MX_USART1_UART_Init+0x90>)
 8000670:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000674:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000676:	4b1f      	ldr	r3, [pc, #124]	@ (80006f4 <MX_USART1_UART_Init+0x90>)
 8000678:	2200      	movs	r2, #0
 800067a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800067c:	4b1d      	ldr	r3, [pc, #116]	@ (80006f4 <MX_USART1_UART_Init+0x90>)
 800067e:	2200      	movs	r2, #0
 8000680:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000682:	4b1c      	ldr	r3, [pc, #112]	@ (80006f4 <MX_USART1_UART_Init+0x90>)
 8000684:	2200      	movs	r2, #0
 8000686:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000688:	4b1a      	ldr	r3, [pc, #104]	@ (80006f4 <MX_USART1_UART_Init+0x90>)
 800068a:	220c      	movs	r2, #12
 800068c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800068e:	4b19      	ldr	r3, [pc, #100]	@ (80006f4 <MX_USART1_UART_Init+0x90>)
 8000690:	2200      	movs	r2, #0
 8000692:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000694:	4b17      	ldr	r3, [pc, #92]	@ (80006f4 <MX_USART1_UART_Init+0x90>)
 8000696:	2200      	movs	r2, #0
 8000698:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800069a:	4b16      	ldr	r3, [pc, #88]	@ (80006f4 <MX_USART1_UART_Init+0x90>)
 800069c:	2200      	movs	r2, #0
 800069e:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80006a0:	4b14      	ldr	r3, [pc, #80]	@ (80006f4 <MX_USART1_UART_Init+0x90>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80006a6:	4b13      	ldr	r3, [pc, #76]	@ (80006f4 <MX_USART1_UART_Init+0x90>)
 80006a8:	2200      	movs	r2, #0
 80006aa:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80006ac:	4811      	ldr	r0, [pc, #68]	@ (80006f4 <MX_USART1_UART_Init+0x90>)
 80006ae:	f002 f837 	bl	8002720 <HAL_UART_Init>
 80006b2:	4603      	mov	r3, r0
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d001      	beq.n	80006bc <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80006b8:	f000 f8f0 	bl	800089c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80006bc:	2100      	movs	r1, #0
 80006be:	480d      	ldr	r0, [pc, #52]	@ (80006f4 <MX_USART1_UART_Init+0x90>)
 80006c0:	f003 fa1d 	bl	8003afe <HAL_UARTEx_SetTxFifoThreshold>
 80006c4:	4603      	mov	r3, r0
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d001      	beq.n	80006ce <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80006ca:	f000 f8e7 	bl	800089c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80006ce:	2100      	movs	r1, #0
 80006d0:	4808      	ldr	r0, [pc, #32]	@ (80006f4 <MX_USART1_UART_Init+0x90>)
 80006d2:	f003 fa52 	bl	8003b7a <HAL_UARTEx_SetRxFifoThreshold>
 80006d6:	4603      	mov	r3, r0
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d001      	beq.n	80006e0 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80006dc:	f000 f8de 	bl	800089c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80006e0:	4804      	ldr	r0, [pc, #16]	@ (80006f4 <MX_USART1_UART_Init+0x90>)
 80006e2:	f003 f9d3 	bl	8003a8c <HAL_UARTEx_DisableFifoMode>
 80006e6:	4603      	mov	r3, r0
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d001      	beq.n	80006f0 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80006ec:	f000 f8d6 	bl	800089c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80006f0:	bf00      	nop
 80006f2:	bd80      	pop	{r7, pc}
 80006f4:	2000006c 	.word	0x2000006c
 80006f8:	40013800 	.word	0x40013800

080006fc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006fc:	b480      	push	{r7}
 80006fe:	b083      	sub	sp, #12
 8000700:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000702:	4b09      	ldr	r3, [pc, #36]	@ (8000728 <MX_GPIO_Init+0x2c>)
 8000704:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000706:	4a08      	ldr	r2, [pc, #32]	@ (8000728 <MX_GPIO_Init+0x2c>)
 8000708:	f043 0304 	orr.w	r3, r3, #4
 800070c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800070e:	4b06      	ldr	r3, [pc, #24]	@ (8000728 <MX_GPIO_Init+0x2c>)
 8000710:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000712:	f003 0304 	and.w	r3, r3, #4
 8000716:	607b      	str	r3, [r7, #4]
 8000718:	687b      	ldr	r3, [r7, #4]

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800071a:	bf00      	nop
 800071c:	370c      	adds	r7, #12
 800071e:	46bd      	mov	sp, r7
 8000720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000724:	4770      	bx	lr
 8000726:	bf00      	nop
 8000728:	40021000 	.word	0x40021000

0800072c <UART_Print>:

/* USER CODE BEGIN 4 */

void UART_Print(char *msg)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	b082      	sub	sp, #8
 8000730:	af00      	add	r7, sp, #0
 8000732:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8000734:	6878      	ldr	r0, [r7, #4]
 8000736:	f7ff fd6f 	bl	8000218 <strlen>
 800073a:	4603      	mov	r3, r0
 800073c:	b29a      	uxth	r2, r3
 800073e:	f04f 33ff 	mov.w	r3, #4294967295
 8000742:	6879      	ldr	r1, [r7, #4]
 8000744:	4803      	ldr	r0, [pc, #12]	@ (8000754 <UART_Print+0x28>)
 8000746:	f002 f83b 	bl	80027c0 <HAL_UART_Transmit>
}
 800074a:	bf00      	nop
 800074c:	3708      	adds	r7, #8
 800074e:	46bd      	mov	sp, r7
 8000750:	bd80      	pop	{r7, pc}
 8000752:	bf00      	nop
 8000754:	2000006c 	.word	0x2000006c

08000758 <test_fatfs>:
/* USER CODE BEGIN 4 */
void test_fatfs(void)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	f5ad 6d9b 	sub.w	sp, sp, #1240	@ 0x4d8
 800075e:	af00      	add	r7, sp, #0
    char buffer[100];
    char USERPath[4];

    extern Diskio_drvTypeDef USER_Driver;
    //FATFS_LinkDriver(&USER_Driver, USERPath);
    if (FATFS_LinkDriver(&USER_Driver, USERPath) != 0)
 8000760:	1d3b      	adds	r3, r7, #4
 8000762:	4619      	mov	r1, r3
 8000764:	4842      	ldr	r0, [pc, #264]	@ (8000870 <test_fatfs+0x118>)
 8000766:	f7ff fef5 	bl	8000554 <FATFS_LinkDriver>
 800076a:	4603      	mov	r3, r0
 800076c:	2b00      	cmp	r3, #0
 800076e:	d003      	beq.n	8000778 <test_fatfs+0x20>
        {
            UART_Print("Link driver failed\r\n");
 8000770:	4840      	ldr	r0, [pc, #256]	@ (8000874 <test_fatfs+0x11c>)
 8000772:	f7ff ffdb 	bl	800072c <UART_Print>
 8000776:	e076      	b.n	8000866 <test_fatfs+0x10e>
            return;
        }
    // Mount SD card
    res = f_mount(&fs, "USERPath", 1);
 8000778:	f507 7328 	add.w	r3, r7, #672	@ 0x2a0
 800077c:	2201      	movs	r2, #1
 800077e:	493e      	ldr	r1, [pc, #248]	@ (8000878 <test_fatfs+0x120>)
 8000780:	4618      	mov	r0, r3
 8000782:	f005 f8cd 	bl	8005920 <f_mount>
 8000786:	4603      	mov	r3, r0
 8000788:	f887 34d7 	strb.w	r3, [r7, #1239]	@ 0x4d7
    if (res != FR_OK) {
 800078c:	f897 34d7 	ldrb.w	r3, [r7, #1239]	@ 0x4d7
 8000790:	2b00      	cmp	r3, #0
 8000792:	d002      	beq.n	800079a <test_fatfs+0x42>
        UART_Print("Mount failed\r\n");
 8000794:	4839      	ldr	r0, [pc, #228]	@ (800087c <test_fatfs+0x124>)
 8000796:	f7ff ffc9 	bl	800072c <UART_Print>
       // return;
    }
    UART_Print("Mount successful\r\n");
 800079a:	4839      	ldr	r0, [pc, #228]	@ (8000880 <test_fatfs+0x128>)
 800079c:	f7ff ffc6 	bl	800072c <UART_Print>

    // Create and write a file
    res = f_open(&fil, "test.txt", FA_CREATE_ALWAYS | FA_WRITE);
 80007a0:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 80007a4:	220a      	movs	r2, #10
 80007a6:	4937      	ldr	r1, [pc, #220]	@ (8000884 <test_fatfs+0x12c>)
 80007a8:	4618      	mov	r0, r3
 80007aa:	f005 f8ff 	bl	80059ac <f_open>
 80007ae:	4603      	mov	r3, r0
 80007b0:	f887 34d7 	strb.w	r3, [r7, #1239]	@ 0x4d7
    if (res == FR_OK) {
 80007b4:	f897 34d7 	ldrb.w	r3, [r7, #1239]	@ 0x4d7
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d118      	bne.n	80007ee <test_fatfs+0x96>
        char *data = "Hello from STM32G474 FATFS!\r\n";
 80007bc:	4b32      	ldr	r3, [pc, #200]	@ (8000888 <test_fatfs+0x130>)
 80007be:	f8c7 34d0 	str.w	r3, [r7, #1232]	@ 0x4d0
        f_write(&fil, data, strlen(data), &bw);
 80007c2:	f8d7 04d0 	ldr.w	r0, [r7, #1232]	@ 0x4d0
 80007c6:	f7ff fd27 	bl	8000218 <strlen>
 80007ca:	4602      	mov	r2, r0
 80007cc:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80007d0:	f107 0070 	add.w	r0, r7, #112	@ 0x70
 80007d4:	f8d7 14d0 	ldr.w	r1, [r7, #1232]	@ 0x4d0
 80007d8:	f005 fbe1 	bl	8005f9e <f_write>
        f_close(&fil);
 80007dc:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 80007e0:	4618      	mov	r0, r3
 80007e2:	f005 fdcf 	bl	8006384 <f_close>
        UART_Print("File written successfully\r\n");
 80007e6:	4829      	ldr	r0, [pc, #164]	@ (800088c <test_fatfs+0x134>)
 80007e8:	f7ff ffa0 	bl	800072c <UART_Print>
 80007ec:	e002      	b.n	80007f4 <test_fatfs+0x9c>
    } else {
        UART_Print("File open failed\r\n");
 80007ee:	4828      	ldr	r0, [pc, #160]	@ (8000890 <test_fatfs+0x138>)
 80007f0:	f7ff ff9c 	bl	800072c <UART_Print>
    }

    // Read file back
    res = f_open(&fil, "test.txt", FA_READ);
 80007f4:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 80007f8:	2201      	movs	r2, #1
 80007fa:	4922      	ldr	r1, [pc, #136]	@ (8000884 <test_fatfs+0x12c>)
 80007fc:	4618      	mov	r0, r3
 80007fe:	f005 f8d5 	bl	80059ac <f_open>
 8000802:	4603      	mov	r3, r0
 8000804:	f887 34d7 	strb.w	r3, [r7, #1239]	@ 0x4d7
    if (res == FR_OK) {
 8000808:	f897 34d7 	ldrb.w	r3, [r7, #1239]	@ 0x4d7
 800080c:	2b00      	cmp	r3, #0
 800080e:	d121      	bne.n	8000854 <test_fatfs+0xfc>
        f_read(&fil, buffer, sizeof(buffer)-1, &bw);
 8000810:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8000814:	f107 0108 	add.w	r1, r7, #8
 8000818:	f107 0070 	add.w	r0, r7, #112	@ 0x70
 800081c:	2263      	movs	r2, #99	@ 0x63
 800081e:	f005 fa7f 	bl	8005d20 <f_read>
        buffer[bw] = '\0'; // Null-terminate
 8000822:	f507 639b 	add.w	r3, r7, #1240	@ 0x4d8
 8000826:	f2a3 436c 	subw	r3, r3, #1132	@ 0x46c
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	f507 629b 	add.w	r2, r7, #1240	@ 0x4d8
 8000830:	f5a2 629a 	sub.w	r2, r2, #1232	@ 0x4d0
 8000834:	2100      	movs	r1, #0
 8000836:	54d1      	strb	r1, [r2, r3]
        f_close(&fil);
 8000838:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 800083c:	4618      	mov	r0, r3
 800083e:	f005 fda1 	bl	8006384 <f_close>

        UART_Print("Read: ");
 8000842:	4814      	ldr	r0, [pc, #80]	@ (8000894 <test_fatfs+0x13c>)
 8000844:	f7ff ff72 	bl	800072c <UART_Print>
        UART_Print(buffer);
 8000848:	f107 0308 	add.w	r3, r7, #8
 800084c:	4618      	mov	r0, r3
 800084e:	f7ff ff6d 	bl	800072c <UART_Print>
 8000852:	e002      	b.n	800085a <test_fatfs+0x102>
    } else {
        UART_Print("File read failed\r\n");
 8000854:	4810      	ldr	r0, [pc, #64]	@ (8000898 <test_fatfs+0x140>)
 8000856:	f7ff ff69 	bl	800072c <UART_Print>
    }

    f_mount(NULL, USERPath, 1); // unmount
 800085a:	1d3b      	adds	r3, r7, #4
 800085c:	2201      	movs	r2, #1
 800085e:	4619      	mov	r1, r3
 8000860:	2000      	movs	r0, #0
 8000862:	f005 f85d 	bl	8005920 <f_mount>
}
 8000866:	f507 679b 	add.w	r7, r7, #1240	@ 0x4d8
 800086a:	46bd      	mov	sp, r7
 800086c:	bd80      	pop	{r7, pc}
 800086e:	bf00      	nop
 8000870:	20000030 	.word	0x20000030
 8000874:	08006464 	.word	0x08006464
 8000878:	0800647c 	.word	0x0800647c
 800087c:	08006488 	.word	0x08006488
 8000880:	08006498 	.word	0x08006498
 8000884:	080064ac 	.word	0x080064ac
 8000888:	080064b8 	.word	0x080064b8
 800088c:	080064d8 	.word	0x080064d8
 8000890:	080064f4 	.word	0x080064f4
 8000894:	08006508 	.word	0x08006508
 8000898:	08006510 	.word	0x08006510

0800089c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800089c:	b480      	push	{r7}
 800089e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008a0:	b672      	cpsid	i
}
 80008a2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008a4:	bf00      	nop
 80008a6:	e7fd      	b.n	80008a4 <Error_Handler+0x8>

080008a8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b082      	sub	sp, #8
 80008ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008ae:	4b0f      	ldr	r3, [pc, #60]	@ (80008ec <HAL_MspInit+0x44>)
 80008b0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80008b2:	4a0e      	ldr	r2, [pc, #56]	@ (80008ec <HAL_MspInit+0x44>)
 80008b4:	f043 0301 	orr.w	r3, r3, #1
 80008b8:	6613      	str	r3, [r2, #96]	@ 0x60
 80008ba:	4b0c      	ldr	r3, [pc, #48]	@ (80008ec <HAL_MspInit+0x44>)
 80008bc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80008be:	f003 0301 	and.w	r3, r3, #1
 80008c2:	607b      	str	r3, [r7, #4]
 80008c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008c6:	4b09      	ldr	r3, [pc, #36]	@ (80008ec <HAL_MspInit+0x44>)
 80008c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80008ca:	4a08      	ldr	r2, [pc, #32]	@ (80008ec <HAL_MspInit+0x44>)
 80008cc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80008d0:	6593      	str	r3, [r2, #88]	@ 0x58
 80008d2:	4b06      	ldr	r3, [pc, #24]	@ (80008ec <HAL_MspInit+0x44>)
 80008d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80008d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80008da:	603b      	str	r3, [r7, #0]
 80008dc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80008de:	f000 ffa5 	bl	800182c <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008e2:	bf00      	nop
 80008e4:	3708      	adds	r7, #8
 80008e6:	46bd      	mov	sp, r7
 80008e8:	bd80      	pop	{r7, pc}
 80008ea:	bf00      	nop
 80008ec:	40021000 	.word	0x40021000

080008f0 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b09e      	sub	sp, #120	@ 0x78
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008f8:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80008fc:	2200      	movs	r2, #0
 80008fe:	601a      	str	r2, [r3, #0]
 8000900:	605a      	str	r2, [r3, #4]
 8000902:	609a      	str	r2, [r3, #8]
 8000904:	60da      	str	r2, [r3, #12]
 8000906:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000908:	f107 0314 	add.w	r3, r7, #20
 800090c:	2250      	movs	r2, #80	@ 0x50
 800090e:	2100      	movs	r1, #0
 8000910:	4618      	mov	r0, r3
 8000912:	f005 fd61 	bl	80063d8 <memset>
  if(huart->Instance==USART1)
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	681b      	ldr	r3, [r3, #0]
 800091a:	4a22      	ldr	r2, [pc, #136]	@ (80009a4 <HAL_UART_MspInit+0xb4>)
 800091c:	4293      	cmp	r3, r2
 800091e:	d13d      	bne.n	800099c <HAL_UART_MspInit+0xac>

    /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000920:	2301      	movs	r3, #1
 8000922:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000924:	2300      	movs	r3, #0
 8000926:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000928:	f107 0314 	add.w	r3, r7, #20
 800092c:	4618      	mov	r0, r3
 800092e:	f001 fcbb 	bl	80022a8 <HAL_RCCEx_PeriphCLKConfig>
 8000932:	4603      	mov	r3, r0
 8000934:	2b00      	cmp	r3, #0
 8000936:	d001      	beq.n	800093c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000938:	f7ff ffb0 	bl	800089c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800093c:	4b1a      	ldr	r3, [pc, #104]	@ (80009a8 <HAL_UART_MspInit+0xb8>)
 800093e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000940:	4a19      	ldr	r2, [pc, #100]	@ (80009a8 <HAL_UART_MspInit+0xb8>)
 8000942:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000946:	6613      	str	r3, [r2, #96]	@ 0x60
 8000948:	4b17      	ldr	r3, [pc, #92]	@ (80009a8 <HAL_UART_MspInit+0xb8>)
 800094a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800094c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000950:	613b      	str	r3, [r7, #16]
 8000952:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000954:	4b14      	ldr	r3, [pc, #80]	@ (80009a8 <HAL_UART_MspInit+0xb8>)
 8000956:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000958:	4a13      	ldr	r2, [pc, #76]	@ (80009a8 <HAL_UART_MspInit+0xb8>)
 800095a:	f043 0304 	orr.w	r3, r3, #4
 800095e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000960:	4b11      	ldr	r3, [pc, #68]	@ (80009a8 <HAL_UART_MspInit+0xb8>)
 8000962:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000964:	f003 0304 	and.w	r3, r3, #4
 8000968:	60fb      	str	r3, [r7, #12]
 800096a:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800096c:	2330      	movs	r3, #48	@ 0x30
 800096e:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000970:	2302      	movs	r3, #2
 8000972:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000974:	2300      	movs	r3, #0
 8000976:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000978:	2300      	movs	r3, #0
 800097a:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800097c:	2307      	movs	r3, #7
 800097e:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000980:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000984:	4619      	mov	r1, r3
 8000986:	4809      	ldr	r0, [pc, #36]	@ (80009ac <HAL_UART_MspInit+0xbc>)
 8000988:	f000 fd2a 	bl	80013e0 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800098c:	2200      	movs	r2, #0
 800098e:	2100      	movs	r1, #0
 8000990:	2025      	movs	r0, #37	@ 0x25
 8000992:	f000 f9ce 	bl	8000d32 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000996:	2025      	movs	r0, #37	@ 0x25
 8000998:	f000 f9e5 	bl	8000d66 <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 800099c:	bf00      	nop
 800099e:	3778      	adds	r7, #120	@ 0x78
 80009a0:	46bd      	mov	sp, r7
 80009a2:	bd80      	pop	{r7, pc}
 80009a4:	40013800 	.word	0x40013800
 80009a8:	40021000 	.word	0x40021000
 80009ac:	48000800 	.word	0x48000800

080009b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009b0:	b480      	push	{r7}
 80009b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80009b4:	bf00      	nop
 80009b6:	e7fd      	b.n	80009b4 <NMI_Handler+0x4>

080009b8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009b8:	b480      	push	{r7}
 80009ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009bc:	bf00      	nop
 80009be:	e7fd      	b.n	80009bc <HardFault_Handler+0x4>

080009c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009c0:	b480      	push	{r7}
 80009c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009c4:	bf00      	nop
 80009c6:	e7fd      	b.n	80009c4 <MemManage_Handler+0x4>

080009c8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009c8:	b480      	push	{r7}
 80009ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009cc:	bf00      	nop
 80009ce:	e7fd      	b.n	80009cc <BusFault_Handler+0x4>

080009d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009d0:	b480      	push	{r7}
 80009d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009d4:	bf00      	nop
 80009d6:	e7fd      	b.n	80009d4 <UsageFault_Handler+0x4>

080009d8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009d8:	b480      	push	{r7}
 80009da:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009dc:	bf00      	nop
 80009de:	46bd      	mov	sp, r7
 80009e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e4:	4770      	bx	lr

080009e6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009e6:	b480      	push	{r7}
 80009e8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009ea:	bf00      	nop
 80009ec:	46bd      	mov	sp, r7
 80009ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f2:	4770      	bx	lr

080009f4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009f4:	b480      	push	{r7}
 80009f6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009f8:	bf00      	nop
 80009fa:	46bd      	mov	sp, r7
 80009fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a00:	4770      	bx	lr

08000a02 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a02:	b580      	push	{r7, lr}
 8000a04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a06:	f000 f89b 	bl	8000b40 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a0a:	bf00      	nop
 8000a0c:	bd80      	pop	{r7, pc}
	...

08000a10 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000a14:	4802      	ldr	r0, [pc, #8]	@ (8000a20 <USART1_IRQHandler+0x10>)
 8000a16:	f001 ff61 	bl	80028dc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000a1a:	bf00      	nop
 8000a1c:	bd80      	pop	{r7, pc}
 8000a1e:	bf00      	nop
 8000a20:	2000006c 	.word	0x2000006c

08000a24 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000a24:	b480      	push	{r7}
 8000a26:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000a28:	4b06      	ldr	r3, [pc, #24]	@ (8000a44 <SystemInit+0x20>)
 8000a2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000a2e:	4a05      	ldr	r2, [pc, #20]	@ (8000a44 <SystemInit+0x20>)
 8000a30:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000a34:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a38:	bf00      	nop
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a40:	4770      	bx	lr
 8000a42:	bf00      	nop
 8000a44:	e000ed00 	.word	0xe000ed00

08000a48 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000a48:	480d      	ldr	r0, [pc, #52]	@ (8000a80 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000a4a:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000a4c:	f7ff ffea 	bl	8000a24 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a50:	480c      	ldr	r0, [pc, #48]	@ (8000a84 <LoopForever+0x6>)
  ldr r1, =_edata
 8000a52:	490d      	ldr	r1, [pc, #52]	@ (8000a88 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000a54:	4a0d      	ldr	r2, [pc, #52]	@ (8000a8c <LoopForever+0xe>)
  movs r3, #0
 8000a56:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000a58:	e002      	b.n	8000a60 <LoopCopyDataInit>

08000a5a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a5a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a5c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a5e:	3304      	adds	r3, #4

08000a60 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a60:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a62:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a64:	d3f9      	bcc.n	8000a5a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a66:	4a0a      	ldr	r2, [pc, #40]	@ (8000a90 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000a68:	4c0a      	ldr	r4, [pc, #40]	@ (8000a94 <LoopForever+0x16>)
  movs r3, #0
 8000a6a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a6c:	e001      	b.n	8000a72 <LoopFillZerobss>

08000a6e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a6e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a70:	3204      	adds	r2, #4

08000a72 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a72:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a74:	d3fb      	bcc.n	8000a6e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000a76:	f005 fcb7 	bl	80063e8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000a7a:	f7ff fda3 	bl	80005c4 <main>

08000a7e <LoopForever>:

LoopForever:
    b LoopForever
 8000a7e:	e7fe      	b.n	8000a7e <LoopForever>
  ldr   r0, =_estack
 8000a80:	2001c000 	.word	0x2001c000
  ldr r0, =_sdata
 8000a84:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a88:	20000044 	.word	0x20000044
  ldr r2, =_sidata
 8000a8c:	08006650 	.word	0x08006650
  ldr r2, =_sbss
 8000a90:	20000044 	.word	0x20000044
  ldr r4, =_ebss
 8000a94:	20000134 	.word	0x20000134

08000a98 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000a98:	e7fe      	b.n	8000a98 <ADC1_2_IRQHandler>

08000a9a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a9a:	b580      	push	{r7, lr}
 8000a9c:	b082      	sub	sp, #8
 8000a9e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000aa4:	2003      	movs	r0, #3
 8000aa6:	f000 f939 	bl	8000d1c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000aaa:	200f      	movs	r0, #15
 8000aac:	f000 f80e 	bl	8000acc <HAL_InitTick>
 8000ab0:	4603      	mov	r3, r0
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d002      	beq.n	8000abc <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000ab6:	2301      	movs	r3, #1
 8000ab8:	71fb      	strb	r3, [r7, #7]
 8000aba:	e001      	b.n	8000ac0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000abc:	f7ff fef4 	bl	80008a8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000ac0:	79fb      	ldrb	r3, [r7, #7]

}
 8000ac2:	4618      	mov	r0, r3
 8000ac4:	3708      	adds	r7, #8
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	bd80      	pop	{r7, pc}
	...

08000acc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b084      	sub	sp, #16
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000ad8:	4b16      	ldr	r3, [pc, #88]	@ (8000b34 <HAL_InitTick+0x68>)
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d022      	beq.n	8000b26 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000ae0:	4b15      	ldr	r3, [pc, #84]	@ (8000b38 <HAL_InitTick+0x6c>)
 8000ae2:	681a      	ldr	r2, [r3, #0]
 8000ae4:	4b13      	ldr	r3, [pc, #76]	@ (8000b34 <HAL_InitTick+0x68>)
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000aec:	fbb1 f3f3 	udiv	r3, r1, r3
 8000af0:	fbb2 f3f3 	udiv	r3, r2, r3
 8000af4:	4618      	mov	r0, r3
 8000af6:	f000 f944 	bl	8000d82 <HAL_SYSTICK_Config>
 8000afa:	4603      	mov	r3, r0
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	d10f      	bne.n	8000b20 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	2b0f      	cmp	r3, #15
 8000b04:	d809      	bhi.n	8000b1a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b06:	2200      	movs	r2, #0
 8000b08:	6879      	ldr	r1, [r7, #4]
 8000b0a:	f04f 30ff 	mov.w	r0, #4294967295
 8000b0e:	f000 f910 	bl	8000d32 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000b12:	4a0a      	ldr	r2, [pc, #40]	@ (8000b3c <HAL_InitTick+0x70>)
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	6013      	str	r3, [r2, #0]
 8000b18:	e007      	b.n	8000b2a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000b1a:	2301      	movs	r3, #1
 8000b1c:	73fb      	strb	r3, [r7, #15]
 8000b1e:	e004      	b.n	8000b2a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000b20:	2301      	movs	r3, #1
 8000b22:	73fb      	strb	r3, [r7, #15]
 8000b24:	e001      	b.n	8000b2a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000b26:	2301      	movs	r3, #1
 8000b28:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000b2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b2c:	4618      	mov	r0, r3
 8000b2e:	3710      	adds	r7, #16
 8000b30:	46bd      	mov	sp, r7
 8000b32:	bd80      	pop	{r7, pc}
 8000b34:	20000008 	.word	0x20000008
 8000b38:	20000000 	.word	0x20000000
 8000b3c:	20000004 	.word	0x20000004

08000b40 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b40:	b480      	push	{r7}
 8000b42:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b44:	4b05      	ldr	r3, [pc, #20]	@ (8000b5c <HAL_IncTick+0x1c>)
 8000b46:	681a      	ldr	r2, [r3, #0]
 8000b48:	4b05      	ldr	r3, [pc, #20]	@ (8000b60 <HAL_IncTick+0x20>)
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	4413      	add	r3, r2
 8000b4e:	4a03      	ldr	r2, [pc, #12]	@ (8000b5c <HAL_IncTick+0x1c>)
 8000b50:	6013      	str	r3, [r2, #0]
}
 8000b52:	bf00      	nop
 8000b54:	46bd      	mov	sp, r7
 8000b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5a:	4770      	bx	lr
 8000b5c:	20000100 	.word	0x20000100
 8000b60:	20000008 	.word	0x20000008

08000b64 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b64:	b480      	push	{r7}
 8000b66:	af00      	add	r7, sp, #0
  return uwTick;
 8000b68:	4b03      	ldr	r3, [pc, #12]	@ (8000b78 <HAL_GetTick+0x14>)
 8000b6a:	681b      	ldr	r3, [r3, #0]
}
 8000b6c:	4618      	mov	r0, r3
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b74:	4770      	bx	lr
 8000b76:	bf00      	nop
 8000b78:	20000100 	.word	0x20000100

08000b7c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	b085      	sub	sp, #20
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	f003 0307 	and.w	r3, r3, #7
 8000b8a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b8c:	4b0c      	ldr	r3, [pc, #48]	@ (8000bc0 <__NVIC_SetPriorityGrouping+0x44>)
 8000b8e:	68db      	ldr	r3, [r3, #12]
 8000b90:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b92:	68ba      	ldr	r2, [r7, #8]
 8000b94:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000b98:	4013      	ands	r3, r2
 8000b9a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b9c:	68fb      	ldr	r3, [r7, #12]
 8000b9e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ba0:	68bb      	ldr	r3, [r7, #8]
 8000ba2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ba4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000ba8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000bac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000bae:	4a04      	ldr	r2, [pc, #16]	@ (8000bc0 <__NVIC_SetPriorityGrouping+0x44>)
 8000bb0:	68bb      	ldr	r3, [r7, #8]
 8000bb2:	60d3      	str	r3, [r2, #12]
}
 8000bb4:	bf00      	nop
 8000bb6:	3714      	adds	r7, #20
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bbe:	4770      	bx	lr
 8000bc0:	e000ed00 	.word	0xe000ed00

08000bc4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000bc8:	4b04      	ldr	r3, [pc, #16]	@ (8000bdc <__NVIC_GetPriorityGrouping+0x18>)
 8000bca:	68db      	ldr	r3, [r3, #12]
 8000bcc:	0a1b      	lsrs	r3, r3, #8
 8000bce:	f003 0307 	and.w	r3, r3, #7
}
 8000bd2:	4618      	mov	r0, r3
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bda:	4770      	bx	lr
 8000bdc:	e000ed00 	.word	0xe000ed00

08000be0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000be0:	b480      	push	{r7}
 8000be2:	b083      	sub	sp, #12
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	4603      	mov	r3, r0
 8000be8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	db0b      	blt.n	8000c0a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000bf2:	79fb      	ldrb	r3, [r7, #7]
 8000bf4:	f003 021f 	and.w	r2, r3, #31
 8000bf8:	4907      	ldr	r1, [pc, #28]	@ (8000c18 <__NVIC_EnableIRQ+0x38>)
 8000bfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bfe:	095b      	lsrs	r3, r3, #5
 8000c00:	2001      	movs	r0, #1
 8000c02:	fa00 f202 	lsl.w	r2, r0, r2
 8000c06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000c0a:	bf00      	nop
 8000c0c:	370c      	adds	r7, #12
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c14:	4770      	bx	lr
 8000c16:	bf00      	nop
 8000c18:	e000e100 	.word	0xe000e100

08000c1c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	b083      	sub	sp, #12
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	4603      	mov	r3, r0
 8000c24:	6039      	str	r1, [r7, #0]
 8000c26:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	db0a      	blt.n	8000c46 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c30:	683b      	ldr	r3, [r7, #0]
 8000c32:	b2da      	uxtb	r2, r3
 8000c34:	490c      	ldr	r1, [pc, #48]	@ (8000c68 <__NVIC_SetPriority+0x4c>)
 8000c36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c3a:	0112      	lsls	r2, r2, #4
 8000c3c:	b2d2      	uxtb	r2, r2
 8000c3e:	440b      	add	r3, r1
 8000c40:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c44:	e00a      	b.n	8000c5c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c46:	683b      	ldr	r3, [r7, #0]
 8000c48:	b2da      	uxtb	r2, r3
 8000c4a:	4908      	ldr	r1, [pc, #32]	@ (8000c6c <__NVIC_SetPriority+0x50>)
 8000c4c:	79fb      	ldrb	r3, [r7, #7]
 8000c4e:	f003 030f 	and.w	r3, r3, #15
 8000c52:	3b04      	subs	r3, #4
 8000c54:	0112      	lsls	r2, r2, #4
 8000c56:	b2d2      	uxtb	r2, r2
 8000c58:	440b      	add	r3, r1
 8000c5a:	761a      	strb	r2, [r3, #24]
}
 8000c5c:	bf00      	nop
 8000c5e:	370c      	adds	r7, #12
 8000c60:	46bd      	mov	sp, r7
 8000c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c66:	4770      	bx	lr
 8000c68:	e000e100 	.word	0xe000e100
 8000c6c:	e000ed00 	.word	0xe000ed00

08000c70 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c70:	b480      	push	{r7}
 8000c72:	b089      	sub	sp, #36	@ 0x24
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	60f8      	str	r0, [r7, #12]
 8000c78:	60b9      	str	r1, [r7, #8]
 8000c7a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c7c:	68fb      	ldr	r3, [r7, #12]
 8000c7e:	f003 0307 	and.w	r3, r3, #7
 8000c82:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c84:	69fb      	ldr	r3, [r7, #28]
 8000c86:	f1c3 0307 	rsb	r3, r3, #7
 8000c8a:	2b04      	cmp	r3, #4
 8000c8c:	bf28      	it	cs
 8000c8e:	2304      	movcs	r3, #4
 8000c90:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c92:	69fb      	ldr	r3, [r7, #28]
 8000c94:	3304      	adds	r3, #4
 8000c96:	2b06      	cmp	r3, #6
 8000c98:	d902      	bls.n	8000ca0 <NVIC_EncodePriority+0x30>
 8000c9a:	69fb      	ldr	r3, [r7, #28]
 8000c9c:	3b03      	subs	r3, #3
 8000c9e:	e000      	b.n	8000ca2 <NVIC_EncodePriority+0x32>
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ca4:	f04f 32ff 	mov.w	r2, #4294967295
 8000ca8:	69bb      	ldr	r3, [r7, #24]
 8000caa:	fa02 f303 	lsl.w	r3, r2, r3
 8000cae:	43da      	mvns	r2, r3
 8000cb0:	68bb      	ldr	r3, [r7, #8]
 8000cb2:	401a      	ands	r2, r3
 8000cb4:	697b      	ldr	r3, [r7, #20]
 8000cb6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000cb8:	f04f 31ff 	mov.w	r1, #4294967295
 8000cbc:	697b      	ldr	r3, [r7, #20]
 8000cbe:	fa01 f303 	lsl.w	r3, r1, r3
 8000cc2:	43d9      	mvns	r1, r3
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cc8:	4313      	orrs	r3, r2
         );
}
 8000cca:	4618      	mov	r0, r3
 8000ccc:	3724      	adds	r7, #36	@ 0x24
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd4:	4770      	bx	lr
	...

08000cd8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b082      	sub	sp, #8
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	3b01      	subs	r3, #1
 8000ce4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000ce8:	d301      	bcc.n	8000cee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000cea:	2301      	movs	r3, #1
 8000cec:	e00f      	b.n	8000d0e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000cee:	4a0a      	ldr	r2, [pc, #40]	@ (8000d18 <SysTick_Config+0x40>)
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	3b01      	subs	r3, #1
 8000cf4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000cf6:	210f      	movs	r1, #15
 8000cf8:	f04f 30ff 	mov.w	r0, #4294967295
 8000cfc:	f7ff ff8e 	bl	8000c1c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d00:	4b05      	ldr	r3, [pc, #20]	@ (8000d18 <SysTick_Config+0x40>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d06:	4b04      	ldr	r3, [pc, #16]	@ (8000d18 <SysTick_Config+0x40>)
 8000d08:	2207      	movs	r2, #7
 8000d0a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d0c:	2300      	movs	r3, #0
}
 8000d0e:	4618      	mov	r0, r3
 8000d10:	3708      	adds	r7, #8
 8000d12:	46bd      	mov	sp, r7
 8000d14:	bd80      	pop	{r7, pc}
 8000d16:	bf00      	nop
 8000d18:	e000e010 	.word	0xe000e010

08000d1c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b082      	sub	sp, #8
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d24:	6878      	ldr	r0, [r7, #4]
 8000d26:	f7ff ff29 	bl	8000b7c <__NVIC_SetPriorityGrouping>
}
 8000d2a:	bf00      	nop
 8000d2c:	3708      	adds	r7, #8
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	bd80      	pop	{r7, pc}

08000d32 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d32:	b580      	push	{r7, lr}
 8000d34:	b086      	sub	sp, #24
 8000d36:	af00      	add	r7, sp, #0
 8000d38:	4603      	mov	r3, r0
 8000d3a:	60b9      	str	r1, [r7, #8]
 8000d3c:	607a      	str	r2, [r7, #4]
 8000d3e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000d40:	f7ff ff40 	bl	8000bc4 <__NVIC_GetPriorityGrouping>
 8000d44:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d46:	687a      	ldr	r2, [r7, #4]
 8000d48:	68b9      	ldr	r1, [r7, #8]
 8000d4a:	6978      	ldr	r0, [r7, #20]
 8000d4c:	f7ff ff90 	bl	8000c70 <NVIC_EncodePriority>
 8000d50:	4602      	mov	r2, r0
 8000d52:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d56:	4611      	mov	r1, r2
 8000d58:	4618      	mov	r0, r3
 8000d5a:	f7ff ff5f 	bl	8000c1c <__NVIC_SetPriority>
}
 8000d5e:	bf00      	nop
 8000d60:	3718      	adds	r7, #24
 8000d62:	46bd      	mov	sp, r7
 8000d64:	bd80      	pop	{r7, pc}

08000d66 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d66:	b580      	push	{r7, lr}
 8000d68:	b082      	sub	sp, #8
 8000d6a:	af00      	add	r7, sp, #0
 8000d6c:	4603      	mov	r3, r0
 8000d6e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d74:	4618      	mov	r0, r3
 8000d76:	f7ff ff33 	bl	8000be0 <__NVIC_EnableIRQ>
}
 8000d7a:	bf00      	nop
 8000d7c:	3708      	adds	r7, #8
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	bd80      	pop	{r7, pc}

08000d82 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d82:	b580      	push	{r7, lr}
 8000d84:	b082      	sub	sp, #8
 8000d86:	af00      	add	r7, sp, #0
 8000d88:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d8a:	6878      	ldr	r0, [r7, #4]
 8000d8c:	f7ff ffa4 	bl	8000cd8 <SysTick_Config>
 8000d90:	4603      	mov	r3, r0
}
 8000d92:	4618      	mov	r0, r3
 8000d94:	3708      	adds	r7, #8
 8000d96:	46bd      	mov	sp, r7
 8000d98:	bd80      	pop	{r7, pc}

08000d9a <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000d9a:	b480      	push	{r7}
 8000d9c:	b085      	sub	sp, #20
 8000d9e:	af00      	add	r7, sp, #0
 8000da0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000da2:	2300      	movs	r3, #0
 8000da4:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8000dac:	b2db      	uxtb	r3, r3
 8000dae:	2b02      	cmp	r3, #2
 8000db0:	d005      	beq.n	8000dbe <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	2204      	movs	r2, #4
 8000db6:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8000db8:	2301      	movs	r3, #1
 8000dba:	73fb      	strb	r3, [r7, #15]
 8000dbc:	e037      	b.n	8000e2e <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	681a      	ldr	r2, [r3, #0]
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	f022 020e 	bic.w	r2, r2, #14
 8000dcc:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000dd2:	681a      	ldr	r2, [r3, #0]
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000dd8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8000ddc:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	681a      	ldr	r2, [r3, #0]
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	f022 0201 	bic.w	r2, r2, #1
 8000dec:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000df2:	f003 021f 	and.w	r2, r3, #31
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dfa:	2101      	movs	r1, #1
 8000dfc:	fa01 f202 	lsl.w	r2, r1, r2
 8000e00:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e06:	687a      	ldr	r2, [r7, #4]
 8000e08:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8000e0a:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d00c      	beq.n	8000e2e <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000e18:	681a      	ldr	r2, [r3, #0]
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000e1e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8000e22:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e28:	687a      	ldr	r2, [r7, #4]
 8000e2a:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8000e2c:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	2201      	movs	r2, #1
 8000e32:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	2200      	movs	r2, #0
 8000e3a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 8000e3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e40:	4618      	mov	r0, r3
 8000e42:	3714      	adds	r7, #20
 8000e44:	46bd      	mov	sp, r7
 8000e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4a:	4770      	bx	lr

08000e4c <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b084      	sub	sp, #16
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000e54:	2300      	movs	r3, #0
 8000e56:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8000e5e:	b2db      	uxtb	r3, r3
 8000e60:	2b02      	cmp	r3, #2
 8000e62:	d00d      	beq.n	8000e80 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	2204      	movs	r2, #4
 8000e68:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	2201      	movs	r2, #1
 8000e6e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	2200      	movs	r2, #0
 8000e76:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 8000e7a:	2301      	movs	r3, #1
 8000e7c:	73fb      	strb	r3, [r7, #15]
 8000e7e:	e047      	b.n	8000f10 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	681a      	ldr	r2, [r3, #0]
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	f022 020e 	bic.w	r2, r2, #14
 8000e8e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	681a      	ldr	r2, [r3, #0]
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	f022 0201 	bic.w	r2, r2, #1
 8000e9e:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000ea4:	681a      	ldr	r2, [r3, #0]
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000eaa:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8000eae:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000eb4:	f003 021f 	and.w	r2, r3, #31
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ebc:	2101      	movs	r1, #1
 8000ebe:	fa01 f202 	lsl.w	r2, r1, r2
 8000ec2:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ec8:	687a      	ldr	r2, [r7, #4]
 8000eca:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8000ecc:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d00c      	beq.n	8000ef0 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000eda:	681a      	ldr	r2, [r3, #0]
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000ee0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8000ee4:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000eea:	687a      	ldr	r2, [r7, #4]
 8000eec:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8000eee:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	2201      	movs	r2, #1
 8000ef4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	2200      	movs	r2, #0
 8000efc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d003      	beq.n	8000f10 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000f0c:	6878      	ldr	r0, [r7, #4]
 8000f0e:	4798      	blx	r3
    }
  }
  return status;
 8000f10:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f12:	4618      	mov	r0, r3
 8000f14:	3710      	adds	r7, #16
 8000f16:	46bd      	mov	sp, r7
 8000f18:	bd80      	pop	{r7, pc}
	...

08000f1c <HAL_FLASH_Program>:
  *         are stored the data for the row fast program.
  *
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b086      	sub	sp, #24
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	60f8      	str	r0, [r7, #12]
 8000f24:	60b9      	str	r1, [r7, #8]
 8000f26:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status;
  uint32_t prog_bit = 0;
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8000f2e:	4b2f      	ldr	r3, [pc, #188]	@ (8000fec <HAL_FLASH_Program+0xd0>)
 8000f30:	781b      	ldrb	r3, [r3, #0]
 8000f32:	2b01      	cmp	r3, #1
 8000f34:	d101      	bne.n	8000f3a <HAL_FLASH_Program+0x1e>
 8000f36:	2302      	movs	r3, #2
 8000f38:	e053      	b.n	8000fe2 <HAL_FLASH_Program+0xc6>
 8000f3a:	4b2c      	ldr	r3, [pc, #176]	@ (8000fec <HAL_FLASH_Program+0xd0>)
 8000f3c:	2201      	movs	r2, #1
 8000f3e:	701a      	strb	r2, [r3, #0]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000f40:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000f44:	f000 f878 	bl	8001038 <FLASH_WaitForLastOperation>
 8000f48:	4603      	mov	r3, r0
 8000f4a:	75fb      	strb	r3, [r7, #23]

  if (status == HAL_OK)
 8000f4c:	7dfb      	ldrb	r3, [r7, #23]
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d143      	bne.n	8000fda <HAL_FLASH_Program+0xbe>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8000f52:	4b26      	ldr	r3, [pc, #152]	@ (8000fec <HAL_FLASH_Program+0xd0>)
 8000f54:	2200      	movs	r2, #0
 8000f56:	605a      	str	r2, [r3, #4]

    /* Deactivate the data cache if they are activated to avoid data misbehavior */
    if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8000f58:	4b25      	ldr	r3, [pc, #148]	@ (8000ff0 <HAL_FLASH_Program+0xd4>)
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d009      	beq.n	8000f78 <HAL_FLASH_Program+0x5c>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 8000f64:	4b22      	ldr	r3, [pc, #136]	@ (8000ff0 <HAL_FLASH_Program+0xd4>)
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	4a21      	ldr	r2, [pc, #132]	@ (8000ff0 <HAL_FLASH_Program+0xd4>)
 8000f6a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8000f6e:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 8000f70:	4b1e      	ldr	r3, [pc, #120]	@ (8000fec <HAL_FLASH_Program+0xd0>)
 8000f72:	2202      	movs	r2, #2
 8000f74:	771a      	strb	r2, [r3, #28]
 8000f76:	e002      	b.n	8000f7e <HAL_FLASH_Program+0x62>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8000f78:	4b1c      	ldr	r3, [pc, #112]	@ (8000fec <HAL_FLASH_Program+0xd0>)
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	771a      	strb	r2, [r3, #28]
    }
    if (TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 8000f7e:	68fb      	ldr	r3, [r7, #12]
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d107      	bne.n	8000f94 <HAL_FLASH_Program+0x78>
    {
      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 8000f84:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000f88:	68b8      	ldr	r0, [r7, #8]
 8000f8a:	f000 f8a7 	bl	80010dc <FLASH_Program_DoubleWord>
      prog_bit = FLASH_CR_PG;
 8000f8e:	2301      	movs	r3, #1
 8000f90:	613b      	str	r3, [r7, #16]
 8000f92:	e010      	b.n	8000fb6 <HAL_FLASH_Program+0x9a>
    }
    else if ((TypeProgram == FLASH_TYPEPROGRAM_FAST) || (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST))
 8000f94:	68fb      	ldr	r3, [r7, #12]
 8000f96:	2b01      	cmp	r3, #1
 8000f98:	d002      	beq.n	8000fa0 <HAL_FLASH_Program+0x84>
 8000f9a:	68fb      	ldr	r3, [r7, #12]
 8000f9c:	2b02      	cmp	r3, #2
 8000f9e:	d10a      	bne.n	8000fb6 <HAL_FLASH_Program+0x9a>
    {
      /* Fast program a 32 row double-word (64-bit) at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 8000fa0:	683b      	ldr	r3, [r7, #0]
 8000fa2:	4619      	mov	r1, r3
 8000fa4:	68b8      	ldr	r0, [r7, #8]
 8000fa6:	f000 f8bf 	bl	8001128 <FLASH_Program_Fast>

      /* If it is the last row, the bit will be cleared at the end of the operation */
      if (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST)
 8000faa:	68fb      	ldr	r3, [r7, #12]
 8000fac:	2b02      	cmp	r3, #2
 8000fae:	d102      	bne.n	8000fb6 <HAL_FLASH_Program+0x9a>
      {
        prog_bit = FLASH_CR_FSTPG;
 8000fb0:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8000fb4:	613b      	str	r3, [r7, #16]
    {
      /* Nothing to do */
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8000fb6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000fba:	f000 f83d 	bl	8001038 <FLASH_WaitForLastOperation>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
    if (prog_bit != 0U)
 8000fc2:	693b      	ldr	r3, [r7, #16]
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d006      	beq.n	8000fd6 <HAL_FLASH_Program+0xba>
    {
      CLEAR_BIT(FLASH->CR, prog_bit);
 8000fc8:	4b09      	ldr	r3, [pc, #36]	@ (8000ff0 <HAL_FLASH_Program+0xd4>)
 8000fca:	695a      	ldr	r2, [r3, #20]
 8000fcc:	693b      	ldr	r3, [r7, #16]
 8000fce:	43db      	mvns	r3, r3
 8000fd0:	4907      	ldr	r1, [pc, #28]	@ (8000ff0 <HAL_FLASH_Program+0xd4>)
 8000fd2:	4013      	ands	r3, r2
 8000fd4:	614b      	str	r3, [r1, #20]
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8000fd6:	f000 f9b9 	bl	800134c <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8000fda:	4b04      	ldr	r3, [pc, #16]	@ (8000fec <HAL_FLASH_Program+0xd0>)
 8000fdc:	2200      	movs	r2, #0
 8000fde:	701a      	strb	r2, [r3, #0]

  /* return status */
  return status;
 8000fe0:	7dfb      	ldrb	r3, [r7, #23]
}
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	3718      	adds	r7, #24
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bd80      	pop	{r7, pc}
 8000fea:	bf00      	nop
 8000fec:	2000000c 	.word	0x2000000c
 8000ff0:	40022000 	.word	0x40022000

08000ff4 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	b083      	sub	sp, #12
 8000ff8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	71fb      	strb	r3, [r7, #7]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8000ffe:	4b0b      	ldr	r3, [pc, #44]	@ (800102c <HAL_FLASH_Unlock+0x38>)
 8001000:	695b      	ldr	r3, [r3, #20]
 8001002:	2b00      	cmp	r3, #0
 8001004:	da0b      	bge.n	800101e <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8001006:	4b09      	ldr	r3, [pc, #36]	@ (800102c <HAL_FLASH_Unlock+0x38>)
 8001008:	4a09      	ldr	r2, [pc, #36]	@ (8001030 <HAL_FLASH_Unlock+0x3c>)
 800100a:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 800100c:	4b07      	ldr	r3, [pc, #28]	@ (800102c <HAL_FLASH_Unlock+0x38>)
 800100e:	4a09      	ldr	r2, [pc, #36]	@ (8001034 <HAL_FLASH_Unlock+0x40>)
 8001010:	609a      	str	r2, [r3, #8]

    /* verify Flash is unlocked */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8001012:	4b06      	ldr	r3, [pc, #24]	@ (800102c <HAL_FLASH_Unlock+0x38>)
 8001014:	695b      	ldr	r3, [r3, #20]
 8001016:	2b00      	cmp	r3, #0
 8001018:	da01      	bge.n	800101e <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 800101a:	2301      	movs	r3, #1
 800101c:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 800101e:	79fb      	ldrb	r3, [r7, #7]
}
 8001020:	4618      	mov	r0, r3
 8001022:	370c      	adds	r7, #12
 8001024:	46bd      	mov	sp, r7
 8001026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102a:	4770      	bx	lr
 800102c:	40022000 	.word	0x40022000
 8001030:	45670123 	.word	0x45670123
 8001034:	cdef89ab 	.word	0xcdef89ab

08001038 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operation timeout.
  * @retval HAL_Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b084      	sub	sp, #16
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */

  uint32_t tickstart = HAL_GetTick();
 8001040:	f7ff fd90 	bl	8000b64 <HAL_GetTick>
 8001044:	60f8      	str	r0, [r7, #12]
  uint32_t error;

  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8001046:	e009      	b.n	800105c <FLASH_WaitForLastOperation+0x24>
  {
    if ((HAL_GetTick() - tickstart) > Timeout)
 8001048:	f7ff fd8c 	bl	8000b64 <HAL_GetTick>
 800104c:	4602      	mov	r2, r0
 800104e:	68fb      	ldr	r3, [r7, #12]
 8001050:	1ad3      	subs	r3, r2, r3
 8001052:	687a      	ldr	r2, [r7, #4]
 8001054:	429a      	cmp	r2, r3
 8001056:	d201      	bcs.n	800105c <FLASH_WaitForLastOperation+0x24>
    {
      return HAL_TIMEOUT;
 8001058:	2303      	movs	r3, #3
 800105a:	e037      	b.n	80010cc <FLASH_WaitForLastOperation+0x94>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 800105c:	4b1d      	ldr	r3, [pc, #116]	@ (80010d4 <FLASH_WaitForLastOperation+0x9c>)
 800105e:	691b      	ldr	r3, [r3, #16]
 8001060:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001064:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001068:	d0ee      	beq.n	8001048 <FLASH_WaitForLastOperation+0x10>
    }
  }

  /* Check FLASH operation error flags */
  error = (FLASH->SR & FLASH_FLAG_SR_ERRORS);
 800106a:	4b1a      	ldr	r3, [pc, #104]	@ (80010d4 <FLASH_WaitForLastOperation+0x9c>)
 800106c:	691a      	ldr	r2, [r3, #16]
 800106e:	f24c 33fa 	movw	r3, #50170	@ 0xc3fa
 8001072:	4013      	ands	r3, r2
 8001074:	60bb      	str	r3, [r7, #8]
  if (error != 0u)
 8001076:	68bb      	ldr	r3, [r7, #8]
 8001078:	2b00      	cmp	r3, #0
 800107a:	d01d      	beq.n	80010b8 <FLASH_WaitForLastOperation+0x80>
  {
    /* Save the error code */
    pFlash.ErrorCode |= error;
 800107c:	4b16      	ldr	r3, [pc, #88]	@ (80010d8 <FLASH_WaitForLastOperation+0xa0>)
 800107e:	685a      	ldr	r2, [r3, #4]
 8001080:	68bb      	ldr	r3, [r7, #8]
 8001082:	4313      	orrs	r3, r2
 8001084:	4a14      	ldr	r2, [pc, #80]	@ (80010d8 <FLASH_WaitForLastOperation+0xa0>)
 8001086:	6053      	str	r3, [r2, #4]

    /* Clear error programming flags */
    __HAL_FLASH_CLEAR_FLAG(error);
 8001088:	68bb      	ldr	r3, [r7, #8]
 800108a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800108e:	d307      	bcc.n	80010a0 <FLASH_WaitForLastOperation+0x68>
 8001090:	4b10      	ldr	r3, [pc, #64]	@ (80010d4 <FLASH_WaitForLastOperation+0x9c>)
 8001092:	699a      	ldr	r2, [r3, #24]
 8001094:	68bb      	ldr	r3, [r7, #8]
 8001096:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800109a:	490e      	ldr	r1, [pc, #56]	@ (80010d4 <FLASH_WaitForLastOperation+0x9c>)
 800109c:	4313      	orrs	r3, r2
 800109e:	618b      	str	r3, [r1, #24]
 80010a0:	68bb      	ldr	r3, [r7, #8]
 80010a2:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d004      	beq.n	80010b4 <FLASH_WaitForLastOperation+0x7c>
 80010aa:	4a0a      	ldr	r2, [pc, #40]	@ (80010d4 <FLASH_WaitForLastOperation+0x9c>)
 80010ac:	68bb      	ldr	r3, [r7, #8]
 80010ae:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 80010b2:	6113      	str	r3, [r2, #16]

    return HAL_ERROR;
 80010b4:	2301      	movs	r3, #1
 80010b6:	e009      	b.n	80010cc <FLASH_WaitForLastOperation+0x94>
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 80010b8:	4b06      	ldr	r3, [pc, #24]	@ (80010d4 <FLASH_WaitForLastOperation+0x9c>)
 80010ba:	691b      	ldr	r3, [r3, #16]
 80010bc:	f003 0301 	and.w	r3, r3, #1
 80010c0:	2b01      	cmp	r3, #1
 80010c2:	d102      	bne.n	80010ca <FLASH_WaitForLastOperation+0x92>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80010c4:	4b03      	ldr	r3, [pc, #12]	@ (80010d4 <FLASH_WaitForLastOperation+0x9c>)
 80010c6:	2201      	movs	r2, #1
 80010c8:	611a      	str	r2, [r3, #16]
  }

  /* If there is an error flag set */
  return HAL_OK;
 80010ca:	2300      	movs	r3, #0
}
 80010cc:	4618      	mov	r0, r3
 80010ce:	3710      	adds	r7, #16
 80010d0:	46bd      	mov	sp, r7
 80010d2:	bd80      	pop	{r7, pc}
 80010d4:	40022000 	.word	0x40022000
 80010d8:	2000000c 	.word	0x2000000c

080010dc <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 80010dc:	b480      	push	{r7}
 80010de:	b085      	sub	sp, #20
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	60f8      	str	r0, [r7, #12]
 80010e4:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 80010e8:	4b0e      	ldr	r3, [pc, #56]	@ (8001124 <FLASH_Program_DoubleWord+0x48>)
 80010ea:	695b      	ldr	r3, [r3, #20]
 80010ec:	4a0d      	ldr	r2, [pc, #52]	@ (8001124 <FLASH_Program_DoubleWord+0x48>)
 80010ee:	f043 0301 	orr.w	r3, r3, #1
 80010f2:	6153      	str	r3, [r2, #20]

  /* Program first word */
  *(uint32_t *)Address = (uint32_t)Data;
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	683a      	ldr	r2, [r7, #0]
 80010f8:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 80010fa:	f3bf 8f6f 	isb	sy
}
 80010fe:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(uint32_t *)(Address + 4U) = (uint32_t)(Data >> 32U);
 8001100:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001104:	f04f 0200 	mov.w	r2, #0
 8001108:	f04f 0300 	mov.w	r3, #0
 800110c:	000a      	movs	r2, r1
 800110e:	2300      	movs	r3, #0
 8001110:	68f9      	ldr	r1, [r7, #12]
 8001112:	3104      	adds	r1, #4
 8001114:	4613      	mov	r3, r2
 8001116:	600b      	str	r3, [r1, #0]
}
 8001118:	bf00      	nop
 800111a:	3714      	adds	r7, #20
 800111c:	46bd      	mov	sp, r7
 800111e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001122:	4770      	bx	lr
 8001124:	40022000 	.word	0x40022000

08001128 <FLASH_Program_Fast>:
  * @param  Address specifies the address to be programmed.
  * @param  DataAddress specifies the address where the data are stored.
  * @retval None
  */
static void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
{
 8001128:	b480      	push	{r7}
 800112a:	b089      	sub	sp, #36	@ 0x24
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
 8001130:	6039      	str	r1, [r7, #0]
  uint8_t row_index = (2 * FLASH_NB_DOUBLE_WORDS_IN_ROW);
 8001132:	2340      	movs	r3, #64	@ 0x40
 8001134:	77fb      	strb	r3, [r7, #31]
  uint32_t *dest_addr = (uint32_t *)Address;
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	61bb      	str	r3, [r7, #24]
  uint32_t *src_addr = (uint32_t *)DataAddress;
 800113a:	683b      	ldr	r3, [r7, #0]
 800113c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_FLASH_MAIN_MEM_ADDRESS(Address));

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 800113e:	4b14      	ldr	r3, [pc, #80]	@ (8001190 <FLASH_Program_Fast+0x68>)
 8001140:	695b      	ldr	r3, [r3, #20]
 8001142:	4a13      	ldr	r2, [pc, #76]	@ (8001190 <FLASH_Program_Fast+0x68>)
 8001144:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001148:	6153      	str	r3, [r2, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800114a:	f3ef 8310 	mrs	r3, PRIMASK
 800114e:	60fb      	str	r3, [r7, #12]
  return(result);
 8001150:	68fb      	ldr	r3, [r7, #12]

  /* Enter critical section: Disable interrupts to avoid any interruption during the loop */
  primask_bit = __get_PRIMASK();
 8001152:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8001154:	b672      	cpsid	i
}
 8001156:	bf00      	nop
  __disable_irq();

  /* Program the double words of the row */
  do
  {
    *dest_addr = *src_addr;
 8001158:	697b      	ldr	r3, [r7, #20]
 800115a:	681a      	ldr	r2, [r3, #0]
 800115c:	69bb      	ldr	r3, [r7, #24]
 800115e:	601a      	str	r2, [r3, #0]
    dest_addr++;
 8001160:	69bb      	ldr	r3, [r7, #24]
 8001162:	3304      	adds	r3, #4
 8001164:	61bb      	str	r3, [r7, #24]
    src_addr++;
 8001166:	697b      	ldr	r3, [r7, #20]
 8001168:	3304      	adds	r3, #4
 800116a:	617b      	str	r3, [r7, #20]
    row_index--;
 800116c:	7ffb      	ldrb	r3, [r7, #31]
 800116e:	3b01      	subs	r3, #1
 8001170:	77fb      	strb	r3, [r7, #31]
  }
  while (row_index != 0U);
 8001172:	7ffb      	ldrb	r3, [r7, #31]
 8001174:	2b00      	cmp	r3, #0
 8001176:	d1ef      	bne.n	8001158 <FLASH_Program_Fast+0x30>
 8001178:	693b      	ldr	r3, [r7, #16]
 800117a:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800117c:	68bb      	ldr	r3, [r7, #8]
 800117e:	f383 8810 	msr	PRIMASK, r3
}
 8001182:	bf00      	nop

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
 8001184:	bf00      	nop
 8001186:	3724      	adds	r7, #36	@ 0x24
 8001188:	46bd      	mov	sp, r7
 800118a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118e:	4770      	bx	lr
 8001190:	40022000 	.word	0x40022000

08001194 <HAL_FLASHEx_Erase>:
  *         information on faulty page in case of error (0xFFFFFFFF means that all
  *         the pages have been correctly erased).
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b084      	sub	sp, #16
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
 800119c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800119e:	4b48      	ldr	r3, [pc, #288]	@ (80012c0 <HAL_FLASHEx_Erase+0x12c>)
 80011a0:	781b      	ldrb	r3, [r3, #0]
 80011a2:	2b01      	cmp	r3, #1
 80011a4:	d101      	bne.n	80011aa <HAL_FLASHEx_Erase+0x16>
 80011a6:	2302      	movs	r3, #2
 80011a8:	e085      	b.n	80012b6 <HAL_FLASHEx_Erase+0x122>
 80011aa:	4b45      	ldr	r3, [pc, #276]	@ (80012c0 <HAL_FLASHEx_Erase+0x12c>)
 80011ac:	2201      	movs	r2, #1
 80011ae:	701a      	strb	r2, [r3, #0]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80011b0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80011b4:	f7ff ff40 	bl	8001038 <FLASH_WaitForLastOperation>
 80011b8:	4603      	mov	r3, r0
 80011ba:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 80011bc:	7bfb      	ldrb	r3, [r7, #15]
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d175      	bne.n	80012ae <HAL_FLASHEx_Erase+0x11a>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80011c2:	4b3f      	ldr	r3, [pc, #252]	@ (80012c0 <HAL_FLASHEx_Erase+0x12c>)
 80011c4:	2200      	movs	r2, #0
 80011c6:	605a      	str	r2, [r3, #4]

    /* Deactivate the cache if they are activated to avoid data misbehavior */
    if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != 0U)
 80011c8:	4b3e      	ldr	r3, [pc, #248]	@ (80012c4 <HAL_FLASHEx_Erase+0x130>)
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d013      	beq.n	80011fc <HAL_FLASHEx_Erase+0x68>
    {
      if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 80011d4:	4b3b      	ldr	r3, [pc, #236]	@ (80012c4 <HAL_FLASHEx_Erase+0x130>)
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d009      	beq.n	80011f4 <HAL_FLASHEx_Erase+0x60>
      {
        /* Disable data cache  */
        __HAL_FLASH_DATA_CACHE_DISABLE();
 80011e0:	4b38      	ldr	r3, [pc, #224]	@ (80012c4 <HAL_FLASHEx_Erase+0x130>)
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	4a37      	ldr	r2, [pc, #220]	@ (80012c4 <HAL_FLASHEx_Erase+0x130>)
 80011e6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80011ea:	6013      	str	r3, [r2, #0]
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_DCACHE_ENABLED;
 80011ec:	4b34      	ldr	r3, [pc, #208]	@ (80012c0 <HAL_FLASHEx_Erase+0x12c>)
 80011ee:	2203      	movs	r2, #3
 80011f0:	771a      	strb	r2, [r3, #28]
 80011f2:	e016      	b.n	8001222 <HAL_FLASHEx_Erase+0x8e>
      }
      else
      {
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_ENABLED;
 80011f4:	4b32      	ldr	r3, [pc, #200]	@ (80012c0 <HAL_FLASHEx_Erase+0x12c>)
 80011f6:	2201      	movs	r2, #1
 80011f8:	771a      	strb	r2, [r3, #28]
 80011fa:	e012      	b.n	8001222 <HAL_FLASHEx_Erase+0x8e>
      }
    }
    else if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 80011fc:	4b31      	ldr	r3, [pc, #196]	@ (80012c4 <HAL_FLASHEx_Erase+0x130>)
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001204:	2b00      	cmp	r3, #0
 8001206:	d009      	beq.n	800121c <HAL_FLASHEx_Erase+0x88>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 8001208:	4b2e      	ldr	r3, [pc, #184]	@ (80012c4 <HAL_FLASHEx_Erase+0x130>)
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	4a2d      	ldr	r2, [pc, #180]	@ (80012c4 <HAL_FLASHEx_Erase+0x130>)
 800120e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8001212:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 8001214:	4b2a      	ldr	r3, [pc, #168]	@ (80012c0 <HAL_FLASHEx_Erase+0x12c>)
 8001216:	2202      	movs	r2, #2
 8001218:	771a      	strb	r2, [r3, #28]
 800121a:	e002      	b.n	8001222 <HAL_FLASHEx_Erase+0x8e>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 800121c:	4b28      	ldr	r3, [pc, #160]	@ (80012c0 <HAL_FLASHEx_Erase+0x12c>)
 800121e:	2200      	movs	r2, #0
 8001220:	771a      	strb	r2, [r3, #28]
    }

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	2b01      	cmp	r3, #1
 8001228:	d111      	bne.n	800124e <HAL_FLASHEx_Erase+0xba>
    {
      /* Mass erase to be done */
      FLASH_MassErase(pEraseInit->Banks);
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	685b      	ldr	r3, [r3, #4]
 800122e:	4618      	mov	r0, r3
 8001230:	f000 f84a 	bl	80012c8 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001234:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001238:	f7ff fefe 	bl	8001038 <FLASH_WaitForLastOperation>
 800123c:	4603      	mov	r3, r0
 800123e:	73fb      	strb	r3, [r7, #15]
#if defined (FLASH_OPTR_DBANK)
      /* If the erase operation is completed, disable the MER1 and MER2 Bits */
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
#else
      /* If the erase operation is completed, disable the MER1 Bit */
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1));
 8001240:	4b20      	ldr	r3, [pc, #128]	@ (80012c4 <HAL_FLASHEx_Erase+0x130>)
 8001242:	695b      	ldr	r3, [r3, #20]
 8001244:	4a1f      	ldr	r2, [pc, #124]	@ (80012c4 <HAL_FLASHEx_Erase+0x130>)
 8001246:	f023 0304 	bic.w	r3, r3, #4
 800124a:	6153      	str	r3, [r2, #20]
 800124c:	e02d      	b.n	80012aa <HAL_FLASHEx_Erase+0x116>
#endif
    }
    else
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 800124e:	683b      	ldr	r3, [r7, #0]
 8001250:	f04f 32ff 	mov.w	r2, #4294967295
 8001254:	601a      	str	r2, [r3, #0]

      for (page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	689b      	ldr	r3, [r3, #8]
 800125a:	60bb      	str	r3, [r7, #8]
 800125c:	e01d      	b.n	800129a <HAL_FLASHEx_Erase+0x106>
      {
        FLASH_PageErase(page_index, pEraseInit->Banks);
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	685b      	ldr	r3, [r3, #4]
 8001262:	4619      	mov	r1, r3
 8001264:	68b8      	ldr	r0, [r7, #8]
 8001266:	f000 f84d 	bl	8001304 <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800126a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800126e:	f7ff fee3 	bl	8001038 <FLASH_WaitForLastOperation>
 8001272:	4603      	mov	r3, r0
 8001274:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the PER Bit */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 8001276:	4b13      	ldr	r3, [pc, #76]	@ (80012c4 <HAL_FLASHEx_Erase+0x130>)
 8001278:	695b      	ldr	r3, [r3, #20]
 800127a:	4a12      	ldr	r2, [pc, #72]	@ (80012c4 <HAL_FLASHEx_Erase+0x130>)
 800127c:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8001280:	f023 0302 	bic.w	r3, r3, #2
 8001284:	6153      	str	r3, [r2, #20]

        if (status != HAL_OK)
 8001286:	7bfb      	ldrb	r3, [r7, #15]
 8001288:	2b00      	cmp	r3, #0
 800128a:	d003      	beq.n	8001294 <HAL_FLASHEx_Erase+0x100>
        {
          /* In case of error, stop erase procedure and return the faulty page */
          *PageError = page_index;
 800128c:	683b      	ldr	r3, [r7, #0]
 800128e:	68ba      	ldr	r2, [r7, #8]
 8001290:	601a      	str	r2, [r3, #0]
          break;
 8001292:	e00a      	b.n	80012aa <HAL_FLASHEx_Erase+0x116>
      for (page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 8001294:	68bb      	ldr	r3, [r7, #8]
 8001296:	3301      	adds	r3, #1
 8001298:	60bb      	str	r3, [r7, #8]
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	689a      	ldr	r2, [r3, #8]
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	68db      	ldr	r3, [r3, #12]
 80012a2:	4413      	add	r3, r2
 80012a4:	68ba      	ldr	r2, [r7, #8]
 80012a6:	429a      	cmp	r2, r3
 80012a8:	d3d9      	bcc.n	800125e <HAL_FLASHEx_Erase+0xca>
        }
      }
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 80012aa:	f000 f84f 	bl	800134c <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80012ae:	4b04      	ldr	r3, [pc, #16]	@ (80012c0 <HAL_FLASHEx_Erase+0x12c>)
 80012b0:	2200      	movs	r2, #0
 80012b2:	701a      	strb	r2, [r3, #0]

  return status;
 80012b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80012b6:	4618      	mov	r0, r3
 80012b8:	3710      	adds	r7, #16
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bd80      	pop	{r7, pc}
 80012be:	bf00      	nop
 80012c0:	2000000c 	.word	0x2000000c
 80012c4:	40022000 	.word	0x40022000

080012c8 <FLASH_MassErase>:
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased (*)
  * @note   (*) availability depends on devices
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 80012c8:	b480      	push	{r7}
 80012ca:	b083      	sub	sp, #12
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
  {
    /* Check the parameters */
    assert_param(IS_FLASH_BANK(Banks));

    /* Set the Mass Erase Bit for the bank 1 if requested */
    if ((Banks & FLASH_BANK_1) != 0U)
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	f003 0301 	and.w	r3, r3, #1
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d005      	beq.n	80012e6 <FLASH_MassErase+0x1e>
    {
      SET_BIT(FLASH->CR, FLASH_CR_MER1);
 80012da:	4b09      	ldr	r3, [pc, #36]	@ (8001300 <FLASH_MassErase+0x38>)
 80012dc:	695b      	ldr	r3, [r3, #20]
 80012de:	4a08      	ldr	r2, [pc, #32]	@ (8001300 <FLASH_MassErase+0x38>)
 80012e0:	f043 0304 	orr.w	r3, r3, #4
 80012e4:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
  }
#endif

  /* Proceed to erase all sectors */
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80012e6:	4b06      	ldr	r3, [pc, #24]	@ (8001300 <FLASH_MassErase+0x38>)
 80012e8:	695b      	ldr	r3, [r3, #20]
 80012ea:	4a05      	ldr	r2, [pc, #20]	@ (8001300 <FLASH_MassErase+0x38>)
 80012ec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80012f0:	6153      	str	r3, [r2, #20]
}
 80012f2:	bf00      	nop
 80012f4:	370c      	adds	r7, #12
 80012f6:	46bd      	mov	sp, r7
 80012f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fc:	4770      	bx	lr
 80012fe:	bf00      	nop
 8001300:	40022000 	.word	0x40022000

08001304 <FLASH_PageErase>:
  *            @arg FLASH_BANK_2: Page in bank 2 to be erased (*)
  * @note   (*) availability depends on devices
  * @retval None
  */
void FLASH_PageErase(uint32_t Page, uint32_t Banks)
{
 8001304:	b480      	push	{r7}
 8001306:	b083      	sub	sp, #12
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
 800130c:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_OPTR_DBANK */

  /* Proceed to erase the page */
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page & 0xFFU) << FLASH_CR_PNB_Pos));
 800130e:	4b0e      	ldr	r3, [pc, #56]	@ (8001348 <FLASH_PageErase+0x44>)
 8001310:	695b      	ldr	r3, [r3, #20]
 8001312:	f423 62ff 	bic.w	r2, r3, #2040	@ 0x7f8
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	00db      	lsls	r3, r3, #3
 800131a:	f403 63ff 	and.w	r3, r3, #2040	@ 0x7f8
 800131e:	490a      	ldr	r1, [pc, #40]	@ (8001348 <FLASH_PageErase+0x44>)
 8001320:	4313      	orrs	r3, r2
 8001322:	614b      	str	r3, [r1, #20]
  SET_BIT(FLASH->CR, FLASH_CR_PER);
 8001324:	4b08      	ldr	r3, [pc, #32]	@ (8001348 <FLASH_PageErase+0x44>)
 8001326:	695b      	ldr	r3, [r3, #20]
 8001328:	4a07      	ldr	r2, [pc, #28]	@ (8001348 <FLASH_PageErase+0x44>)
 800132a:	f043 0302 	orr.w	r3, r3, #2
 800132e:	6153      	str	r3, [r2, #20]
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8001330:	4b05      	ldr	r3, [pc, #20]	@ (8001348 <FLASH_PageErase+0x44>)
 8001332:	695b      	ldr	r3, [r3, #20]
 8001334:	4a04      	ldr	r2, [pc, #16]	@ (8001348 <FLASH_PageErase+0x44>)
 8001336:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800133a:	6153      	str	r3, [r2, #20]
}
 800133c:	bf00      	nop
 800133e:	370c      	adds	r7, #12
 8001340:	46bd      	mov	sp, r7
 8001342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001346:	4770      	bx	lr
 8001348:	40022000 	.word	0x40022000

0800134c <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 800134c:	b480      	push	{r7}
 800134e:	b083      	sub	sp, #12
 8001350:	af00      	add	r7, sp, #0
  FLASH_CacheTypeDef cache = pFlash.CacheToReactivate;
 8001352:	4b21      	ldr	r3, [pc, #132]	@ (80013d8 <FLASH_FlushCaches+0x8c>)
 8001354:	7f1b      	ldrb	r3, [r3, #28]
 8001356:	71fb      	strb	r3, [r7, #7]

  /* Flush instruction cache  */
  if ((cache == FLASH_CACHE_ICACHE_ENABLED) ||
 8001358:	79fb      	ldrb	r3, [r7, #7]
 800135a:	2b01      	cmp	r3, #1
 800135c:	d002      	beq.n	8001364 <FLASH_FlushCaches+0x18>
 800135e:	79fb      	ldrb	r3, [r7, #7]
 8001360:	2b03      	cmp	r3, #3
 8001362:	d117      	bne.n	8001394 <FLASH_FlushCaches+0x48>
      (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Disable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8001364:	4b1d      	ldr	r3, [pc, #116]	@ (80013dc <FLASH_FlushCaches+0x90>)
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	4a1c      	ldr	r2, [pc, #112]	@ (80013dc <FLASH_FlushCaches+0x90>)
 800136a:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800136e:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8001370:	4b1a      	ldr	r3, [pc, #104]	@ (80013dc <FLASH_FlushCaches+0x90>)
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	4a19      	ldr	r2, [pc, #100]	@ (80013dc <FLASH_FlushCaches+0x90>)
 8001376:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800137a:	6013      	str	r3, [r2, #0]
 800137c:	4b17      	ldr	r3, [pc, #92]	@ (80013dc <FLASH_FlushCaches+0x90>)
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	4a16      	ldr	r2, [pc, #88]	@ (80013dc <FLASH_FlushCaches+0x90>)
 8001382:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8001386:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001388:	4b14      	ldr	r3, [pc, #80]	@ (80013dc <FLASH_FlushCaches+0x90>)
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	4a13      	ldr	r2, [pc, #76]	@ (80013dc <FLASH_FlushCaches+0x90>)
 800138e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001392:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if ((cache == FLASH_CACHE_DCACHE_ENABLED) ||
 8001394:	79fb      	ldrb	r3, [r7, #7]
 8001396:	2b02      	cmp	r3, #2
 8001398:	d002      	beq.n	80013a0 <FLASH_FlushCaches+0x54>
 800139a:	79fb      	ldrb	r3, [r7, #7]
 800139c:	2b03      	cmp	r3, #3
 800139e:	d111      	bne.n	80013c4 <FLASH_FlushCaches+0x78>
      (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 80013a0:	4b0e      	ldr	r3, [pc, #56]	@ (80013dc <FLASH_FlushCaches+0x90>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	4a0d      	ldr	r2, [pc, #52]	@ (80013dc <FLASH_FlushCaches+0x90>)
 80013a6:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80013aa:	6013      	str	r3, [r2, #0]
 80013ac:	4b0b      	ldr	r3, [pc, #44]	@ (80013dc <FLASH_FlushCaches+0x90>)
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	4a0a      	ldr	r2, [pc, #40]	@ (80013dc <FLASH_FlushCaches+0x90>)
 80013b2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80013b6:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 80013b8:	4b08      	ldr	r3, [pc, #32]	@ (80013dc <FLASH_FlushCaches+0x90>)
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	4a07      	ldr	r2, [pc, #28]	@ (80013dc <FLASH_FlushCaches+0x90>)
 80013be:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80013c2:	6013      	str	r3, [r2, #0]
  }

  /* Reset internal variable */
  pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 80013c4:	4b04      	ldr	r3, [pc, #16]	@ (80013d8 <FLASH_FlushCaches+0x8c>)
 80013c6:	2200      	movs	r2, #0
 80013c8:	771a      	strb	r2, [r3, #28]
}
 80013ca:	bf00      	nop
 80013cc:	370c      	adds	r7, #12
 80013ce:	46bd      	mov	sp, r7
 80013d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d4:	4770      	bx	lr
 80013d6:	bf00      	nop
 80013d8:	2000000c 	.word	0x2000000c
 80013dc:	40022000 	.word	0x40022000

080013e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80013e0:	b480      	push	{r7}
 80013e2:	b087      	sub	sp, #28
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]
 80013e8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80013ea:	2300      	movs	r3, #0
 80013ec:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80013ee:	e15a      	b.n	80016a6 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80013f0:	683b      	ldr	r3, [r7, #0]
 80013f2:	681a      	ldr	r2, [r3, #0]
 80013f4:	2101      	movs	r1, #1
 80013f6:	697b      	ldr	r3, [r7, #20]
 80013f8:	fa01 f303 	lsl.w	r3, r1, r3
 80013fc:	4013      	ands	r3, r2
 80013fe:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	2b00      	cmp	r3, #0
 8001404:	f000 814c 	beq.w	80016a0 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001408:	683b      	ldr	r3, [r7, #0]
 800140a:	685b      	ldr	r3, [r3, #4]
 800140c:	f003 0303 	and.w	r3, r3, #3
 8001410:	2b01      	cmp	r3, #1
 8001412:	d005      	beq.n	8001420 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001414:	683b      	ldr	r3, [r7, #0]
 8001416:	685b      	ldr	r3, [r3, #4]
 8001418:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800141c:	2b02      	cmp	r3, #2
 800141e:	d130      	bne.n	8001482 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	689b      	ldr	r3, [r3, #8]
 8001424:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001426:	697b      	ldr	r3, [r7, #20]
 8001428:	005b      	lsls	r3, r3, #1
 800142a:	2203      	movs	r2, #3
 800142c:	fa02 f303 	lsl.w	r3, r2, r3
 8001430:	43db      	mvns	r3, r3
 8001432:	693a      	ldr	r2, [r7, #16]
 8001434:	4013      	ands	r3, r2
 8001436:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001438:	683b      	ldr	r3, [r7, #0]
 800143a:	68da      	ldr	r2, [r3, #12]
 800143c:	697b      	ldr	r3, [r7, #20]
 800143e:	005b      	lsls	r3, r3, #1
 8001440:	fa02 f303 	lsl.w	r3, r2, r3
 8001444:	693a      	ldr	r2, [r7, #16]
 8001446:	4313      	orrs	r3, r2
 8001448:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	693a      	ldr	r2, [r7, #16]
 800144e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	685b      	ldr	r3, [r3, #4]
 8001454:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001456:	2201      	movs	r2, #1
 8001458:	697b      	ldr	r3, [r7, #20]
 800145a:	fa02 f303 	lsl.w	r3, r2, r3
 800145e:	43db      	mvns	r3, r3
 8001460:	693a      	ldr	r2, [r7, #16]
 8001462:	4013      	ands	r3, r2
 8001464:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001466:	683b      	ldr	r3, [r7, #0]
 8001468:	685b      	ldr	r3, [r3, #4]
 800146a:	091b      	lsrs	r3, r3, #4
 800146c:	f003 0201 	and.w	r2, r3, #1
 8001470:	697b      	ldr	r3, [r7, #20]
 8001472:	fa02 f303 	lsl.w	r3, r2, r3
 8001476:	693a      	ldr	r2, [r7, #16]
 8001478:	4313      	orrs	r3, r2
 800147a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	693a      	ldr	r2, [r7, #16]
 8001480:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001482:	683b      	ldr	r3, [r7, #0]
 8001484:	685b      	ldr	r3, [r3, #4]
 8001486:	f003 0303 	and.w	r3, r3, #3
 800148a:	2b03      	cmp	r3, #3
 800148c:	d017      	beq.n	80014be <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	68db      	ldr	r3, [r3, #12]
 8001492:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001494:	697b      	ldr	r3, [r7, #20]
 8001496:	005b      	lsls	r3, r3, #1
 8001498:	2203      	movs	r2, #3
 800149a:	fa02 f303 	lsl.w	r3, r2, r3
 800149e:	43db      	mvns	r3, r3
 80014a0:	693a      	ldr	r2, [r7, #16]
 80014a2:	4013      	ands	r3, r2
 80014a4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80014a6:	683b      	ldr	r3, [r7, #0]
 80014a8:	689a      	ldr	r2, [r3, #8]
 80014aa:	697b      	ldr	r3, [r7, #20]
 80014ac:	005b      	lsls	r3, r3, #1
 80014ae:	fa02 f303 	lsl.w	r3, r2, r3
 80014b2:	693a      	ldr	r2, [r7, #16]
 80014b4:	4313      	orrs	r3, r2
 80014b6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	693a      	ldr	r2, [r7, #16]
 80014bc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80014be:	683b      	ldr	r3, [r7, #0]
 80014c0:	685b      	ldr	r3, [r3, #4]
 80014c2:	f003 0303 	and.w	r3, r3, #3
 80014c6:	2b02      	cmp	r3, #2
 80014c8:	d123      	bne.n	8001512 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80014ca:	697b      	ldr	r3, [r7, #20]
 80014cc:	08da      	lsrs	r2, r3, #3
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	3208      	adds	r2, #8
 80014d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80014d6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80014d8:	697b      	ldr	r3, [r7, #20]
 80014da:	f003 0307 	and.w	r3, r3, #7
 80014de:	009b      	lsls	r3, r3, #2
 80014e0:	220f      	movs	r2, #15
 80014e2:	fa02 f303 	lsl.w	r3, r2, r3
 80014e6:	43db      	mvns	r3, r3
 80014e8:	693a      	ldr	r2, [r7, #16]
 80014ea:	4013      	ands	r3, r2
 80014ec:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80014ee:	683b      	ldr	r3, [r7, #0]
 80014f0:	691a      	ldr	r2, [r3, #16]
 80014f2:	697b      	ldr	r3, [r7, #20]
 80014f4:	f003 0307 	and.w	r3, r3, #7
 80014f8:	009b      	lsls	r3, r3, #2
 80014fa:	fa02 f303 	lsl.w	r3, r2, r3
 80014fe:	693a      	ldr	r2, [r7, #16]
 8001500:	4313      	orrs	r3, r2
 8001502:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001504:	697b      	ldr	r3, [r7, #20]
 8001506:	08da      	lsrs	r2, r3, #3
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	3208      	adds	r2, #8
 800150c:	6939      	ldr	r1, [r7, #16]
 800150e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001518:	697b      	ldr	r3, [r7, #20]
 800151a:	005b      	lsls	r3, r3, #1
 800151c:	2203      	movs	r2, #3
 800151e:	fa02 f303 	lsl.w	r3, r2, r3
 8001522:	43db      	mvns	r3, r3
 8001524:	693a      	ldr	r2, [r7, #16]
 8001526:	4013      	ands	r3, r2
 8001528:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800152a:	683b      	ldr	r3, [r7, #0]
 800152c:	685b      	ldr	r3, [r3, #4]
 800152e:	f003 0203 	and.w	r2, r3, #3
 8001532:	697b      	ldr	r3, [r7, #20]
 8001534:	005b      	lsls	r3, r3, #1
 8001536:	fa02 f303 	lsl.w	r3, r2, r3
 800153a:	693a      	ldr	r2, [r7, #16]
 800153c:	4313      	orrs	r3, r2
 800153e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	693a      	ldr	r2, [r7, #16]
 8001544:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001546:	683b      	ldr	r3, [r7, #0]
 8001548:	685b      	ldr	r3, [r3, #4]
 800154a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800154e:	2b00      	cmp	r3, #0
 8001550:	f000 80a6 	beq.w	80016a0 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001554:	4b5b      	ldr	r3, [pc, #364]	@ (80016c4 <HAL_GPIO_Init+0x2e4>)
 8001556:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001558:	4a5a      	ldr	r2, [pc, #360]	@ (80016c4 <HAL_GPIO_Init+0x2e4>)
 800155a:	f043 0301 	orr.w	r3, r3, #1
 800155e:	6613      	str	r3, [r2, #96]	@ 0x60
 8001560:	4b58      	ldr	r3, [pc, #352]	@ (80016c4 <HAL_GPIO_Init+0x2e4>)
 8001562:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001564:	f003 0301 	and.w	r3, r3, #1
 8001568:	60bb      	str	r3, [r7, #8]
 800156a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 800156c:	4a56      	ldr	r2, [pc, #344]	@ (80016c8 <HAL_GPIO_Init+0x2e8>)
 800156e:	697b      	ldr	r3, [r7, #20]
 8001570:	089b      	lsrs	r3, r3, #2
 8001572:	3302      	adds	r3, #2
 8001574:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001578:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800157a:	697b      	ldr	r3, [r7, #20]
 800157c:	f003 0303 	and.w	r3, r3, #3
 8001580:	009b      	lsls	r3, r3, #2
 8001582:	220f      	movs	r2, #15
 8001584:	fa02 f303 	lsl.w	r3, r2, r3
 8001588:	43db      	mvns	r3, r3
 800158a:	693a      	ldr	r2, [r7, #16]
 800158c:	4013      	ands	r3, r2
 800158e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001596:	d01f      	beq.n	80015d8 <HAL_GPIO_Init+0x1f8>
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	4a4c      	ldr	r2, [pc, #304]	@ (80016cc <HAL_GPIO_Init+0x2ec>)
 800159c:	4293      	cmp	r3, r2
 800159e:	d019      	beq.n	80015d4 <HAL_GPIO_Init+0x1f4>
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	4a4b      	ldr	r2, [pc, #300]	@ (80016d0 <HAL_GPIO_Init+0x2f0>)
 80015a4:	4293      	cmp	r3, r2
 80015a6:	d013      	beq.n	80015d0 <HAL_GPIO_Init+0x1f0>
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	4a4a      	ldr	r2, [pc, #296]	@ (80016d4 <HAL_GPIO_Init+0x2f4>)
 80015ac:	4293      	cmp	r3, r2
 80015ae:	d00d      	beq.n	80015cc <HAL_GPIO_Init+0x1ec>
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	4a49      	ldr	r2, [pc, #292]	@ (80016d8 <HAL_GPIO_Init+0x2f8>)
 80015b4:	4293      	cmp	r3, r2
 80015b6:	d007      	beq.n	80015c8 <HAL_GPIO_Init+0x1e8>
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	4a48      	ldr	r2, [pc, #288]	@ (80016dc <HAL_GPIO_Init+0x2fc>)
 80015bc:	4293      	cmp	r3, r2
 80015be:	d101      	bne.n	80015c4 <HAL_GPIO_Init+0x1e4>
 80015c0:	2305      	movs	r3, #5
 80015c2:	e00a      	b.n	80015da <HAL_GPIO_Init+0x1fa>
 80015c4:	2306      	movs	r3, #6
 80015c6:	e008      	b.n	80015da <HAL_GPIO_Init+0x1fa>
 80015c8:	2304      	movs	r3, #4
 80015ca:	e006      	b.n	80015da <HAL_GPIO_Init+0x1fa>
 80015cc:	2303      	movs	r3, #3
 80015ce:	e004      	b.n	80015da <HAL_GPIO_Init+0x1fa>
 80015d0:	2302      	movs	r3, #2
 80015d2:	e002      	b.n	80015da <HAL_GPIO_Init+0x1fa>
 80015d4:	2301      	movs	r3, #1
 80015d6:	e000      	b.n	80015da <HAL_GPIO_Init+0x1fa>
 80015d8:	2300      	movs	r3, #0
 80015da:	697a      	ldr	r2, [r7, #20]
 80015dc:	f002 0203 	and.w	r2, r2, #3
 80015e0:	0092      	lsls	r2, r2, #2
 80015e2:	4093      	lsls	r3, r2
 80015e4:	693a      	ldr	r2, [r7, #16]
 80015e6:	4313      	orrs	r3, r2
 80015e8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80015ea:	4937      	ldr	r1, [pc, #220]	@ (80016c8 <HAL_GPIO_Init+0x2e8>)
 80015ec:	697b      	ldr	r3, [r7, #20]
 80015ee:	089b      	lsrs	r3, r3, #2
 80015f0:	3302      	adds	r3, #2
 80015f2:	693a      	ldr	r2, [r7, #16]
 80015f4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80015f8:	4b39      	ldr	r3, [pc, #228]	@ (80016e0 <HAL_GPIO_Init+0x300>)
 80015fa:	689b      	ldr	r3, [r3, #8]
 80015fc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	43db      	mvns	r3, r3
 8001602:	693a      	ldr	r2, [r7, #16]
 8001604:	4013      	ands	r3, r2
 8001606:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001608:	683b      	ldr	r3, [r7, #0]
 800160a:	685b      	ldr	r3, [r3, #4]
 800160c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001610:	2b00      	cmp	r3, #0
 8001612:	d003      	beq.n	800161c <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001614:	693a      	ldr	r2, [r7, #16]
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	4313      	orrs	r3, r2
 800161a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800161c:	4a30      	ldr	r2, [pc, #192]	@ (80016e0 <HAL_GPIO_Init+0x300>)
 800161e:	693b      	ldr	r3, [r7, #16]
 8001620:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001622:	4b2f      	ldr	r3, [pc, #188]	@ (80016e0 <HAL_GPIO_Init+0x300>)
 8001624:	68db      	ldr	r3, [r3, #12]
 8001626:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	43db      	mvns	r3, r3
 800162c:	693a      	ldr	r2, [r7, #16]
 800162e:	4013      	ands	r3, r2
 8001630:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001632:	683b      	ldr	r3, [r7, #0]
 8001634:	685b      	ldr	r3, [r3, #4]
 8001636:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800163a:	2b00      	cmp	r3, #0
 800163c:	d003      	beq.n	8001646 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800163e:	693a      	ldr	r2, [r7, #16]
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	4313      	orrs	r3, r2
 8001644:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001646:	4a26      	ldr	r2, [pc, #152]	@ (80016e0 <HAL_GPIO_Init+0x300>)
 8001648:	693b      	ldr	r3, [r7, #16]
 800164a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 800164c:	4b24      	ldr	r3, [pc, #144]	@ (80016e0 <HAL_GPIO_Init+0x300>)
 800164e:	685b      	ldr	r3, [r3, #4]
 8001650:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	43db      	mvns	r3, r3
 8001656:	693a      	ldr	r2, [r7, #16]
 8001658:	4013      	ands	r3, r2
 800165a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800165c:	683b      	ldr	r3, [r7, #0]
 800165e:	685b      	ldr	r3, [r3, #4]
 8001660:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001664:	2b00      	cmp	r3, #0
 8001666:	d003      	beq.n	8001670 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001668:	693a      	ldr	r2, [r7, #16]
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	4313      	orrs	r3, r2
 800166e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001670:	4a1b      	ldr	r2, [pc, #108]	@ (80016e0 <HAL_GPIO_Init+0x300>)
 8001672:	693b      	ldr	r3, [r7, #16]
 8001674:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001676:	4b1a      	ldr	r3, [pc, #104]	@ (80016e0 <HAL_GPIO_Init+0x300>)
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	43db      	mvns	r3, r3
 8001680:	693a      	ldr	r2, [r7, #16]
 8001682:	4013      	ands	r3, r2
 8001684:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001686:	683b      	ldr	r3, [r7, #0]
 8001688:	685b      	ldr	r3, [r3, #4]
 800168a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800168e:	2b00      	cmp	r3, #0
 8001690:	d003      	beq.n	800169a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001692:	693a      	ldr	r2, [r7, #16]
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	4313      	orrs	r3, r2
 8001698:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800169a:	4a11      	ldr	r2, [pc, #68]	@ (80016e0 <HAL_GPIO_Init+0x300>)
 800169c:	693b      	ldr	r3, [r7, #16]
 800169e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80016a0:	697b      	ldr	r3, [r7, #20]
 80016a2:	3301      	adds	r3, #1
 80016a4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80016a6:	683b      	ldr	r3, [r7, #0]
 80016a8:	681a      	ldr	r2, [r3, #0]
 80016aa:	697b      	ldr	r3, [r7, #20]
 80016ac:	fa22 f303 	lsr.w	r3, r2, r3
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	f47f ae9d 	bne.w	80013f0 <HAL_GPIO_Init+0x10>
  }
}
 80016b6:	bf00      	nop
 80016b8:	bf00      	nop
 80016ba:	371c      	adds	r7, #28
 80016bc:	46bd      	mov	sp, r7
 80016be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c2:	4770      	bx	lr
 80016c4:	40021000 	.word	0x40021000
 80016c8:	40010000 	.word	0x40010000
 80016cc:	48000400 	.word	0x48000400
 80016d0:	48000800 	.word	0x48000800
 80016d4:	48000c00 	.word	0x48000c00
 80016d8:	48001000 	.word	0x48001000
 80016dc:	48001400 	.word	0x48001400
 80016e0:	40010400 	.word	0x40010400

080016e4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80016e4:	b480      	push	{r7}
 80016e6:	b085      	sub	sp, #20
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d141      	bne.n	8001776 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80016f2:	4b4b      	ldr	r3, [pc, #300]	@ (8001820 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80016fa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80016fe:	d131      	bne.n	8001764 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001700:	4b47      	ldr	r3, [pc, #284]	@ (8001820 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001702:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001706:	4a46      	ldr	r2, [pc, #280]	@ (8001820 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001708:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800170c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001710:	4b43      	ldr	r3, [pc, #268]	@ (8001820 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001718:	4a41      	ldr	r2, [pc, #260]	@ (8001820 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800171a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800171e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001720:	4b40      	ldr	r3, [pc, #256]	@ (8001824 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	2232      	movs	r2, #50	@ 0x32
 8001726:	fb02 f303 	mul.w	r3, r2, r3
 800172a:	4a3f      	ldr	r2, [pc, #252]	@ (8001828 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800172c:	fba2 2303 	umull	r2, r3, r2, r3
 8001730:	0c9b      	lsrs	r3, r3, #18
 8001732:	3301      	adds	r3, #1
 8001734:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001736:	e002      	b.n	800173e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	3b01      	subs	r3, #1
 800173c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800173e:	4b38      	ldr	r3, [pc, #224]	@ (8001820 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001740:	695b      	ldr	r3, [r3, #20]
 8001742:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001746:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800174a:	d102      	bne.n	8001752 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	2b00      	cmp	r3, #0
 8001750:	d1f2      	bne.n	8001738 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001752:	4b33      	ldr	r3, [pc, #204]	@ (8001820 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001754:	695b      	ldr	r3, [r3, #20]
 8001756:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800175a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800175e:	d158      	bne.n	8001812 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001760:	2303      	movs	r3, #3
 8001762:	e057      	b.n	8001814 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001764:	4b2e      	ldr	r3, [pc, #184]	@ (8001820 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001766:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800176a:	4a2d      	ldr	r2, [pc, #180]	@ (8001820 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800176c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001770:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8001774:	e04d      	b.n	8001812 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800177c:	d141      	bne.n	8001802 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800177e:	4b28      	ldr	r3, [pc, #160]	@ (8001820 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001786:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800178a:	d131      	bne.n	80017f0 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800178c:	4b24      	ldr	r3, [pc, #144]	@ (8001820 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800178e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001792:	4a23      	ldr	r2, [pc, #140]	@ (8001820 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001794:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001798:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800179c:	4b20      	ldr	r3, [pc, #128]	@ (8001820 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80017a4:	4a1e      	ldr	r2, [pc, #120]	@ (8001820 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80017a6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80017aa:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80017ac:	4b1d      	ldr	r3, [pc, #116]	@ (8001824 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	2232      	movs	r2, #50	@ 0x32
 80017b2:	fb02 f303 	mul.w	r3, r2, r3
 80017b6:	4a1c      	ldr	r2, [pc, #112]	@ (8001828 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80017b8:	fba2 2303 	umull	r2, r3, r2, r3
 80017bc:	0c9b      	lsrs	r3, r3, #18
 80017be:	3301      	adds	r3, #1
 80017c0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80017c2:	e002      	b.n	80017ca <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	3b01      	subs	r3, #1
 80017c8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80017ca:	4b15      	ldr	r3, [pc, #84]	@ (8001820 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80017cc:	695b      	ldr	r3, [r3, #20]
 80017ce:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80017d2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80017d6:	d102      	bne.n	80017de <HAL_PWREx_ControlVoltageScaling+0xfa>
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d1f2      	bne.n	80017c4 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80017de:	4b10      	ldr	r3, [pc, #64]	@ (8001820 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80017e0:	695b      	ldr	r3, [r3, #20]
 80017e2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80017e6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80017ea:	d112      	bne.n	8001812 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80017ec:	2303      	movs	r3, #3
 80017ee:	e011      	b.n	8001814 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80017f0:	4b0b      	ldr	r3, [pc, #44]	@ (8001820 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80017f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80017f6:	4a0a      	ldr	r2, [pc, #40]	@ (8001820 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80017f8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80017fc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8001800:	e007      	b.n	8001812 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001802:	4b07      	ldr	r3, [pc, #28]	@ (8001820 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800180a:	4a05      	ldr	r2, [pc, #20]	@ (8001820 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800180c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001810:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8001812:	2300      	movs	r3, #0
}
 8001814:	4618      	mov	r0, r3
 8001816:	3714      	adds	r7, #20
 8001818:	46bd      	mov	sp, r7
 800181a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181e:	4770      	bx	lr
 8001820:	40007000 	.word	0x40007000
 8001824:	20000000 	.word	0x20000000
 8001828:	431bde83 	.word	0x431bde83

0800182c <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 800182c:	b480      	push	{r7}
 800182e:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8001830:	4b05      	ldr	r3, [pc, #20]	@ (8001848 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001832:	689b      	ldr	r3, [r3, #8]
 8001834:	4a04      	ldr	r2, [pc, #16]	@ (8001848 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001836:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800183a:	6093      	str	r3, [r2, #8]
}
 800183c:	bf00      	nop
 800183e:	46bd      	mov	sp, r7
 8001840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001844:	4770      	bx	lr
 8001846:	bf00      	nop
 8001848:	40007000 	.word	0x40007000

0800184c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	b088      	sub	sp, #32
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	2b00      	cmp	r3, #0
 8001858:	d101      	bne.n	800185e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800185a:	2301      	movs	r3, #1
 800185c:	e2fe      	b.n	8001e5c <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	f003 0301 	and.w	r3, r3, #1
 8001866:	2b00      	cmp	r3, #0
 8001868:	d075      	beq.n	8001956 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800186a:	4b97      	ldr	r3, [pc, #604]	@ (8001ac8 <HAL_RCC_OscConfig+0x27c>)
 800186c:	689b      	ldr	r3, [r3, #8]
 800186e:	f003 030c 	and.w	r3, r3, #12
 8001872:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001874:	4b94      	ldr	r3, [pc, #592]	@ (8001ac8 <HAL_RCC_OscConfig+0x27c>)
 8001876:	68db      	ldr	r3, [r3, #12]
 8001878:	f003 0303 	and.w	r3, r3, #3
 800187c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800187e:	69bb      	ldr	r3, [r7, #24]
 8001880:	2b0c      	cmp	r3, #12
 8001882:	d102      	bne.n	800188a <HAL_RCC_OscConfig+0x3e>
 8001884:	697b      	ldr	r3, [r7, #20]
 8001886:	2b03      	cmp	r3, #3
 8001888:	d002      	beq.n	8001890 <HAL_RCC_OscConfig+0x44>
 800188a:	69bb      	ldr	r3, [r7, #24]
 800188c:	2b08      	cmp	r3, #8
 800188e:	d10b      	bne.n	80018a8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001890:	4b8d      	ldr	r3, [pc, #564]	@ (8001ac8 <HAL_RCC_OscConfig+0x27c>)
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001898:	2b00      	cmp	r3, #0
 800189a:	d05b      	beq.n	8001954 <HAL_RCC_OscConfig+0x108>
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	685b      	ldr	r3, [r3, #4]
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d157      	bne.n	8001954 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80018a4:	2301      	movs	r3, #1
 80018a6:	e2d9      	b.n	8001e5c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	685b      	ldr	r3, [r3, #4]
 80018ac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80018b0:	d106      	bne.n	80018c0 <HAL_RCC_OscConfig+0x74>
 80018b2:	4b85      	ldr	r3, [pc, #532]	@ (8001ac8 <HAL_RCC_OscConfig+0x27c>)
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	4a84      	ldr	r2, [pc, #528]	@ (8001ac8 <HAL_RCC_OscConfig+0x27c>)
 80018b8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80018bc:	6013      	str	r3, [r2, #0]
 80018be:	e01d      	b.n	80018fc <HAL_RCC_OscConfig+0xb0>
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	685b      	ldr	r3, [r3, #4]
 80018c4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80018c8:	d10c      	bne.n	80018e4 <HAL_RCC_OscConfig+0x98>
 80018ca:	4b7f      	ldr	r3, [pc, #508]	@ (8001ac8 <HAL_RCC_OscConfig+0x27c>)
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	4a7e      	ldr	r2, [pc, #504]	@ (8001ac8 <HAL_RCC_OscConfig+0x27c>)
 80018d0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80018d4:	6013      	str	r3, [r2, #0]
 80018d6:	4b7c      	ldr	r3, [pc, #496]	@ (8001ac8 <HAL_RCC_OscConfig+0x27c>)
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	4a7b      	ldr	r2, [pc, #492]	@ (8001ac8 <HAL_RCC_OscConfig+0x27c>)
 80018dc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80018e0:	6013      	str	r3, [r2, #0]
 80018e2:	e00b      	b.n	80018fc <HAL_RCC_OscConfig+0xb0>
 80018e4:	4b78      	ldr	r3, [pc, #480]	@ (8001ac8 <HAL_RCC_OscConfig+0x27c>)
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	4a77      	ldr	r2, [pc, #476]	@ (8001ac8 <HAL_RCC_OscConfig+0x27c>)
 80018ea:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80018ee:	6013      	str	r3, [r2, #0]
 80018f0:	4b75      	ldr	r3, [pc, #468]	@ (8001ac8 <HAL_RCC_OscConfig+0x27c>)
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	4a74      	ldr	r2, [pc, #464]	@ (8001ac8 <HAL_RCC_OscConfig+0x27c>)
 80018f6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80018fa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	685b      	ldr	r3, [r3, #4]
 8001900:	2b00      	cmp	r3, #0
 8001902:	d013      	beq.n	800192c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001904:	f7ff f92e 	bl	8000b64 <HAL_GetTick>
 8001908:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800190a:	e008      	b.n	800191e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800190c:	f7ff f92a 	bl	8000b64 <HAL_GetTick>
 8001910:	4602      	mov	r2, r0
 8001912:	693b      	ldr	r3, [r7, #16]
 8001914:	1ad3      	subs	r3, r2, r3
 8001916:	2b64      	cmp	r3, #100	@ 0x64
 8001918:	d901      	bls.n	800191e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800191a:	2303      	movs	r3, #3
 800191c:	e29e      	b.n	8001e5c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800191e:	4b6a      	ldr	r3, [pc, #424]	@ (8001ac8 <HAL_RCC_OscConfig+0x27c>)
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001926:	2b00      	cmp	r3, #0
 8001928:	d0f0      	beq.n	800190c <HAL_RCC_OscConfig+0xc0>
 800192a:	e014      	b.n	8001956 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800192c:	f7ff f91a 	bl	8000b64 <HAL_GetTick>
 8001930:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001932:	e008      	b.n	8001946 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001934:	f7ff f916 	bl	8000b64 <HAL_GetTick>
 8001938:	4602      	mov	r2, r0
 800193a:	693b      	ldr	r3, [r7, #16]
 800193c:	1ad3      	subs	r3, r2, r3
 800193e:	2b64      	cmp	r3, #100	@ 0x64
 8001940:	d901      	bls.n	8001946 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001942:	2303      	movs	r3, #3
 8001944:	e28a      	b.n	8001e5c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001946:	4b60      	ldr	r3, [pc, #384]	@ (8001ac8 <HAL_RCC_OscConfig+0x27c>)
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800194e:	2b00      	cmp	r3, #0
 8001950:	d1f0      	bne.n	8001934 <HAL_RCC_OscConfig+0xe8>
 8001952:	e000      	b.n	8001956 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001954:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	f003 0302 	and.w	r3, r3, #2
 800195e:	2b00      	cmp	r3, #0
 8001960:	d075      	beq.n	8001a4e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001962:	4b59      	ldr	r3, [pc, #356]	@ (8001ac8 <HAL_RCC_OscConfig+0x27c>)
 8001964:	689b      	ldr	r3, [r3, #8]
 8001966:	f003 030c 	and.w	r3, r3, #12
 800196a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800196c:	4b56      	ldr	r3, [pc, #344]	@ (8001ac8 <HAL_RCC_OscConfig+0x27c>)
 800196e:	68db      	ldr	r3, [r3, #12]
 8001970:	f003 0303 	and.w	r3, r3, #3
 8001974:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8001976:	69bb      	ldr	r3, [r7, #24]
 8001978:	2b0c      	cmp	r3, #12
 800197a:	d102      	bne.n	8001982 <HAL_RCC_OscConfig+0x136>
 800197c:	697b      	ldr	r3, [r7, #20]
 800197e:	2b02      	cmp	r3, #2
 8001980:	d002      	beq.n	8001988 <HAL_RCC_OscConfig+0x13c>
 8001982:	69bb      	ldr	r3, [r7, #24]
 8001984:	2b04      	cmp	r3, #4
 8001986:	d11f      	bne.n	80019c8 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001988:	4b4f      	ldr	r3, [pc, #316]	@ (8001ac8 <HAL_RCC_OscConfig+0x27c>)
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001990:	2b00      	cmp	r3, #0
 8001992:	d005      	beq.n	80019a0 <HAL_RCC_OscConfig+0x154>
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	68db      	ldr	r3, [r3, #12]
 8001998:	2b00      	cmp	r3, #0
 800199a:	d101      	bne.n	80019a0 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 800199c:	2301      	movs	r3, #1
 800199e:	e25d      	b.n	8001e5c <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019a0:	4b49      	ldr	r3, [pc, #292]	@ (8001ac8 <HAL_RCC_OscConfig+0x27c>)
 80019a2:	685b      	ldr	r3, [r3, #4]
 80019a4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	691b      	ldr	r3, [r3, #16]
 80019ac:	061b      	lsls	r3, r3, #24
 80019ae:	4946      	ldr	r1, [pc, #280]	@ (8001ac8 <HAL_RCC_OscConfig+0x27c>)
 80019b0:	4313      	orrs	r3, r2
 80019b2:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80019b4:	4b45      	ldr	r3, [pc, #276]	@ (8001acc <HAL_RCC_OscConfig+0x280>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	4618      	mov	r0, r3
 80019ba:	f7ff f887 	bl	8000acc <HAL_InitTick>
 80019be:	4603      	mov	r3, r0
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d043      	beq.n	8001a4c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80019c4:	2301      	movs	r3, #1
 80019c6:	e249      	b.n	8001e5c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	68db      	ldr	r3, [r3, #12]
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d023      	beq.n	8001a18 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80019d0:	4b3d      	ldr	r3, [pc, #244]	@ (8001ac8 <HAL_RCC_OscConfig+0x27c>)
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	4a3c      	ldr	r2, [pc, #240]	@ (8001ac8 <HAL_RCC_OscConfig+0x27c>)
 80019d6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80019da:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019dc:	f7ff f8c2 	bl	8000b64 <HAL_GetTick>
 80019e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80019e2:	e008      	b.n	80019f6 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80019e4:	f7ff f8be 	bl	8000b64 <HAL_GetTick>
 80019e8:	4602      	mov	r2, r0
 80019ea:	693b      	ldr	r3, [r7, #16]
 80019ec:	1ad3      	subs	r3, r2, r3
 80019ee:	2b02      	cmp	r3, #2
 80019f0:	d901      	bls.n	80019f6 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80019f2:	2303      	movs	r3, #3
 80019f4:	e232      	b.n	8001e5c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80019f6:	4b34      	ldr	r3, [pc, #208]	@ (8001ac8 <HAL_RCC_OscConfig+0x27c>)
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d0f0      	beq.n	80019e4 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a02:	4b31      	ldr	r3, [pc, #196]	@ (8001ac8 <HAL_RCC_OscConfig+0x27c>)
 8001a04:	685b      	ldr	r3, [r3, #4]
 8001a06:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	691b      	ldr	r3, [r3, #16]
 8001a0e:	061b      	lsls	r3, r3, #24
 8001a10:	492d      	ldr	r1, [pc, #180]	@ (8001ac8 <HAL_RCC_OscConfig+0x27c>)
 8001a12:	4313      	orrs	r3, r2
 8001a14:	604b      	str	r3, [r1, #4]
 8001a16:	e01a      	b.n	8001a4e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a18:	4b2b      	ldr	r3, [pc, #172]	@ (8001ac8 <HAL_RCC_OscConfig+0x27c>)
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	4a2a      	ldr	r2, [pc, #168]	@ (8001ac8 <HAL_RCC_OscConfig+0x27c>)
 8001a1e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001a22:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a24:	f7ff f89e 	bl	8000b64 <HAL_GetTick>
 8001a28:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001a2a:	e008      	b.n	8001a3e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a2c:	f7ff f89a 	bl	8000b64 <HAL_GetTick>
 8001a30:	4602      	mov	r2, r0
 8001a32:	693b      	ldr	r3, [r7, #16]
 8001a34:	1ad3      	subs	r3, r2, r3
 8001a36:	2b02      	cmp	r3, #2
 8001a38:	d901      	bls.n	8001a3e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8001a3a:	2303      	movs	r3, #3
 8001a3c:	e20e      	b.n	8001e5c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001a3e:	4b22      	ldr	r3, [pc, #136]	@ (8001ac8 <HAL_RCC_OscConfig+0x27c>)
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d1f0      	bne.n	8001a2c <HAL_RCC_OscConfig+0x1e0>
 8001a4a:	e000      	b.n	8001a4e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001a4c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f003 0308 	and.w	r3, r3, #8
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d041      	beq.n	8001ade <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	695b      	ldr	r3, [r3, #20]
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d01c      	beq.n	8001a9c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a62:	4b19      	ldr	r3, [pc, #100]	@ (8001ac8 <HAL_RCC_OscConfig+0x27c>)
 8001a64:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001a68:	4a17      	ldr	r2, [pc, #92]	@ (8001ac8 <HAL_RCC_OscConfig+0x27c>)
 8001a6a:	f043 0301 	orr.w	r3, r3, #1
 8001a6e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a72:	f7ff f877 	bl	8000b64 <HAL_GetTick>
 8001a76:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001a78:	e008      	b.n	8001a8c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a7a:	f7ff f873 	bl	8000b64 <HAL_GetTick>
 8001a7e:	4602      	mov	r2, r0
 8001a80:	693b      	ldr	r3, [r7, #16]
 8001a82:	1ad3      	subs	r3, r2, r3
 8001a84:	2b02      	cmp	r3, #2
 8001a86:	d901      	bls.n	8001a8c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001a88:	2303      	movs	r3, #3
 8001a8a:	e1e7      	b.n	8001e5c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001a8c:	4b0e      	ldr	r3, [pc, #56]	@ (8001ac8 <HAL_RCC_OscConfig+0x27c>)
 8001a8e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001a92:	f003 0302 	and.w	r3, r3, #2
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d0ef      	beq.n	8001a7a <HAL_RCC_OscConfig+0x22e>
 8001a9a:	e020      	b.n	8001ade <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a9c:	4b0a      	ldr	r3, [pc, #40]	@ (8001ac8 <HAL_RCC_OscConfig+0x27c>)
 8001a9e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001aa2:	4a09      	ldr	r2, [pc, #36]	@ (8001ac8 <HAL_RCC_OscConfig+0x27c>)
 8001aa4:	f023 0301 	bic.w	r3, r3, #1
 8001aa8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001aac:	f7ff f85a 	bl	8000b64 <HAL_GetTick>
 8001ab0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001ab2:	e00d      	b.n	8001ad0 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ab4:	f7ff f856 	bl	8000b64 <HAL_GetTick>
 8001ab8:	4602      	mov	r2, r0
 8001aba:	693b      	ldr	r3, [r7, #16]
 8001abc:	1ad3      	subs	r3, r2, r3
 8001abe:	2b02      	cmp	r3, #2
 8001ac0:	d906      	bls.n	8001ad0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001ac2:	2303      	movs	r3, #3
 8001ac4:	e1ca      	b.n	8001e5c <HAL_RCC_OscConfig+0x610>
 8001ac6:	bf00      	nop
 8001ac8:	40021000 	.word	0x40021000
 8001acc:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001ad0:	4b8c      	ldr	r3, [pc, #560]	@ (8001d04 <HAL_RCC_OscConfig+0x4b8>)
 8001ad2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001ad6:	f003 0302 	and.w	r3, r3, #2
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d1ea      	bne.n	8001ab4 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f003 0304 	and.w	r3, r3, #4
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	f000 80a6 	beq.w	8001c38 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001aec:	2300      	movs	r3, #0
 8001aee:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001af0:	4b84      	ldr	r3, [pc, #528]	@ (8001d04 <HAL_RCC_OscConfig+0x4b8>)
 8001af2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001af4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d101      	bne.n	8001b00 <HAL_RCC_OscConfig+0x2b4>
 8001afc:	2301      	movs	r3, #1
 8001afe:	e000      	b.n	8001b02 <HAL_RCC_OscConfig+0x2b6>
 8001b00:	2300      	movs	r3, #0
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d00d      	beq.n	8001b22 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b06:	4b7f      	ldr	r3, [pc, #508]	@ (8001d04 <HAL_RCC_OscConfig+0x4b8>)
 8001b08:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b0a:	4a7e      	ldr	r2, [pc, #504]	@ (8001d04 <HAL_RCC_OscConfig+0x4b8>)
 8001b0c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001b10:	6593      	str	r3, [r2, #88]	@ 0x58
 8001b12:	4b7c      	ldr	r3, [pc, #496]	@ (8001d04 <HAL_RCC_OscConfig+0x4b8>)
 8001b14:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b16:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b1a:	60fb      	str	r3, [r7, #12]
 8001b1c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001b1e:	2301      	movs	r3, #1
 8001b20:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001b22:	4b79      	ldr	r3, [pc, #484]	@ (8001d08 <HAL_RCC_OscConfig+0x4bc>)
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d118      	bne.n	8001b60 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001b2e:	4b76      	ldr	r3, [pc, #472]	@ (8001d08 <HAL_RCC_OscConfig+0x4bc>)
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	4a75      	ldr	r2, [pc, #468]	@ (8001d08 <HAL_RCC_OscConfig+0x4bc>)
 8001b34:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001b38:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b3a:	f7ff f813 	bl	8000b64 <HAL_GetTick>
 8001b3e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001b40:	e008      	b.n	8001b54 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b42:	f7ff f80f 	bl	8000b64 <HAL_GetTick>
 8001b46:	4602      	mov	r2, r0
 8001b48:	693b      	ldr	r3, [r7, #16]
 8001b4a:	1ad3      	subs	r3, r2, r3
 8001b4c:	2b02      	cmp	r3, #2
 8001b4e:	d901      	bls.n	8001b54 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8001b50:	2303      	movs	r3, #3
 8001b52:	e183      	b.n	8001e5c <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001b54:	4b6c      	ldr	r3, [pc, #432]	@ (8001d08 <HAL_RCC_OscConfig+0x4bc>)
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d0f0      	beq.n	8001b42 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	689b      	ldr	r3, [r3, #8]
 8001b64:	2b01      	cmp	r3, #1
 8001b66:	d108      	bne.n	8001b7a <HAL_RCC_OscConfig+0x32e>
 8001b68:	4b66      	ldr	r3, [pc, #408]	@ (8001d04 <HAL_RCC_OscConfig+0x4b8>)
 8001b6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001b6e:	4a65      	ldr	r2, [pc, #404]	@ (8001d04 <HAL_RCC_OscConfig+0x4b8>)
 8001b70:	f043 0301 	orr.w	r3, r3, #1
 8001b74:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001b78:	e024      	b.n	8001bc4 <HAL_RCC_OscConfig+0x378>
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	689b      	ldr	r3, [r3, #8]
 8001b7e:	2b05      	cmp	r3, #5
 8001b80:	d110      	bne.n	8001ba4 <HAL_RCC_OscConfig+0x358>
 8001b82:	4b60      	ldr	r3, [pc, #384]	@ (8001d04 <HAL_RCC_OscConfig+0x4b8>)
 8001b84:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001b88:	4a5e      	ldr	r2, [pc, #376]	@ (8001d04 <HAL_RCC_OscConfig+0x4b8>)
 8001b8a:	f043 0304 	orr.w	r3, r3, #4
 8001b8e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001b92:	4b5c      	ldr	r3, [pc, #368]	@ (8001d04 <HAL_RCC_OscConfig+0x4b8>)
 8001b94:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001b98:	4a5a      	ldr	r2, [pc, #360]	@ (8001d04 <HAL_RCC_OscConfig+0x4b8>)
 8001b9a:	f043 0301 	orr.w	r3, r3, #1
 8001b9e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001ba2:	e00f      	b.n	8001bc4 <HAL_RCC_OscConfig+0x378>
 8001ba4:	4b57      	ldr	r3, [pc, #348]	@ (8001d04 <HAL_RCC_OscConfig+0x4b8>)
 8001ba6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001baa:	4a56      	ldr	r2, [pc, #344]	@ (8001d04 <HAL_RCC_OscConfig+0x4b8>)
 8001bac:	f023 0301 	bic.w	r3, r3, #1
 8001bb0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001bb4:	4b53      	ldr	r3, [pc, #332]	@ (8001d04 <HAL_RCC_OscConfig+0x4b8>)
 8001bb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001bba:	4a52      	ldr	r2, [pc, #328]	@ (8001d04 <HAL_RCC_OscConfig+0x4b8>)
 8001bbc:	f023 0304 	bic.w	r3, r3, #4
 8001bc0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	689b      	ldr	r3, [r3, #8]
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d016      	beq.n	8001bfa <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bcc:	f7fe ffca 	bl	8000b64 <HAL_GetTick>
 8001bd0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001bd2:	e00a      	b.n	8001bea <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001bd4:	f7fe ffc6 	bl	8000b64 <HAL_GetTick>
 8001bd8:	4602      	mov	r2, r0
 8001bda:	693b      	ldr	r3, [r7, #16]
 8001bdc:	1ad3      	subs	r3, r2, r3
 8001bde:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001be2:	4293      	cmp	r3, r2
 8001be4:	d901      	bls.n	8001bea <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8001be6:	2303      	movs	r3, #3
 8001be8:	e138      	b.n	8001e5c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001bea:	4b46      	ldr	r3, [pc, #280]	@ (8001d04 <HAL_RCC_OscConfig+0x4b8>)
 8001bec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001bf0:	f003 0302 	and.w	r3, r3, #2
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d0ed      	beq.n	8001bd4 <HAL_RCC_OscConfig+0x388>
 8001bf8:	e015      	b.n	8001c26 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bfa:	f7fe ffb3 	bl	8000b64 <HAL_GetTick>
 8001bfe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001c00:	e00a      	b.n	8001c18 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c02:	f7fe ffaf 	bl	8000b64 <HAL_GetTick>
 8001c06:	4602      	mov	r2, r0
 8001c08:	693b      	ldr	r3, [r7, #16]
 8001c0a:	1ad3      	subs	r3, r2, r3
 8001c0c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001c10:	4293      	cmp	r3, r2
 8001c12:	d901      	bls.n	8001c18 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8001c14:	2303      	movs	r3, #3
 8001c16:	e121      	b.n	8001e5c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001c18:	4b3a      	ldr	r3, [pc, #232]	@ (8001d04 <HAL_RCC_OscConfig+0x4b8>)
 8001c1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001c1e:	f003 0302 	and.w	r3, r3, #2
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d1ed      	bne.n	8001c02 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001c26:	7ffb      	ldrb	r3, [r7, #31]
 8001c28:	2b01      	cmp	r3, #1
 8001c2a:	d105      	bne.n	8001c38 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c2c:	4b35      	ldr	r3, [pc, #212]	@ (8001d04 <HAL_RCC_OscConfig+0x4b8>)
 8001c2e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c30:	4a34      	ldr	r2, [pc, #208]	@ (8001d04 <HAL_RCC_OscConfig+0x4b8>)
 8001c32:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001c36:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	f003 0320 	and.w	r3, r3, #32
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d03c      	beq.n	8001cbe <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	699b      	ldr	r3, [r3, #24]
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d01c      	beq.n	8001c86 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001c4c:	4b2d      	ldr	r3, [pc, #180]	@ (8001d04 <HAL_RCC_OscConfig+0x4b8>)
 8001c4e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001c52:	4a2c      	ldr	r2, [pc, #176]	@ (8001d04 <HAL_RCC_OscConfig+0x4b8>)
 8001c54:	f043 0301 	orr.w	r3, r3, #1
 8001c58:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c5c:	f7fe ff82 	bl	8000b64 <HAL_GetTick>
 8001c60:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001c62:	e008      	b.n	8001c76 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001c64:	f7fe ff7e 	bl	8000b64 <HAL_GetTick>
 8001c68:	4602      	mov	r2, r0
 8001c6a:	693b      	ldr	r3, [r7, #16]
 8001c6c:	1ad3      	subs	r3, r2, r3
 8001c6e:	2b02      	cmp	r3, #2
 8001c70:	d901      	bls.n	8001c76 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8001c72:	2303      	movs	r3, #3
 8001c74:	e0f2      	b.n	8001e5c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001c76:	4b23      	ldr	r3, [pc, #140]	@ (8001d04 <HAL_RCC_OscConfig+0x4b8>)
 8001c78:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001c7c:	f003 0302 	and.w	r3, r3, #2
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d0ef      	beq.n	8001c64 <HAL_RCC_OscConfig+0x418>
 8001c84:	e01b      	b.n	8001cbe <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001c86:	4b1f      	ldr	r3, [pc, #124]	@ (8001d04 <HAL_RCC_OscConfig+0x4b8>)
 8001c88:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001c8c:	4a1d      	ldr	r2, [pc, #116]	@ (8001d04 <HAL_RCC_OscConfig+0x4b8>)
 8001c8e:	f023 0301 	bic.w	r3, r3, #1
 8001c92:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c96:	f7fe ff65 	bl	8000b64 <HAL_GetTick>
 8001c9a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001c9c:	e008      	b.n	8001cb0 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001c9e:	f7fe ff61 	bl	8000b64 <HAL_GetTick>
 8001ca2:	4602      	mov	r2, r0
 8001ca4:	693b      	ldr	r3, [r7, #16]
 8001ca6:	1ad3      	subs	r3, r2, r3
 8001ca8:	2b02      	cmp	r3, #2
 8001caa:	d901      	bls.n	8001cb0 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8001cac:	2303      	movs	r3, #3
 8001cae:	e0d5      	b.n	8001e5c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001cb0:	4b14      	ldr	r3, [pc, #80]	@ (8001d04 <HAL_RCC_OscConfig+0x4b8>)
 8001cb2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001cb6:	f003 0302 	and.w	r3, r3, #2
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d1ef      	bne.n	8001c9e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	69db      	ldr	r3, [r3, #28]
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	f000 80c9 	beq.w	8001e5a <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001cc8:	4b0e      	ldr	r3, [pc, #56]	@ (8001d04 <HAL_RCC_OscConfig+0x4b8>)
 8001cca:	689b      	ldr	r3, [r3, #8]
 8001ccc:	f003 030c 	and.w	r3, r3, #12
 8001cd0:	2b0c      	cmp	r3, #12
 8001cd2:	f000 8083 	beq.w	8001ddc <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	69db      	ldr	r3, [r3, #28]
 8001cda:	2b02      	cmp	r3, #2
 8001cdc:	d15e      	bne.n	8001d9c <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001cde:	4b09      	ldr	r3, [pc, #36]	@ (8001d04 <HAL_RCC_OscConfig+0x4b8>)
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	4a08      	ldr	r2, [pc, #32]	@ (8001d04 <HAL_RCC_OscConfig+0x4b8>)
 8001ce4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001ce8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cea:	f7fe ff3b 	bl	8000b64 <HAL_GetTick>
 8001cee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001cf0:	e00c      	b.n	8001d0c <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cf2:	f7fe ff37 	bl	8000b64 <HAL_GetTick>
 8001cf6:	4602      	mov	r2, r0
 8001cf8:	693b      	ldr	r3, [r7, #16]
 8001cfa:	1ad3      	subs	r3, r2, r3
 8001cfc:	2b02      	cmp	r3, #2
 8001cfe:	d905      	bls.n	8001d0c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8001d00:	2303      	movs	r3, #3
 8001d02:	e0ab      	b.n	8001e5c <HAL_RCC_OscConfig+0x610>
 8001d04:	40021000 	.word	0x40021000
 8001d08:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d0c:	4b55      	ldr	r3, [pc, #340]	@ (8001e64 <HAL_RCC_OscConfig+0x618>)
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d1ec      	bne.n	8001cf2 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001d18:	4b52      	ldr	r3, [pc, #328]	@ (8001e64 <HAL_RCC_OscConfig+0x618>)
 8001d1a:	68da      	ldr	r2, [r3, #12]
 8001d1c:	4b52      	ldr	r3, [pc, #328]	@ (8001e68 <HAL_RCC_OscConfig+0x61c>)
 8001d1e:	4013      	ands	r3, r2
 8001d20:	687a      	ldr	r2, [r7, #4]
 8001d22:	6a11      	ldr	r1, [r2, #32]
 8001d24:	687a      	ldr	r2, [r7, #4]
 8001d26:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001d28:	3a01      	subs	r2, #1
 8001d2a:	0112      	lsls	r2, r2, #4
 8001d2c:	4311      	orrs	r1, r2
 8001d2e:	687a      	ldr	r2, [r7, #4]
 8001d30:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8001d32:	0212      	lsls	r2, r2, #8
 8001d34:	4311      	orrs	r1, r2
 8001d36:	687a      	ldr	r2, [r7, #4]
 8001d38:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8001d3a:	0852      	lsrs	r2, r2, #1
 8001d3c:	3a01      	subs	r2, #1
 8001d3e:	0552      	lsls	r2, r2, #21
 8001d40:	4311      	orrs	r1, r2
 8001d42:	687a      	ldr	r2, [r7, #4]
 8001d44:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001d46:	0852      	lsrs	r2, r2, #1
 8001d48:	3a01      	subs	r2, #1
 8001d4a:	0652      	lsls	r2, r2, #25
 8001d4c:	4311      	orrs	r1, r2
 8001d4e:	687a      	ldr	r2, [r7, #4]
 8001d50:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8001d52:	06d2      	lsls	r2, r2, #27
 8001d54:	430a      	orrs	r2, r1
 8001d56:	4943      	ldr	r1, [pc, #268]	@ (8001e64 <HAL_RCC_OscConfig+0x618>)
 8001d58:	4313      	orrs	r3, r2
 8001d5a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001d5c:	4b41      	ldr	r3, [pc, #260]	@ (8001e64 <HAL_RCC_OscConfig+0x618>)
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	4a40      	ldr	r2, [pc, #256]	@ (8001e64 <HAL_RCC_OscConfig+0x618>)
 8001d62:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001d66:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001d68:	4b3e      	ldr	r3, [pc, #248]	@ (8001e64 <HAL_RCC_OscConfig+0x618>)
 8001d6a:	68db      	ldr	r3, [r3, #12]
 8001d6c:	4a3d      	ldr	r2, [pc, #244]	@ (8001e64 <HAL_RCC_OscConfig+0x618>)
 8001d6e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001d72:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d74:	f7fe fef6 	bl	8000b64 <HAL_GetTick>
 8001d78:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d7a:	e008      	b.n	8001d8e <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d7c:	f7fe fef2 	bl	8000b64 <HAL_GetTick>
 8001d80:	4602      	mov	r2, r0
 8001d82:	693b      	ldr	r3, [r7, #16]
 8001d84:	1ad3      	subs	r3, r2, r3
 8001d86:	2b02      	cmp	r3, #2
 8001d88:	d901      	bls.n	8001d8e <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8001d8a:	2303      	movs	r3, #3
 8001d8c:	e066      	b.n	8001e5c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d8e:	4b35      	ldr	r3, [pc, #212]	@ (8001e64 <HAL_RCC_OscConfig+0x618>)
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d0f0      	beq.n	8001d7c <HAL_RCC_OscConfig+0x530>
 8001d9a:	e05e      	b.n	8001e5a <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d9c:	4b31      	ldr	r3, [pc, #196]	@ (8001e64 <HAL_RCC_OscConfig+0x618>)
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	4a30      	ldr	r2, [pc, #192]	@ (8001e64 <HAL_RCC_OscConfig+0x618>)
 8001da2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001da6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001da8:	f7fe fedc 	bl	8000b64 <HAL_GetTick>
 8001dac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001dae:	e008      	b.n	8001dc2 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001db0:	f7fe fed8 	bl	8000b64 <HAL_GetTick>
 8001db4:	4602      	mov	r2, r0
 8001db6:	693b      	ldr	r3, [r7, #16]
 8001db8:	1ad3      	subs	r3, r2, r3
 8001dba:	2b02      	cmp	r3, #2
 8001dbc:	d901      	bls.n	8001dc2 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8001dbe:	2303      	movs	r3, #3
 8001dc0:	e04c      	b.n	8001e5c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001dc2:	4b28      	ldr	r3, [pc, #160]	@ (8001e64 <HAL_RCC_OscConfig+0x618>)
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d1f0      	bne.n	8001db0 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8001dce:	4b25      	ldr	r3, [pc, #148]	@ (8001e64 <HAL_RCC_OscConfig+0x618>)
 8001dd0:	68da      	ldr	r2, [r3, #12]
 8001dd2:	4924      	ldr	r1, [pc, #144]	@ (8001e64 <HAL_RCC_OscConfig+0x618>)
 8001dd4:	4b25      	ldr	r3, [pc, #148]	@ (8001e6c <HAL_RCC_OscConfig+0x620>)
 8001dd6:	4013      	ands	r3, r2
 8001dd8:	60cb      	str	r3, [r1, #12]
 8001dda:	e03e      	b.n	8001e5a <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	69db      	ldr	r3, [r3, #28]
 8001de0:	2b01      	cmp	r3, #1
 8001de2:	d101      	bne.n	8001de8 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8001de4:	2301      	movs	r3, #1
 8001de6:	e039      	b.n	8001e5c <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8001de8:	4b1e      	ldr	r3, [pc, #120]	@ (8001e64 <HAL_RCC_OscConfig+0x618>)
 8001dea:	68db      	ldr	r3, [r3, #12]
 8001dec:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001dee:	697b      	ldr	r3, [r7, #20]
 8001df0:	f003 0203 	and.w	r2, r3, #3
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	6a1b      	ldr	r3, [r3, #32]
 8001df8:	429a      	cmp	r2, r3
 8001dfa:	d12c      	bne.n	8001e56 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001dfc:	697b      	ldr	r3, [r7, #20]
 8001dfe:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e06:	3b01      	subs	r3, #1
 8001e08:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e0a:	429a      	cmp	r2, r3
 8001e0c:	d123      	bne.n	8001e56 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001e0e:	697b      	ldr	r3, [r7, #20]
 8001e10:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e18:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001e1a:	429a      	cmp	r2, r3
 8001e1c:	d11b      	bne.n	8001e56 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001e1e:	697b      	ldr	r3, [r7, #20]
 8001e20:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e28:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001e2a:	429a      	cmp	r2, r3
 8001e2c:	d113      	bne.n	8001e56 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001e2e:	697b      	ldr	r3, [r7, #20]
 8001e30:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e38:	085b      	lsrs	r3, r3, #1
 8001e3a:	3b01      	subs	r3, #1
 8001e3c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001e3e:	429a      	cmp	r2, r3
 8001e40:	d109      	bne.n	8001e56 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001e42:	697b      	ldr	r3, [r7, #20]
 8001e44:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001e4c:	085b      	lsrs	r3, r3, #1
 8001e4e:	3b01      	subs	r3, #1
 8001e50:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001e52:	429a      	cmp	r2, r3
 8001e54:	d001      	beq.n	8001e5a <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8001e56:	2301      	movs	r3, #1
 8001e58:	e000      	b.n	8001e5c <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8001e5a:	2300      	movs	r3, #0
}
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	3720      	adds	r7, #32
 8001e60:	46bd      	mov	sp, r7
 8001e62:	bd80      	pop	{r7, pc}
 8001e64:	40021000 	.word	0x40021000
 8001e68:	019f800c 	.word	0x019f800c
 8001e6c:	feeefffc 	.word	0xfeeefffc

08001e70 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b086      	sub	sp, #24
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
 8001e78:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d101      	bne.n	8001e88 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001e84:	2301      	movs	r3, #1
 8001e86:	e11e      	b.n	80020c6 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001e88:	4b91      	ldr	r3, [pc, #580]	@ (80020d0 <HAL_RCC_ClockConfig+0x260>)
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	f003 030f 	and.w	r3, r3, #15
 8001e90:	683a      	ldr	r2, [r7, #0]
 8001e92:	429a      	cmp	r2, r3
 8001e94:	d910      	bls.n	8001eb8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e96:	4b8e      	ldr	r3, [pc, #568]	@ (80020d0 <HAL_RCC_ClockConfig+0x260>)
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f023 020f 	bic.w	r2, r3, #15
 8001e9e:	498c      	ldr	r1, [pc, #560]	@ (80020d0 <HAL_RCC_ClockConfig+0x260>)
 8001ea0:	683b      	ldr	r3, [r7, #0]
 8001ea2:	4313      	orrs	r3, r2
 8001ea4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ea6:	4b8a      	ldr	r3, [pc, #552]	@ (80020d0 <HAL_RCC_ClockConfig+0x260>)
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f003 030f 	and.w	r3, r3, #15
 8001eae:	683a      	ldr	r2, [r7, #0]
 8001eb0:	429a      	cmp	r2, r3
 8001eb2:	d001      	beq.n	8001eb8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001eb4:	2301      	movs	r3, #1
 8001eb6:	e106      	b.n	80020c6 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f003 0301 	and.w	r3, r3, #1
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d073      	beq.n	8001fac <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	685b      	ldr	r3, [r3, #4]
 8001ec8:	2b03      	cmp	r3, #3
 8001eca:	d129      	bne.n	8001f20 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ecc:	4b81      	ldr	r3, [pc, #516]	@ (80020d4 <HAL_RCC_ClockConfig+0x264>)
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d101      	bne.n	8001edc <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8001ed8:	2301      	movs	r3, #1
 8001eda:	e0f4      	b.n	80020c6 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8001edc:	f000 f99e 	bl	800221c <RCC_GetSysClockFreqFromPLLSource>
 8001ee0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8001ee2:	693b      	ldr	r3, [r7, #16]
 8001ee4:	4a7c      	ldr	r2, [pc, #496]	@ (80020d8 <HAL_RCC_ClockConfig+0x268>)
 8001ee6:	4293      	cmp	r3, r2
 8001ee8:	d93f      	bls.n	8001f6a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001eea:	4b7a      	ldr	r3, [pc, #488]	@ (80020d4 <HAL_RCC_ClockConfig+0x264>)
 8001eec:	689b      	ldr	r3, [r3, #8]
 8001eee:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d009      	beq.n	8001f0a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d033      	beq.n	8001f6a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d12f      	bne.n	8001f6a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001f0a:	4b72      	ldr	r3, [pc, #456]	@ (80020d4 <HAL_RCC_ClockConfig+0x264>)
 8001f0c:	689b      	ldr	r3, [r3, #8]
 8001f0e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001f12:	4a70      	ldr	r2, [pc, #448]	@ (80020d4 <HAL_RCC_ClockConfig+0x264>)
 8001f14:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001f18:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8001f1a:	2380      	movs	r3, #128	@ 0x80
 8001f1c:	617b      	str	r3, [r7, #20]
 8001f1e:	e024      	b.n	8001f6a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	685b      	ldr	r3, [r3, #4]
 8001f24:	2b02      	cmp	r3, #2
 8001f26:	d107      	bne.n	8001f38 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001f28:	4b6a      	ldr	r3, [pc, #424]	@ (80020d4 <HAL_RCC_ClockConfig+0x264>)
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d109      	bne.n	8001f48 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001f34:	2301      	movs	r3, #1
 8001f36:	e0c6      	b.n	80020c6 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001f38:	4b66      	ldr	r3, [pc, #408]	@ (80020d4 <HAL_RCC_ClockConfig+0x264>)
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d101      	bne.n	8001f48 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001f44:	2301      	movs	r3, #1
 8001f46:	e0be      	b.n	80020c6 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8001f48:	f000 f8ce 	bl	80020e8 <HAL_RCC_GetSysClockFreq>
 8001f4c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8001f4e:	693b      	ldr	r3, [r7, #16]
 8001f50:	4a61      	ldr	r2, [pc, #388]	@ (80020d8 <HAL_RCC_ClockConfig+0x268>)
 8001f52:	4293      	cmp	r3, r2
 8001f54:	d909      	bls.n	8001f6a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001f56:	4b5f      	ldr	r3, [pc, #380]	@ (80020d4 <HAL_RCC_ClockConfig+0x264>)
 8001f58:	689b      	ldr	r3, [r3, #8]
 8001f5a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001f5e:	4a5d      	ldr	r2, [pc, #372]	@ (80020d4 <HAL_RCC_ClockConfig+0x264>)
 8001f60:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001f64:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8001f66:	2380      	movs	r3, #128	@ 0x80
 8001f68:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001f6a:	4b5a      	ldr	r3, [pc, #360]	@ (80020d4 <HAL_RCC_ClockConfig+0x264>)
 8001f6c:	689b      	ldr	r3, [r3, #8]
 8001f6e:	f023 0203 	bic.w	r2, r3, #3
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	685b      	ldr	r3, [r3, #4]
 8001f76:	4957      	ldr	r1, [pc, #348]	@ (80020d4 <HAL_RCC_ClockConfig+0x264>)
 8001f78:	4313      	orrs	r3, r2
 8001f7a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001f7c:	f7fe fdf2 	bl	8000b64 <HAL_GetTick>
 8001f80:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f82:	e00a      	b.n	8001f9a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f84:	f7fe fdee 	bl	8000b64 <HAL_GetTick>
 8001f88:	4602      	mov	r2, r0
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	1ad3      	subs	r3, r2, r3
 8001f8e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f92:	4293      	cmp	r3, r2
 8001f94:	d901      	bls.n	8001f9a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8001f96:	2303      	movs	r3, #3
 8001f98:	e095      	b.n	80020c6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f9a:	4b4e      	ldr	r3, [pc, #312]	@ (80020d4 <HAL_RCC_ClockConfig+0x264>)
 8001f9c:	689b      	ldr	r3, [r3, #8]
 8001f9e:	f003 020c 	and.w	r2, r3, #12
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	685b      	ldr	r3, [r3, #4]
 8001fa6:	009b      	lsls	r3, r3, #2
 8001fa8:	429a      	cmp	r2, r3
 8001faa:	d1eb      	bne.n	8001f84 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f003 0302 	and.w	r3, r3, #2
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d023      	beq.n	8002000 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f003 0304 	and.w	r3, r3, #4
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d005      	beq.n	8001fd0 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001fc4:	4b43      	ldr	r3, [pc, #268]	@ (80020d4 <HAL_RCC_ClockConfig+0x264>)
 8001fc6:	689b      	ldr	r3, [r3, #8]
 8001fc8:	4a42      	ldr	r2, [pc, #264]	@ (80020d4 <HAL_RCC_ClockConfig+0x264>)
 8001fca:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001fce:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f003 0308 	and.w	r3, r3, #8
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d007      	beq.n	8001fec <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8001fdc:	4b3d      	ldr	r3, [pc, #244]	@ (80020d4 <HAL_RCC_ClockConfig+0x264>)
 8001fde:	689b      	ldr	r3, [r3, #8]
 8001fe0:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8001fe4:	4a3b      	ldr	r2, [pc, #236]	@ (80020d4 <HAL_RCC_ClockConfig+0x264>)
 8001fe6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001fea:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001fec:	4b39      	ldr	r3, [pc, #228]	@ (80020d4 <HAL_RCC_ClockConfig+0x264>)
 8001fee:	689b      	ldr	r3, [r3, #8]
 8001ff0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	689b      	ldr	r3, [r3, #8]
 8001ff8:	4936      	ldr	r1, [pc, #216]	@ (80020d4 <HAL_RCC_ClockConfig+0x264>)
 8001ffa:	4313      	orrs	r3, r2
 8001ffc:	608b      	str	r3, [r1, #8]
 8001ffe:	e008      	b.n	8002012 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8002000:	697b      	ldr	r3, [r7, #20]
 8002002:	2b80      	cmp	r3, #128	@ 0x80
 8002004:	d105      	bne.n	8002012 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002006:	4b33      	ldr	r3, [pc, #204]	@ (80020d4 <HAL_RCC_ClockConfig+0x264>)
 8002008:	689b      	ldr	r3, [r3, #8]
 800200a:	4a32      	ldr	r2, [pc, #200]	@ (80020d4 <HAL_RCC_ClockConfig+0x264>)
 800200c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002010:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002012:	4b2f      	ldr	r3, [pc, #188]	@ (80020d0 <HAL_RCC_ClockConfig+0x260>)
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f003 030f 	and.w	r3, r3, #15
 800201a:	683a      	ldr	r2, [r7, #0]
 800201c:	429a      	cmp	r2, r3
 800201e:	d21d      	bcs.n	800205c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002020:	4b2b      	ldr	r3, [pc, #172]	@ (80020d0 <HAL_RCC_ClockConfig+0x260>)
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f023 020f 	bic.w	r2, r3, #15
 8002028:	4929      	ldr	r1, [pc, #164]	@ (80020d0 <HAL_RCC_ClockConfig+0x260>)
 800202a:	683b      	ldr	r3, [r7, #0]
 800202c:	4313      	orrs	r3, r2
 800202e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002030:	f7fe fd98 	bl	8000b64 <HAL_GetTick>
 8002034:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002036:	e00a      	b.n	800204e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002038:	f7fe fd94 	bl	8000b64 <HAL_GetTick>
 800203c:	4602      	mov	r2, r0
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	1ad3      	subs	r3, r2, r3
 8002042:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002046:	4293      	cmp	r3, r2
 8002048:	d901      	bls.n	800204e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800204a:	2303      	movs	r3, #3
 800204c:	e03b      	b.n	80020c6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800204e:	4b20      	ldr	r3, [pc, #128]	@ (80020d0 <HAL_RCC_ClockConfig+0x260>)
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f003 030f 	and.w	r3, r3, #15
 8002056:	683a      	ldr	r2, [r7, #0]
 8002058:	429a      	cmp	r2, r3
 800205a:	d1ed      	bne.n	8002038 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f003 0304 	and.w	r3, r3, #4
 8002064:	2b00      	cmp	r3, #0
 8002066:	d008      	beq.n	800207a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002068:	4b1a      	ldr	r3, [pc, #104]	@ (80020d4 <HAL_RCC_ClockConfig+0x264>)
 800206a:	689b      	ldr	r3, [r3, #8]
 800206c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	68db      	ldr	r3, [r3, #12]
 8002074:	4917      	ldr	r1, [pc, #92]	@ (80020d4 <HAL_RCC_ClockConfig+0x264>)
 8002076:	4313      	orrs	r3, r2
 8002078:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f003 0308 	and.w	r3, r3, #8
 8002082:	2b00      	cmp	r3, #0
 8002084:	d009      	beq.n	800209a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002086:	4b13      	ldr	r3, [pc, #76]	@ (80020d4 <HAL_RCC_ClockConfig+0x264>)
 8002088:	689b      	ldr	r3, [r3, #8]
 800208a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	691b      	ldr	r3, [r3, #16]
 8002092:	00db      	lsls	r3, r3, #3
 8002094:	490f      	ldr	r1, [pc, #60]	@ (80020d4 <HAL_RCC_ClockConfig+0x264>)
 8002096:	4313      	orrs	r3, r2
 8002098:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800209a:	f000 f825 	bl	80020e8 <HAL_RCC_GetSysClockFreq>
 800209e:	4602      	mov	r2, r0
 80020a0:	4b0c      	ldr	r3, [pc, #48]	@ (80020d4 <HAL_RCC_ClockConfig+0x264>)
 80020a2:	689b      	ldr	r3, [r3, #8]
 80020a4:	091b      	lsrs	r3, r3, #4
 80020a6:	f003 030f 	and.w	r3, r3, #15
 80020aa:	490c      	ldr	r1, [pc, #48]	@ (80020dc <HAL_RCC_ClockConfig+0x26c>)
 80020ac:	5ccb      	ldrb	r3, [r1, r3]
 80020ae:	f003 031f 	and.w	r3, r3, #31
 80020b2:	fa22 f303 	lsr.w	r3, r2, r3
 80020b6:	4a0a      	ldr	r2, [pc, #40]	@ (80020e0 <HAL_RCC_ClockConfig+0x270>)
 80020b8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80020ba:	4b0a      	ldr	r3, [pc, #40]	@ (80020e4 <HAL_RCC_ClockConfig+0x274>)
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	4618      	mov	r0, r3
 80020c0:	f7fe fd04 	bl	8000acc <HAL_InitTick>
 80020c4:	4603      	mov	r3, r0
}
 80020c6:	4618      	mov	r0, r3
 80020c8:	3718      	adds	r7, #24
 80020ca:	46bd      	mov	sp, r7
 80020cc:	bd80      	pop	{r7, pc}
 80020ce:	bf00      	nop
 80020d0:	40022000 	.word	0x40022000
 80020d4:	40021000 	.word	0x40021000
 80020d8:	04c4b400 	.word	0x04c4b400
 80020dc:	08006580 	.word	0x08006580
 80020e0:	20000000 	.word	0x20000000
 80020e4:	20000004 	.word	0x20000004

080020e8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80020e8:	b480      	push	{r7}
 80020ea:	b087      	sub	sp, #28
 80020ec:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80020ee:	4b2c      	ldr	r3, [pc, #176]	@ (80021a0 <HAL_RCC_GetSysClockFreq+0xb8>)
 80020f0:	689b      	ldr	r3, [r3, #8]
 80020f2:	f003 030c 	and.w	r3, r3, #12
 80020f6:	2b04      	cmp	r3, #4
 80020f8:	d102      	bne.n	8002100 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80020fa:	4b2a      	ldr	r3, [pc, #168]	@ (80021a4 <HAL_RCC_GetSysClockFreq+0xbc>)
 80020fc:	613b      	str	r3, [r7, #16]
 80020fe:	e047      	b.n	8002190 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002100:	4b27      	ldr	r3, [pc, #156]	@ (80021a0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002102:	689b      	ldr	r3, [r3, #8]
 8002104:	f003 030c 	and.w	r3, r3, #12
 8002108:	2b08      	cmp	r3, #8
 800210a:	d102      	bne.n	8002112 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800210c:	4b26      	ldr	r3, [pc, #152]	@ (80021a8 <HAL_RCC_GetSysClockFreq+0xc0>)
 800210e:	613b      	str	r3, [r7, #16]
 8002110:	e03e      	b.n	8002190 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8002112:	4b23      	ldr	r3, [pc, #140]	@ (80021a0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002114:	689b      	ldr	r3, [r3, #8]
 8002116:	f003 030c 	and.w	r3, r3, #12
 800211a:	2b0c      	cmp	r3, #12
 800211c:	d136      	bne.n	800218c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800211e:	4b20      	ldr	r3, [pc, #128]	@ (80021a0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002120:	68db      	ldr	r3, [r3, #12]
 8002122:	f003 0303 	and.w	r3, r3, #3
 8002126:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002128:	4b1d      	ldr	r3, [pc, #116]	@ (80021a0 <HAL_RCC_GetSysClockFreq+0xb8>)
 800212a:	68db      	ldr	r3, [r3, #12]
 800212c:	091b      	lsrs	r3, r3, #4
 800212e:	f003 030f 	and.w	r3, r3, #15
 8002132:	3301      	adds	r3, #1
 8002134:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	2b03      	cmp	r3, #3
 800213a:	d10c      	bne.n	8002156 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800213c:	4a1a      	ldr	r2, [pc, #104]	@ (80021a8 <HAL_RCC_GetSysClockFreq+0xc0>)
 800213e:	68bb      	ldr	r3, [r7, #8]
 8002140:	fbb2 f3f3 	udiv	r3, r2, r3
 8002144:	4a16      	ldr	r2, [pc, #88]	@ (80021a0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002146:	68d2      	ldr	r2, [r2, #12]
 8002148:	0a12      	lsrs	r2, r2, #8
 800214a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800214e:	fb02 f303 	mul.w	r3, r2, r3
 8002152:	617b      	str	r3, [r7, #20]
      break;
 8002154:	e00c      	b.n	8002170 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002156:	4a13      	ldr	r2, [pc, #76]	@ (80021a4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002158:	68bb      	ldr	r3, [r7, #8]
 800215a:	fbb2 f3f3 	udiv	r3, r2, r3
 800215e:	4a10      	ldr	r2, [pc, #64]	@ (80021a0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002160:	68d2      	ldr	r2, [r2, #12]
 8002162:	0a12      	lsrs	r2, r2, #8
 8002164:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002168:	fb02 f303 	mul.w	r3, r2, r3
 800216c:	617b      	str	r3, [r7, #20]
      break;
 800216e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002170:	4b0b      	ldr	r3, [pc, #44]	@ (80021a0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002172:	68db      	ldr	r3, [r3, #12]
 8002174:	0e5b      	lsrs	r3, r3, #25
 8002176:	f003 0303 	and.w	r3, r3, #3
 800217a:	3301      	adds	r3, #1
 800217c:	005b      	lsls	r3, r3, #1
 800217e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8002180:	697a      	ldr	r2, [r7, #20]
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	fbb2 f3f3 	udiv	r3, r2, r3
 8002188:	613b      	str	r3, [r7, #16]
 800218a:	e001      	b.n	8002190 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 800218c:	2300      	movs	r3, #0
 800218e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002190:	693b      	ldr	r3, [r7, #16]
}
 8002192:	4618      	mov	r0, r3
 8002194:	371c      	adds	r7, #28
 8002196:	46bd      	mov	sp, r7
 8002198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219c:	4770      	bx	lr
 800219e:	bf00      	nop
 80021a0:	40021000 	.word	0x40021000
 80021a4:	00f42400 	.word	0x00f42400
 80021a8:	007a1200 	.word	0x007a1200

080021ac <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80021ac:	b480      	push	{r7}
 80021ae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80021b0:	4b03      	ldr	r3, [pc, #12]	@ (80021c0 <HAL_RCC_GetHCLKFreq+0x14>)
 80021b2:	681b      	ldr	r3, [r3, #0]
}
 80021b4:	4618      	mov	r0, r3
 80021b6:	46bd      	mov	sp, r7
 80021b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021bc:	4770      	bx	lr
 80021be:	bf00      	nop
 80021c0:	20000000 	.word	0x20000000

080021c4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80021c8:	f7ff fff0 	bl	80021ac <HAL_RCC_GetHCLKFreq>
 80021cc:	4602      	mov	r2, r0
 80021ce:	4b06      	ldr	r3, [pc, #24]	@ (80021e8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80021d0:	689b      	ldr	r3, [r3, #8]
 80021d2:	0a1b      	lsrs	r3, r3, #8
 80021d4:	f003 0307 	and.w	r3, r3, #7
 80021d8:	4904      	ldr	r1, [pc, #16]	@ (80021ec <HAL_RCC_GetPCLK1Freq+0x28>)
 80021da:	5ccb      	ldrb	r3, [r1, r3]
 80021dc:	f003 031f 	and.w	r3, r3, #31
 80021e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80021e4:	4618      	mov	r0, r3
 80021e6:	bd80      	pop	{r7, pc}
 80021e8:	40021000 	.word	0x40021000
 80021ec:	08006590 	.word	0x08006590

080021f0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80021f4:	f7ff ffda 	bl	80021ac <HAL_RCC_GetHCLKFreq>
 80021f8:	4602      	mov	r2, r0
 80021fa:	4b06      	ldr	r3, [pc, #24]	@ (8002214 <HAL_RCC_GetPCLK2Freq+0x24>)
 80021fc:	689b      	ldr	r3, [r3, #8]
 80021fe:	0adb      	lsrs	r3, r3, #11
 8002200:	f003 0307 	and.w	r3, r3, #7
 8002204:	4904      	ldr	r1, [pc, #16]	@ (8002218 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002206:	5ccb      	ldrb	r3, [r1, r3]
 8002208:	f003 031f 	and.w	r3, r3, #31
 800220c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002210:	4618      	mov	r0, r3
 8002212:	bd80      	pop	{r7, pc}
 8002214:	40021000 	.word	0x40021000
 8002218:	08006590 	.word	0x08006590

0800221c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800221c:	b480      	push	{r7}
 800221e:	b087      	sub	sp, #28
 8002220:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002222:	4b1e      	ldr	r3, [pc, #120]	@ (800229c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002224:	68db      	ldr	r3, [r3, #12]
 8002226:	f003 0303 	and.w	r3, r3, #3
 800222a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800222c:	4b1b      	ldr	r3, [pc, #108]	@ (800229c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800222e:	68db      	ldr	r3, [r3, #12]
 8002230:	091b      	lsrs	r3, r3, #4
 8002232:	f003 030f 	and.w	r3, r3, #15
 8002236:	3301      	adds	r3, #1
 8002238:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800223a:	693b      	ldr	r3, [r7, #16]
 800223c:	2b03      	cmp	r3, #3
 800223e:	d10c      	bne.n	800225a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002240:	4a17      	ldr	r2, [pc, #92]	@ (80022a0 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	fbb2 f3f3 	udiv	r3, r2, r3
 8002248:	4a14      	ldr	r2, [pc, #80]	@ (800229c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800224a:	68d2      	ldr	r2, [r2, #12]
 800224c:	0a12      	lsrs	r2, r2, #8
 800224e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002252:	fb02 f303 	mul.w	r3, r2, r3
 8002256:	617b      	str	r3, [r7, #20]
    break;
 8002258:	e00c      	b.n	8002274 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800225a:	4a12      	ldr	r2, [pc, #72]	@ (80022a4 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002262:	4a0e      	ldr	r2, [pc, #56]	@ (800229c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002264:	68d2      	ldr	r2, [r2, #12]
 8002266:	0a12      	lsrs	r2, r2, #8
 8002268:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800226c:	fb02 f303 	mul.w	r3, r2, r3
 8002270:	617b      	str	r3, [r7, #20]
    break;
 8002272:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002274:	4b09      	ldr	r3, [pc, #36]	@ (800229c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002276:	68db      	ldr	r3, [r3, #12]
 8002278:	0e5b      	lsrs	r3, r3, #25
 800227a:	f003 0303 	and.w	r3, r3, #3
 800227e:	3301      	adds	r3, #1
 8002280:	005b      	lsls	r3, r3, #1
 8002282:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8002284:	697a      	ldr	r2, [r7, #20]
 8002286:	68bb      	ldr	r3, [r7, #8]
 8002288:	fbb2 f3f3 	udiv	r3, r2, r3
 800228c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800228e:	687b      	ldr	r3, [r7, #4]
}
 8002290:	4618      	mov	r0, r3
 8002292:	371c      	adds	r7, #28
 8002294:	46bd      	mov	sp, r7
 8002296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229a:	4770      	bx	lr
 800229c:	40021000 	.word	0x40021000
 80022a0:	007a1200 	.word	0x007a1200
 80022a4:	00f42400 	.word	0x00f42400

080022a8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b086      	sub	sp, #24
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80022b0:	2300      	movs	r3, #0
 80022b2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80022b4:	2300      	movs	r3, #0
 80022b6:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	f000 8098 	beq.w	80023f6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80022c6:	2300      	movs	r3, #0
 80022c8:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80022ca:	4b43      	ldr	r3, [pc, #268]	@ (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80022cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022ce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d10d      	bne.n	80022f2 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80022d6:	4b40      	ldr	r3, [pc, #256]	@ (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80022d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022da:	4a3f      	ldr	r2, [pc, #252]	@ (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80022dc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80022e0:	6593      	str	r3, [r2, #88]	@ 0x58
 80022e2:	4b3d      	ldr	r3, [pc, #244]	@ (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80022e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80022ea:	60bb      	str	r3, [r7, #8]
 80022ec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80022ee:	2301      	movs	r3, #1
 80022f0:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80022f2:	4b3a      	ldr	r3, [pc, #232]	@ (80023dc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	4a39      	ldr	r2, [pc, #228]	@ (80023dc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80022f8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80022fc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80022fe:	f7fe fc31 	bl	8000b64 <HAL_GetTick>
 8002302:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002304:	e009      	b.n	800231a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002306:	f7fe fc2d 	bl	8000b64 <HAL_GetTick>
 800230a:	4602      	mov	r2, r0
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	1ad3      	subs	r3, r2, r3
 8002310:	2b02      	cmp	r3, #2
 8002312:	d902      	bls.n	800231a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8002314:	2303      	movs	r3, #3
 8002316:	74fb      	strb	r3, [r7, #19]
        break;
 8002318:	e005      	b.n	8002326 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800231a:	4b30      	ldr	r3, [pc, #192]	@ (80023dc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002322:	2b00      	cmp	r3, #0
 8002324:	d0ef      	beq.n	8002306 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8002326:	7cfb      	ldrb	r3, [r7, #19]
 8002328:	2b00      	cmp	r3, #0
 800232a:	d159      	bne.n	80023e0 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800232c:	4b2a      	ldr	r3, [pc, #168]	@ (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800232e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002332:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002336:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002338:	697b      	ldr	r3, [r7, #20]
 800233a:	2b00      	cmp	r3, #0
 800233c:	d01e      	beq.n	800237c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002342:	697a      	ldr	r2, [r7, #20]
 8002344:	429a      	cmp	r2, r3
 8002346:	d019      	beq.n	800237c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002348:	4b23      	ldr	r3, [pc, #140]	@ (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800234a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800234e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002352:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002354:	4b20      	ldr	r3, [pc, #128]	@ (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002356:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800235a:	4a1f      	ldr	r2, [pc, #124]	@ (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800235c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002360:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002364:	4b1c      	ldr	r3, [pc, #112]	@ (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002366:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800236a:	4a1b      	ldr	r2, [pc, #108]	@ (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800236c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002370:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002374:	4a18      	ldr	r2, [pc, #96]	@ (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002376:	697b      	ldr	r3, [r7, #20]
 8002378:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800237c:	697b      	ldr	r3, [r7, #20]
 800237e:	f003 0301 	and.w	r3, r3, #1
 8002382:	2b00      	cmp	r3, #0
 8002384:	d016      	beq.n	80023b4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002386:	f7fe fbed 	bl	8000b64 <HAL_GetTick>
 800238a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800238c:	e00b      	b.n	80023a6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800238e:	f7fe fbe9 	bl	8000b64 <HAL_GetTick>
 8002392:	4602      	mov	r2, r0
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	1ad3      	subs	r3, r2, r3
 8002398:	f241 3288 	movw	r2, #5000	@ 0x1388
 800239c:	4293      	cmp	r3, r2
 800239e:	d902      	bls.n	80023a6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80023a0:	2303      	movs	r3, #3
 80023a2:	74fb      	strb	r3, [r7, #19]
            break;
 80023a4:	e006      	b.n	80023b4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80023a6:	4b0c      	ldr	r3, [pc, #48]	@ (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80023a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80023ac:	f003 0302 	and.w	r3, r3, #2
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d0ec      	beq.n	800238e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80023b4:	7cfb      	ldrb	r3, [r7, #19]
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d10b      	bne.n	80023d2 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80023ba:	4b07      	ldr	r3, [pc, #28]	@ (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80023bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80023c0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80023c8:	4903      	ldr	r1, [pc, #12]	@ (80023d8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80023ca:	4313      	orrs	r3, r2
 80023cc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80023d0:	e008      	b.n	80023e4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80023d2:	7cfb      	ldrb	r3, [r7, #19]
 80023d4:	74bb      	strb	r3, [r7, #18]
 80023d6:	e005      	b.n	80023e4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80023d8:	40021000 	.word	0x40021000
 80023dc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80023e0:	7cfb      	ldrb	r3, [r7, #19]
 80023e2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80023e4:	7c7b      	ldrb	r3, [r7, #17]
 80023e6:	2b01      	cmp	r3, #1
 80023e8:	d105      	bne.n	80023f6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80023ea:	4ba7      	ldr	r3, [pc, #668]	@ (8002688 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80023ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023ee:	4aa6      	ldr	r2, [pc, #664]	@ (8002688 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80023f0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80023f4:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f003 0301 	and.w	r3, r3, #1
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d00a      	beq.n	8002418 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002402:	4ba1      	ldr	r3, [pc, #644]	@ (8002688 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002404:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002408:	f023 0203 	bic.w	r2, r3, #3
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	685b      	ldr	r3, [r3, #4]
 8002410:	499d      	ldr	r1, [pc, #628]	@ (8002688 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002412:	4313      	orrs	r3, r2
 8002414:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f003 0302 	and.w	r3, r3, #2
 8002420:	2b00      	cmp	r3, #0
 8002422:	d00a      	beq.n	800243a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002424:	4b98      	ldr	r3, [pc, #608]	@ (8002688 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002426:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800242a:	f023 020c 	bic.w	r2, r3, #12
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	689b      	ldr	r3, [r3, #8]
 8002432:	4995      	ldr	r1, [pc, #596]	@ (8002688 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002434:	4313      	orrs	r3, r2
 8002436:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f003 0304 	and.w	r3, r3, #4
 8002442:	2b00      	cmp	r3, #0
 8002444:	d00a      	beq.n	800245c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002446:	4b90      	ldr	r3, [pc, #576]	@ (8002688 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002448:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800244c:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	68db      	ldr	r3, [r3, #12]
 8002454:	498c      	ldr	r1, [pc, #560]	@ (8002688 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002456:	4313      	orrs	r3, r2
 8002458:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f003 0308 	and.w	r3, r3, #8
 8002464:	2b00      	cmp	r3, #0
 8002466:	d00a      	beq.n	800247e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002468:	4b87      	ldr	r3, [pc, #540]	@ (8002688 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800246a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800246e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	691b      	ldr	r3, [r3, #16]
 8002476:	4984      	ldr	r1, [pc, #528]	@ (8002688 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002478:	4313      	orrs	r3, r2
 800247a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f003 0310 	and.w	r3, r3, #16
 8002486:	2b00      	cmp	r3, #0
 8002488:	d00a      	beq.n	80024a0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800248a:	4b7f      	ldr	r3, [pc, #508]	@ (8002688 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800248c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002490:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	695b      	ldr	r3, [r3, #20]
 8002498:	497b      	ldr	r1, [pc, #492]	@ (8002688 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800249a:	4313      	orrs	r3, r2
 800249c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f003 0320 	and.w	r3, r3, #32
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d00a      	beq.n	80024c2 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80024ac:	4b76      	ldr	r3, [pc, #472]	@ (8002688 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80024ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80024b2:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	699b      	ldr	r3, [r3, #24]
 80024ba:	4973      	ldr	r1, [pc, #460]	@ (8002688 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80024bc:	4313      	orrs	r3, r2
 80024be:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d00a      	beq.n	80024e4 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80024ce:	4b6e      	ldr	r3, [pc, #440]	@ (8002688 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80024d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80024d4:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	69db      	ldr	r3, [r3, #28]
 80024dc:	496a      	ldr	r1, [pc, #424]	@ (8002688 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80024de:	4313      	orrs	r3, r2
 80024e0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d00a      	beq.n	8002506 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80024f0:	4b65      	ldr	r3, [pc, #404]	@ (8002688 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80024f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80024f6:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	6a1b      	ldr	r3, [r3, #32]
 80024fe:	4962      	ldr	r1, [pc, #392]	@ (8002688 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002500:	4313      	orrs	r3, r2
 8002502:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800250e:	2b00      	cmp	r3, #0
 8002510:	d00a      	beq.n	8002528 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002512:	4b5d      	ldr	r3, [pc, #372]	@ (8002688 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002514:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002518:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002520:	4959      	ldr	r1, [pc, #356]	@ (8002688 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002522:	4313      	orrs	r3, r2
 8002524:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002530:	2b00      	cmp	r3, #0
 8002532:	d00a      	beq.n	800254a <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002534:	4b54      	ldr	r3, [pc, #336]	@ (8002688 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002536:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800253a:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002542:	4951      	ldr	r1, [pc, #324]	@ (8002688 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002544:	4313      	orrs	r3, r2
 8002546:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002552:	2b00      	cmp	r3, #0
 8002554:	d015      	beq.n	8002582 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002556:	4b4c      	ldr	r3, [pc, #304]	@ (8002688 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002558:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800255c:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002564:	4948      	ldr	r1, [pc, #288]	@ (8002688 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002566:	4313      	orrs	r3, r2
 8002568:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002570:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002574:	d105      	bne.n	8002582 <HAL_RCCEx_PeriphCLKConfig+0x2da>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002576:	4b44      	ldr	r3, [pc, #272]	@ (8002688 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002578:	68db      	ldr	r3, [r3, #12]
 800257a:	4a43      	ldr	r2, [pc, #268]	@ (8002688 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800257c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002580:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800258a:	2b00      	cmp	r3, #0
 800258c:	d015      	beq.n	80025ba <HAL_RCCEx_PeriphCLKConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800258e:	4b3e      	ldr	r3, [pc, #248]	@ (8002688 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002590:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002594:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800259c:	493a      	ldr	r1, [pc, #232]	@ (8002688 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800259e:	4313      	orrs	r3, r2
 80025a0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025a8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80025ac:	d105      	bne.n	80025ba <HAL_RCCEx_PeriphCLKConfig+0x312>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80025ae:	4b36      	ldr	r3, [pc, #216]	@ (8002688 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80025b0:	68db      	ldr	r3, [r3, #12]
 80025b2:	4a35      	ldr	r2, [pc, #212]	@ (8002688 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80025b4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80025b8:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d015      	beq.n	80025f2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80025c6:	4b30      	ldr	r3, [pc, #192]	@ (8002688 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80025c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80025cc:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80025d4:	492c      	ldr	r1, [pc, #176]	@ (8002688 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80025d6:	4313      	orrs	r3, r2
 80025d8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80025e0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80025e4:	d105      	bne.n	80025f2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80025e6:	4b28      	ldr	r3, [pc, #160]	@ (8002688 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80025e8:	68db      	ldr	r3, [r3, #12]
 80025ea:	4a27      	ldr	r2, [pc, #156]	@ (8002688 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80025ec:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80025f0:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d015      	beq.n	800262a <HAL_RCCEx_PeriphCLKConfig+0x382>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80025fe:	4b22      	ldr	r3, [pc, #136]	@ (8002688 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002600:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002604:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800260c:	491e      	ldr	r1, [pc, #120]	@ (8002688 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800260e:	4313      	orrs	r3, r2
 8002610:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002618:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800261c:	d105      	bne.n	800262a <HAL_RCCEx_PeriphCLKConfig+0x382>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800261e:	4b1a      	ldr	r3, [pc, #104]	@ (8002688 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002620:	68db      	ldr	r3, [r3, #12]
 8002622:	4a19      	ldr	r2, [pc, #100]	@ (8002688 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002624:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002628:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002632:	2b00      	cmp	r3, #0
 8002634:	d015      	beq.n	8002662 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002636:	4b14      	ldr	r3, [pc, #80]	@ (8002688 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002638:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800263c:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002644:	4910      	ldr	r1, [pc, #64]	@ (8002688 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002646:	4313      	orrs	r3, r2
 8002648:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002650:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002654:	d105      	bne.n	8002662 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002656:	4b0c      	ldr	r3, [pc, #48]	@ (8002688 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002658:	68db      	ldr	r3, [r3, #12]
 800265a:	4a0b      	ldr	r2, [pc, #44]	@ (8002688 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800265c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002660:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800266a:	2b00      	cmp	r3, #0
 800266c:	d018      	beq.n	80026a0 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800266e:	4b06      	ldr	r3, [pc, #24]	@ (8002688 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002670:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002674:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800267c:	4902      	ldr	r1, [pc, #8]	@ (8002688 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800267e:	4313      	orrs	r3, r2
 8002680:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	e001      	b.n	800268c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8002688:	40021000 	.word	0x40021000
 800268c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800268e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002692:	d105      	bne.n	80026a0 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002694:	4b21      	ldr	r3, [pc, #132]	@ (800271c <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8002696:	68db      	ldr	r3, [r3, #12]
 8002698:	4a20      	ldr	r2, [pc, #128]	@ (800271c <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800269a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800269e:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d015      	beq.n	80026d8 <HAL_RCCEx_PeriphCLKConfig+0x430>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 80026ac:	4b1b      	ldr	r3, [pc, #108]	@ (800271c <HAL_RCCEx_PeriphCLKConfig+0x474>)
 80026ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80026b2:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026ba:	4918      	ldr	r1, [pc, #96]	@ (800271c <HAL_RCCEx_PeriphCLKConfig+0x474>)
 80026bc:	4313      	orrs	r3, r2
 80026be:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026c6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80026ca:	d105      	bne.n	80026d8 <HAL_RCCEx_PeriphCLKConfig+0x430>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80026cc:	4b13      	ldr	r3, [pc, #76]	@ (800271c <HAL_RCCEx_PeriphCLKConfig+0x474>)
 80026ce:	68db      	ldr	r3, [r3, #12]
 80026d0:	4a12      	ldr	r2, [pc, #72]	@ (800271c <HAL_RCCEx_PeriphCLKConfig+0x474>)
 80026d2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80026d6:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d015      	beq.n	8002710 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80026e4:	4b0d      	ldr	r3, [pc, #52]	@ (800271c <HAL_RCCEx_PeriphCLKConfig+0x474>)
 80026e6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80026ea:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80026f2:	490a      	ldr	r1, [pc, #40]	@ (800271c <HAL_RCCEx_PeriphCLKConfig+0x474>)
 80026f4:	4313      	orrs	r3, r2
 80026f6:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80026fe:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002702:	d105      	bne.n	8002710 <HAL_RCCEx_PeriphCLKConfig+0x468>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002704:	4b05      	ldr	r3, [pc, #20]	@ (800271c <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8002706:	68db      	ldr	r3, [r3, #12]
 8002708:	4a04      	ldr	r2, [pc, #16]	@ (800271c <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800270a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800270e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8002710:	7cbb      	ldrb	r3, [r7, #18]
}
 8002712:	4618      	mov	r0, r3
 8002714:	3718      	adds	r7, #24
 8002716:	46bd      	mov	sp, r7
 8002718:	bd80      	pop	{r7, pc}
 800271a:	bf00      	nop
 800271c:	40021000 	.word	0x40021000

08002720 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002720:	b580      	push	{r7, lr}
 8002722:	b082      	sub	sp, #8
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	2b00      	cmp	r3, #0
 800272c:	d101      	bne.n	8002732 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800272e:	2301      	movs	r3, #1
 8002730:	e042      	b.n	80027b8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002738:	2b00      	cmp	r3, #0
 800273a:	d106      	bne.n	800274a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	2200      	movs	r2, #0
 8002740:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002744:	6878      	ldr	r0, [r7, #4]
 8002746:	f7fe f8d3 	bl	80008f0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	2224      	movs	r2, #36	@ 0x24
 800274e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	681a      	ldr	r2, [r3, #0]
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f022 0201 	bic.w	r2, r2, #1
 8002760:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002766:	2b00      	cmp	r3, #0
 8002768:	d002      	beq.n	8002770 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800276a:	6878      	ldr	r0, [r7, #4]
 800276c:	f000 ff14 	bl	8003598 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002770:	6878      	ldr	r0, [r7, #4]
 8002772:	f000 fc15 	bl	8002fa0 <UART_SetConfig>
 8002776:	4603      	mov	r3, r0
 8002778:	2b01      	cmp	r3, #1
 800277a:	d101      	bne.n	8002780 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800277c:	2301      	movs	r3, #1
 800277e:	e01b      	b.n	80027b8 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	685a      	ldr	r2, [r3, #4]
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800278e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	689a      	ldr	r2, [r3, #8]
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800279e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	681a      	ldr	r2, [r3, #0]
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f042 0201 	orr.w	r2, r2, #1
 80027ae:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80027b0:	6878      	ldr	r0, [r7, #4]
 80027b2:	f000 ff93 	bl	80036dc <UART_CheckIdleState>
 80027b6:	4603      	mov	r3, r0
}
 80027b8:	4618      	mov	r0, r3
 80027ba:	3708      	adds	r7, #8
 80027bc:	46bd      	mov	sp, r7
 80027be:	bd80      	pop	{r7, pc}

080027c0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	b08a      	sub	sp, #40	@ 0x28
 80027c4:	af02      	add	r7, sp, #8
 80027c6:	60f8      	str	r0, [r7, #12]
 80027c8:	60b9      	str	r1, [r7, #8]
 80027ca:	603b      	str	r3, [r7, #0]
 80027cc:	4613      	mov	r3, r2
 80027ce:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80027d6:	2b20      	cmp	r3, #32
 80027d8:	d17b      	bne.n	80028d2 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 80027da:	68bb      	ldr	r3, [r7, #8]
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d002      	beq.n	80027e6 <HAL_UART_Transmit+0x26>
 80027e0:	88fb      	ldrh	r3, [r7, #6]
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d101      	bne.n	80027ea <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80027e6:	2301      	movs	r3, #1
 80027e8:	e074      	b.n	80028d4 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	2200      	movs	r2, #0
 80027ee:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	2221      	movs	r2, #33	@ 0x21
 80027f6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80027fa:	f7fe f9b3 	bl	8000b64 <HAL_GetTick>
 80027fe:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	88fa      	ldrh	r2, [r7, #6]
 8002804:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	88fa      	ldrh	r2, [r7, #6]
 800280c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	689b      	ldr	r3, [r3, #8]
 8002814:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002818:	d108      	bne.n	800282c <HAL_UART_Transmit+0x6c>
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	691b      	ldr	r3, [r3, #16]
 800281e:	2b00      	cmp	r3, #0
 8002820:	d104      	bne.n	800282c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002822:	2300      	movs	r3, #0
 8002824:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002826:	68bb      	ldr	r3, [r7, #8]
 8002828:	61bb      	str	r3, [r7, #24]
 800282a:	e003      	b.n	8002834 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800282c:	68bb      	ldr	r3, [r7, #8]
 800282e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002830:	2300      	movs	r3, #0
 8002832:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002834:	e030      	b.n	8002898 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002836:	683b      	ldr	r3, [r7, #0]
 8002838:	9300      	str	r3, [sp, #0]
 800283a:	697b      	ldr	r3, [r7, #20]
 800283c:	2200      	movs	r2, #0
 800283e:	2180      	movs	r1, #128	@ 0x80
 8002840:	68f8      	ldr	r0, [r7, #12]
 8002842:	f000 fff5 	bl	8003830 <UART_WaitOnFlagUntilTimeout>
 8002846:	4603      	mov	r3, r0
 8002848:	2b00      	cmp	r3, #0
 800284a:	d005      	beq.n	8002858 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	2220      	movs	r2, #32
 8002850:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8002854:	2303      	movs	r3, #3
 8002856:	e03d      	b.n	80028d4 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8002858:	69fb      	ldr	r3, [r7, #28]
 800285a:	2b00      	cmp	r3, #0
 800285c:	d10b      	bne.n	8002876 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800285e:	69bb      	ldr	r3, [r7, #24]
 8002860:	881b      	ldrh	r3, [r3, #0]
 8002862:	461a      	mov	r2, r3
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800286c:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800286e:	69bb      	ldr	r3, [r7, #24]
 8002870:	3302      	adds	r3, #2
 8002872:	61bb      	str	r3, [r7, #24]
 8002874:	e007      	b.n	8002886 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002876:	69fb      	ldr	r3, [r7, #28]
 8002878:	781a      	ldrb	r2, [r3, #0]
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8002880:	69fb      	ldr	r3, [r7, #28]
 8002882:	3301      	adds	r3, #1
 8002884:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800288c:	b29b      	uxth	r3, r3
 800288e:	3b01      	subs	r3, #1
 8002890:	b29a      	uxth	r2, r3
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800289e:	b29b      	uxth	r3, r3
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d1c8      	bne.n	8002836 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80028a4:	683b      	ldr	r3, [r7, #0]
 80028a6:	9300      	str	r3, [sp, #0]
 80028a8:	697b      	ldr	r3, [r7, #20]
 80028aa:	2200      	movs	r2, #0
 80028ac:	2140      	movs	r1, #64	@ 0x40
 80028ae:	68f8      	ldr	r0, [r7, #12]
 80028b0:	f000 ffbe 	bl	8003830 <UART_WaitOnFlagUntilTimeout>
 80028b4:	4603      	mov	r3, r0
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d005      	beq.n	80028c6 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	2220      	movs	r2, #32
 80028be:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 80028c2:	2303      	movs	r3, #3
 80028c4:	e006      	b.n	80028d4 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	2220      	movs	r2, #32
 80028ca:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 80028ce:	2300      	movs	r3, #0
 80028d0:	e000      	b.n	80028d4 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 80028d2:	2302      	movs	r3, #2
  }
}
 80028d4:	4618      	mov	r0, r3
 80028d6:	3720      	adds	r7, #32
 80028d8:	46bd      	mov	sp, r7
 80028da:	bd80      	pop	{r7, pc}

080028dc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80028dc:	b580      	push	{r7, lr}
 80028de:	b0ba      	sub	sp, #232	@ 0xe8
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	69db      	ldr	r3, [r3, #28]
 80028ea:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	689b      	ldr	r3, [r3, #8]
 80028fe:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002902:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8002906:	f640 030f 	movw	r3, #2063	@ 0x80f
 800290a:	4013      	ands	r3, r2
 800290c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8002910:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002914:	2b00      	cmp	r3, #0
 8002916:	d11b      	bne.n	8002950 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8002918:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800291c:	f003 0320 	and.w	r3, r3, #32
 8002920:	2b00      	cmp	r3, #0
 8002922:	d015      	beq.n	8002950 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8002924:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002928:	f003 0320 	and.w	r3, r3, #32
 800292c:	2b00      	cmp	r3, #0
 800292e:	d105      	bne.n	800293c <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8002930:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002934:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002938:	2b00      	cmp	r3, #0
 800293a:	d009      	beq.n	8002950 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002940:	2b00      	cmp	r3, #0
 8002942:	f000 8300 	beq.w	8002f46 <HAL_UART_IRQHandler+0x66a>
      {
        huart->RxISR(huart);
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800294a:	6878      	ldr	r0, [r7, #4]
 800294c:	4798      	blx	r3
      }
      return;
 800294e:	e2fa      	b.n	8002f46 <HAL_UART_IRQHandler+0x66a>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8002950:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002954:	2b00      	cmp	r3, #0
 8002956:	f000 8123 	beq.w	8002ba0 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800295a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800295e:	4b8d      	ldr	r3, [pc, #564]	@ (8002b94 <HAL_UART_IRQHandler+0x2b8>)
 8002960:	4013      	ands	r3, r2
 8002962:	2b00      	cmp	r3, #0
 8002964:	d106      	bne.n	8002974 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8002966:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800296a:	4b8b      	ldr	r3, [pc, #556]	@ (8002b98 <HAL_UART_IRQHandler+0x2bc>)
 800296c:	4013      	ands	r3, r2
 800296e:	2b00      	cmp	r3, #0
 8002970:	f000 8116 	beq.w	8002ba0 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002974:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002978:	f003 0301 	and.w	r3, r3, #1
 800297c:	2b00      	cmp	r3, #0
 800297e:	d011      	beq.n	80029a4 <HAL_UART_IRQHandler+0xc8>
 8002980:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002984:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002988:	2b00      	cmp	r3, #0
 800298a:	d00b      	beq.n	80029a4 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	2201      	movs	r2, #1
 8002992:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800299a:	f043 0201 	orr.w	r2, r3, #1
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80029a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80029a8:	f003 0302 	and.w	r3, r3, #2
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d011      	beq.n	80029d4 <HAL_UART_IRQHandler+0xf8>
 80029b0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80029b4:	f003 0301 	and.w	r3, r3, #1
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d00b      	beq.n	80029d4 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	2202      	movs	r2, #2
 80029c2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80029ca:	f043 0204 	orr.w	r2, r3, #4
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80029d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80029d8:	f003 0304 	and.w	r3, r3, #4
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d011      	beq.n	8002a04 <HAL_UART_IRQHandler+0x128>
 80029e0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80029e4:	f003 0301 	and.w	r3, r3, #1
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d00b      	beq.n	8002a04 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	2204      	movs	r2, #4
 80029f2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80029fa:	f043 0202 	orr.w	r2, r3, #2
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002a04:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002a08:	f003 0308 	and.w	r3, r3, #8
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d017      	beq.n	8002a40 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8002a10:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002a14:	f003 0320 	and.w	r3, r3, #32
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d105      	bne.n	8002a28 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8002a1c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8002a20:	4b5c      	ldr	r3, [pc, #368]	@ (8002b94 <HAL_UART_IRQHandler+0x2b8>)
 8002a22:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d00b      	beq.n	8002a40 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	2208      	movs	r2, #8
 8002a2e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a36:	f043 0208 	orr.w	r2, r3, #8
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002a40:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002a44:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d012      	beq.n	8002a72 <HAL_UART_IRQHandler+0x196>
 8002a4c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002a50:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d00c      	beq.n	8002a72 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002a60:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a68:	f043 0220 	orr.w	r2, r3, #32
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	f000 8266 	beq.w	8002f4a <HAL_UART_IRQHandler+0x66e>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8002a7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002a82:	f003 0320 	and.w	r3, r3, #32
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d013      	beq.n	8002ab2 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8002a8a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002a8e:	f003 0320 	and.w	r3, r3, #32
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d105      	bne.n	8002aa2 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8002a96:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002a9a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d007      	beq.n	8002ab2 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d003      	beq.n	8002ab2 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002aae:	6878      	ldr	r0, [r7, #4]
 8002ab0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ab8:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	689b      	ldr	r3, [r3, #8]
 8002ac2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ac6:	2b40      	cmp	r3, #64	@ 0x40
 8002ac8:	d005      	beq.n	8002ad6 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002aca:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002ace:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d054      	beq.n	8002b80 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002ad6:	6878      	ldr	r0, [r7, #4]
 8002ad8:	f000 ff17 	bl	800390a <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	689b      	ldr	r3, [r3, #8]
 8002ae2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ae6:	2b40      	cmp	r3, #64	@ 0x40
 8002ae8:	d146      	bne.n	8002b78 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	3308      	adds	r3, #8
 8002af0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002af4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002af8:	e853 3f00 	ldrex	r3, [r3]
 8002afc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8002b00:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002b04:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002b08:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	3308      	adds	r3, #8
 8002b12:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8002b16:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8002b1a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b1e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8002b22:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8002b26:	e841 2300 	strex	r3, r2, [r1]
 8002b2a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8002b2e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d1d9      	bne.n	8002aea <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d017      	beq.n	8002b70 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002b46:	4a15      	ldr	r2, [pc, #84]	@ (8002b9c <HAL_UART_IRQHandler+0x2c0>)
 8002b48:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002b50:	4618      	mov	r0, r3
 8002b52:	f7fe f97b 	bl	8000e4c <HAL_DMA_Abort_IT>
 8002b56:	4603      	mov	r3, r0
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d019      	beq.n	8002b90 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002b62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b64:	687a      	ldr	r2, [r7, #4]
 8002b66:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8002b6a:	4610      	mov	r0, r2
 8002b6c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b6e:	e00f      	b.n	8002b90 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002b70:	6878      	ldr	r0, [r7, #4]
 8002b72:	f000 f9ff 	bl	8002f74 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b76:	e00b      	b.n	8002b90 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002b78:	6878      	ldr	r0, [r7, #4]
 8002b7a:	f000 f9fb 	bl	8002f74 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b7e:	e007      	b.n	8002b90 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002b80:	6878      	ldr	r0, [r7, #4]
 8002b82:	f000 f9f7 	bl	8002f74 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	2200      	movs	r2, #0
 8002b8a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8002b8e:	e1dc      	b.n	8002f4a <HAL_UART_IRQHandler+0x66e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b90:	bf00      	nop
    return;
 8002b92:	e1da      	b.n	8002f4a <HAL_UART_IRQHandler+0x66e>
 8002b94:	10000001 	.word	0x10000001
 8002b98:	04000120 	.word	0x04000120
 8002b9c:	080039d7 	.word	0x080039d7

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002ba4:	2b01      	cmp	r3, #1
 8002ba6:	f040 8170 	bne.w	8002e8a <HAL_UART_IRQHandler+0x5ae>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8002baa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002bae:	f003 0310 	and.w	r3, r3, #16
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	f000 8169 	beq.w	8002e8a <HAL_UART_IRQHandler+0x5ae>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8002bb8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002bbc:	f003 0310 	and.w	r3, r3, #16
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	f000 8162 	beq.w	8002e8a <HAL_UART_IRQHandler+0x5ae>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	2210      	movs	r2, #16
 8002bcc:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	689b      	ldr	r3, [r3, #8]
 8002bd4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002bd8:	2b40      	cmp	r3, #64	@ 0x40
 8002bda:	f040 80d8 	bne.w	8002d8e <HAL_UART_IRQHandler+0x4b2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	685b      	ldr	r3, [r3, #4]
 8002be8:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002bec:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	f000 80af 	beq.w	8002d54 <HAL_UART_IRQHandler+0x478>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8002bfc:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002c00:	429a      	cmp	r2, r3
 8002c02:	f080 80a7 	bcs.w	8002d54 <HAL_UART_IRQHandler+0x478>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002c0c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f003 0320 	and.w	r3, r3, #32
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	f040 8087 	bne.w	8002d32 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c2c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002c30:	e853 3f00 	ldrex	r3, [r3]
 8002c34:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8002c38:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002c3c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002c40:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	461a      	mov	r2, r3
 8002c4a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002c4e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8002c52:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c56:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8002c5a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8002c5e:	e841 2300 	strex	r3, r2, [r1]
 8002c62:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8002c66:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d1da      	bne.n	8002c24 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	3308      	adds	r3, #8
 8002c74:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c76:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002c78:	e853 3f00 	ldrex	r3, [r3]
 8002c7c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8002c7e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002c80:	f023 0301 	bic.w	r3, r3, #1
 8002c84:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	3308      	adds	r3, #8
 8002c8e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002c92:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8002c96:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c98:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8002c9a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8002c9e:	e841 2300 	strex	r3, r2, [r1]
 8002ca2:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8002ca4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d1e1      	bne.n	8002c6e <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	3308      	adds	r3, #8
 8002cb0:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002cb2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002cb4:	e853 3f00 	ldrex	r3, [r3]
 8002cb8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8002cba:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002cbc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002cc0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	3308      	adds	r3, #8
 8002cca:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8002cce:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002cd0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002cd2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8002cd4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8002cd6:	e841 2300 	strex	r3, r2, [r1]
 8002cda:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8002cdc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d1e3      	bne.n	8002caa <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	2220      	movs	r2, #32
 8002ce6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	2200      	movs	r2, #0
 8002cee:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002cf6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002cf8:	e853 3f00 	ldrex	r3, [r3]
 8002cfc:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8002cfe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002d00:	f023 0310 	bic.w	r3, r3, #16
 8002d04:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	461a      	mov	r2, r3
 8002d0e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002d12:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002d14:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d16:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002d18:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002d1a:	e841 2300 	strex	r3, r2, [r1]
 8002d1e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8002d20:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d1e4      	bne.n	8002cf0 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	f7fe f834 	bl	8000d9a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	2202      	movs	r2, #2
 8002d36:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8002d44:	b29b      	uxth	r3, r3
 8002d46:	1ad3      	subs	r3, r2, r3
 8002d48:	b29b      	uxth	r3, r3
 8002d4a:	4619      	mov	r1, r3
 8002d4c:	6878      	ldr	r0, [r7, #4]
 8002d4e:	f000 f91b 	bl	8002f88 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8002d52:	e0fc      	b.n	8002f4e <HAL_UART_IRQHandler+0x672>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8002d5a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002d5e:	429a      	cmp	r2, r3
 8002d60:	f040 80f5 	bne.w	8002f4e <HAL_UART_IRQHandler+0x672>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f003 0320 	and.w	r3, r3, #32
 8002d72:	2b20      	cmp	r3, #32
 8002d74:	f040 80eb 	bne.w	8002f4e <HAL_UART_IRQHandler+0x672>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	2202      	movs	r2, #2
 8002d7c:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8002d84:	4619      	mov	r1, r3
 8002d86:	6878      	ldr	r0, [r7, #4]
 8002d88:	f000 f8fe 	bl	8002f88 <HAL_UARTEx_RxEventCallback>
      return;
 8002d8c:	e0df      	b.n	8002f4e <HAL_UART_IRQHandler+0x672>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8002d9a:	b29b      	uxth	r3, r3
 8002d9c:	1ad3      	subs	r3, r2, r3
 8002d9e:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8002da8:	b29b      	uxth	r3, r3
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	f000 80d1 	beq.w	8002f52 <HAL_UART_IRQHandler+0x676>
          && (nb_rx_data > 0U))
 8002db0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	f000 80cc 	beq.w	8002f52 <HAL_UART_IRQHandler+0x676>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002dc0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002dc2:	e853 3f00 	ldrex	r3, [r3]
 8002dc6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8002dc8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002dca:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002dce:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	461a      	mov	r2, r3
 8002dd8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002ddc:	647b      	str	r3, [r7, #68]	@ 0x44
 8002dde:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002de0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002de2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002de4:	e841 2300 	strex	r3, r2, [r1]
 8002de8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8002dea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d1e4      	bne.n	8002dba <HAL_UART_IRQHandler+0x4de>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	3308      	adds	r3, #8
 8002df6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002df8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dfa:	e853 3f00 	ldrex	r3, [r3]
 8002dfe:	623b      	str	r3, [r7, #32]
   return(result);
 8002e00:	6a3b      	ldr	r3, [r7, #32]
 8002e02:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002e06:	f023 0301 	bic.w	r3, r3, #1
 8002e0a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	3308      	adds	r3, #8
 8002e14:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8002e18:	633a      	str	r2, [r7, #48]	@ 0x30
 8002e1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e1c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002e1e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002e20:	e841 2300 	strex	r3, r2, [r1]
 8002e24:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8002e26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d1e1      	bne.n	8002df0 <HAL_UART_IRQHandler+0x514>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	2220      	movs	r2, #32
 8002e30:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	2200      	movs	r2, #0
 8002e38:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e46:	693b      	ldr	r3, [r7, #16]
 8002e48:	e853 3f00 	ldrex	r3, [r3]
 8002e4c:	60fb      	str	r3, [r7, #12]
   return(result);
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	f023 0310 	bic.w	r3, r3, #16
 8002e54:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	461a      	mov	r2, r3
 8002e5e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002e62:	61fb      	str	r3, [r7, #28]
 8002e64:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e66:	69b9      	ldr	r1, [r7, #24]
 8002e68:	69fa      	ldr	r2, [r7, #28]
 8002e6a:	e841 2300 	strex	r3, r2, [r1]
 8002e6e:	617b      	str	r3, [r7, #20]
   return(result);
 8002e70:	697b      	ldr	r3, [r7, #20]
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d1e4      	bne.n	8002e40 <HAL_UART_IRQHandler+0x564>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	2202      	movs	r2, #2
 8002e7a:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002e7c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002e80:	4619      	mov	r1, r3
 8002e82:	6878      	ldr	r0, [r7, #4]
 8002e84:	f000 f880 	bl	8002f88 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002e88:	e063      	b.n	8002f52 <HAL_UART_IRQHandler+0x676>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8002e8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002e8e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d00e      	beq.n	8002eb4 <HAL_UART_IRQHandler+0x5d8>
 8002e96:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002e9a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d008      	beq.n	8002eb4 <HAL_UART_IRQHandler+0x5d8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8002eaa:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8002eac:	6878      	ldr	r0, [r7, #4]
 8002eae:	f000 fdcf 	bl	8003a50 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002eb2:	e051      	b.n	8002f58 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8002eb4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002eb8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d014      	beq.n	8002eea <HAL_UART_IRQHandler+0x60e>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8002ec0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002ec4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d105      	bne.n	8002ed8 <HAL_UART_IRQHandler+0x5fc>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8002ecc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002ed0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d008      	beq.n	8002eea <HAL_UART_IRQHandler+0x60e>
  {
    if (huart->TxISR != NULL)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d03a      	beq.n	8002f56 <HAL_UART_IRQHandler+0x67a>
    {
      huart->TxISR(huart);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002ee4:	6878      	ldr	r0, [r7, #4]
 8002ee6:	4798      	blx	r3
    }
    return;
 8002ee8:	e035      	b.n	8002f56 <HAL_UART_IRQHandler+0x67a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8002eea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002eee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d009      	beq.n	8002f0a <HAL_UART_IRQHandler+0x62e>
 8002ef6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002efa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d003      	beq.n	8002f0a <HAL_UART_IRQHandler+0x62e>
  {
    UART_EndTransmit_IT(huart);
 8002f02:	6878      	ldr	r0, [r7, #4]
 8002f04:	f000 fd79 	bl	80039fa <UART_EndTransmit_IT>
    return;
 8002f08:	e026      	b.n	8002f58 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8002f0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002f0e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d009      	beq.n	8002f2a <HAL_UART_IRQHandler+0x64e>
 8002f16:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002f1a:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d003      	beq.n	8002f2a <HAL_UART_IRQHandler+0x64e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8002f22:	6878      	ldr	r0, [r7, #4]
 8002f24:	f000 fda8 	bl	8003a78 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002f28:	e016      	b.n	8002f58 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8002f2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002f2e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d010      	beq.n	8002f58 <HAL_UART_IRQHandler+0x67c>
 8002f36:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	da0c      	bge.n	8002f58 <HAL_UART_IRQHandler+0x67c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8002f3e:	6878      	ldr	r0, [r7, #4]
 8002f40:	f000 fd90 	bl	8003a64 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002f44:	e008      	b.n	8002f58 <HAL_UART_IRQHandler+0x67c>
      return;
 8002f46:	bf00      	nop
 8002f48:	e006      	b.n	8002f58 <HAL_UART_IRQHandler+0x67c>
    return;
 8002f4a:	bf00      	nop
 8002f4c:	e004      	b.n	8002f58 <HAL_UART_IRQHandler+0x67c>
      return;
 8002f4e:	bf00      	nop
 8002f50:	e002      	b.n	8002f58 <HAL_UART_IRQHandler+0x67c>
      return;
 8002f52:	bf00      	nop
 8002f54:	e000      	b.n	8002f58 <HAL_UART_IRQHandler+0x67c>
    return;
 8002f56:	bf00      	nop
  }
}
 8002f58:	37e8      	adds	r7, #232	@ 0xe8
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	bd80      	pop	{r7, pc}
 8002f5e:	bf00      	nop

08002f60 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002f60:	b480      	push	{r7}
 8002f62:	b083      	sub	sp, #12
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8002f68:	bf00      	nop
 8002f6a:	370c      	adds	r7, #12
 8002f6c:	46bd      	mov	sp, r7
 8002f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f72:	4770      	bx	lr

08002f74 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002f74:	b480      	push	{r7}
 8002f76:	b083      	sub	sp, #12
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8002f7c:	bf00      	nop
 8002f7e:	370c      	adds	r7, #12
 8002f80:	46bd      	mov	sp, r7
 8002f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f86:	4770      	bx	lr

08002f88 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002f88:	b480      	push	{r7}
 8002f8a:	b083      	sub	sp, #12
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	6078      	str	r0, [r7, #4]
 8002f90:	460b      	mov	r3, r1
 8002f92:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002f94:	bf00      	nop
 8002f96:	370c      	adds	r7, #12
 8002f98:	46bd      	mov	sp, r7
 8002f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f9e:	4770      	bx	lr

08002fa0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002fa0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002fa4:	b08c      	sub	sp, #48	@ 0x30
 8002fa6:	af00      	add	r7, sp, #0
 8002fa8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002faa:	2300      	movs	r3, #0
 8002fac:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002fb0:	697b      	ldr	r3, [r7, #20]
 8002fb2:	689a      	ldr	r2, [r3, #8]
 8002fb4:	697b      	ldr	r3, [r7, #20]
 8002fb6:	691b      	ldr	r3, [r3, #16]
 8002fb8:	431a      	orrs	r2, r3
 8002fba:	697b      	ldr	r3, [r7, #20]
 8002fbc:	695b      	ldr	r3, [r3, #20]
 8002fbe:	431a      	orrs	r2, r3
 8002fc0:	697b      	ldr	r3, [r7, #20]
 8002fc2:	69db      	ldr	r3, [r3, #28]
 8002fc4:	4313      	orrs	r3, r2
 8002fc6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002fc8:	697b      	ldr	r3, [r7, #20]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	681a      	ldr	r2, [r3, #0]
 8002fce:	4baa      	ldr	r3, [pc, #680]	@ (8003278 <UART_SetConfig+0x2d8>)
 8002fd0:	4013      	ands	r3, r2
 8002fd2:	697a      	ldr	r2, [r7, #20]
 8002fd4:	6812      	ldr	r2, [r2, #0]
 8002fd6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002fd8:	430b      	orrs	r3, r1
 8002fda:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002fdc:	697b      	ldr	r3, [r7, #20]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	685b      	ldr	r3, [r3, #4]
 8002fe2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8002fe6:	697b      	ldr	r3, [r7, #20]
 8002fe8:	68da      	ldr	r2, [r3, #12]
 8002fea:	697b      	ldr	r3, [r7, #20]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	430a      	orrs	r2, r1
 8002ff0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002ff2:	697b      	ldr	r3, [r7, #20]
 8002ff4:	699b      	ldr	r3, [r3, #24]
 8002ff6:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002ff8:	697b      	ldr	r3, [r7, #20]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	4a9f      	ldr	r2, [pc, #636]	@ (800327c <UART_SetConfig+0x2dc>)
 8002ffe:	4293      	cmp	r3, r2
 8003000:	d004      	beq.n	800300c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003002:	697b      	ldr	r3, [r7, #20]
 8003004:	6a1b      	ldr	r3, [r3, #32]
 8003006:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003008:	4313      	orrs	r3, r2
 800300a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800300c:	697b      	ldr	r3, [r7, #20]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	689b      	ldr	r3, [r3, #8]
 8003012:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8003016:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800301a:	697a      	ldr	r2, [r7, #20]
 800301c:	6812      	ldr	r2, [r2, #0]
 800301e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003020:	430b      	orrs	r3, r1
 8003022:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003024:	697b      	ldr	r3, [r7, #20]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800302a:	f023 010f 	bic.w	r1, r3, #15
 800302e:	697b      	ldr	r3, [r7, #20]
 8003030:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003032:	697b      	ldr	r3, [r7, #20]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	430a      	orrs	r2, r1
 8003038:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800303a:	697b      	ldr	r3, [r7, #20]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	4a90      	ldr	r2, [pc, #576]	@ (8003280 <UART_SetConfig+0x2e0>)
 8003040:	4293      	cmp	r3, r2
 8003042:	d125      	bne.n	8003090 <UART_SetConfig+0xf0>
 8003044:	4b8f      	ldr	r3, [pc, #572]	@ (8003284 <UART_SetConfig+0x2e4>)
 8003046:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800304a:	f003 0303 	and.w	r3, r3, #3
 800304e:	2b03      	cmp	r3, #3
 8003050:	d81a      	bhi.n	8003088 <UART_SetConfig+0xe8>
 8003052:	a201      	add	r2, pc, #4	@ (adr r2, 8003058 <UART_SetConfig+0xb8>)
 8003054:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003058:	08003069 	.word	0x08003069
 800305c:	08003079 	.word	0x08003079
 8003060:	08003071 	.word	0x08003071
 8003064:	08003081 	.word	0x08003081
 8003068:	2301      	movs	r3, #1
 800306a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800306e:	e116      	b.n	800329e <UART_SetConfig+0x2fe>
 8003070:	2302      	movs	r3, #2
 8003072:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003076:	e112      	b.n	800329e <UART_SetConfig+0x2fe>
 8003078:	2304      	movs	r3, #4
 800307a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800307e:	e10e      	b.n	800329e <UART_SetConfig+0x2fe>
 8003080:	2308      	movs	r3, #8
 8003082:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003086:	e10a      	b.n	800329e <UART_SetConfig+0x2fe>
 8003088:	2310      	movs	r3, #16
 800308a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800308e:	e106      	b.n	800329e <UART_SetConfig+0x2fe>
 8003090:	697b      	ldr	r3, [r7, #20]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	4a7c      	ldr	r2, [pc, #496]	@ (8003288 <UART_SetConfig+0x2e8>)
 8003096:	4293      	cmp	r3, r2
 8003098:	d138      	bne.n	800310c <UART_SetConfig+0x16c>
 800309a:	4b7a      	ldr	r3, [pc, #488]	@ (8003284 <UART_SetConfig+0x2e4>)
 800309c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80030a0:	f003 030c 	and.w	r3, r3, #12
 80030a4:	2b0c      	cmp	r3, #12
 80030a6:	d82d      	bhi.n	8003104 <UART_SetConfig+0x164>
 80030a8:	a201      	add	r2, pc, #4	@ (adr r2, 80030b0 <UART_SetConfig+0x110>)
 80030aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030ae:	bf00      	nop
 80030b0:	080030e5 	.word	0x080030e5
 80030b4:	08003105 	.word	0x08003105
 80030b8:	08003105 	.word	0x08003105
 80030bc:	08003105 	.word	0x08003105
 80030c0:	080030f5 	.word	0x080030f5
 80030c4:	08003105 	.word	0x08003105
 80030c8:	08003105 	.word	0x08003105
 80030cc:	08003105 	.word	0x08003105
 80030d0:	080030ed 	.word	0x080030ed
 80030d4:	08003105 	.word	0x08003105
 80030d8:	08003105 	.word	0x08003105
 80030dc:	08003105 	.word	0x08003105
 80030e0:	080030fd 	.word	0x080030fd
 80030e4:	2300      	movs	r3, #0
 80030e6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80030ea:	e0d8      	b.n	800329e <UART_SetConfig+0x2fe>
 80030ec:	2302      	movs	r3, #2
 80030ee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80030f2:	e0d4      	b.n	800329e <UART_SetConfig+0x2fe>
 80030f4:	2304      	movs	r3, #4
 80030f6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80030fa:	e0d0      	b.n	800329e <UART_SetConfig+0x2fe>
 80030fc:	2308      	movs	r3, #8
 80030fe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003102:	e0cc      	b.n	800329e <UART_SetConfig+0x2fe>
 8003104:	2310      	movs	r3, #16
 8003106:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800310a:	e0c8      	b.n	800329e <UART_SetConfig+0x2fe>
 800310c:	697b      	ldr	r3, [r7, #20]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	4a5e      	ldr	r2, [pc, #376]	@ (800328c <UART_SetConfig+0x2ec>)
 8003112:	4293      	cmp	r3, r2
 8003114:	d125      	bne.n	8003162 <UART_SetConfig+0x1c2>
 8003116:	4b5b      	ldr	r3, [pc, #364]	@ (8003284 <UART_SetConfig+0x2e4>)
 8003118:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800311c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8003120:	2b30      	cmp	r3, #48	@ 0x30
 8003122:	d016      	beq.n	8003152 <UART_SetConfig+0x1b2>
 8003124:	2b30      	cmp	r3, #48	@ 0x30
 8003126:	d818      	bhi.n	800315a <UART_SetConfig+0x1ba>
 8003128:	2b20      	cmp	r3, #32
 800312a:	d00a      	beq.n	8003142 <UART_SetConfig+0x1a2>
 800312c:	2b20      	cmp	r3, #32
 800312e:	d814      	bhi.n	800315a <UART_SetConfig+0x1ba>
 8003130:	2b00      	cmp	r3, #0
 8003132:	d002      	beq.n	800313a <UART_SetConfig+0x19a>
 8003134:	2b10      	cmp	r3, #16
 8003136:	d008      	beq.n	800314a <UART_SetConfig+0x1aa>
 8003138:	e00f      	b.n	800315a <UART_SetConfig+0x1ba>
 800313a:	2300      	movs	r3, #0
 800313c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003140:	e0ad      	b.n	800329e <UART_SetConfig+0x2fe>
 8003142:	2302      	movs	r3, #2
 8003144:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003148:	e0a9      	b.n	800329e <UART_SetConfig+0x2fe>
 800314a:	2304      	movs	r3, #4
 800314c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003150:	e0a5      	b.n	800329e <UART_SetConfig+0x2fe>
 8003152:	2308      	movs	r3, #8
 8003154:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003158:	e0a1      	b.n	800329e <UART_SetConfig+0x2fe>
 800315a:	2310      	movs	r3, #16
 800315c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003160:	e09d      	b.n	800329e <UART_SetConfig+0x2fe>
 8003162:	697b      	ldr	r3, [r7, #20]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	4a4a      	ldr	r2, [pc, #296]	@ (8003290 <UART_SetConfig+0x2f0>)
 8003168:	4293      	cmp	r3, r2
 800316a:	d125      	bne.n	80031b8 <UART_SetConfig+0x218>
 800316c:	4b45      	ldr	r3, [pc, #276]	@ (8003284 <UART_SetConfig+0x2e4>)
 800316e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003172:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8003176:	2bc0      	cmp	r3, #192	@ 0xc0
 8003178:	d016      	beq.n	80031a8 <UART_SetConfig+0x208>
 800317a:	2bc0      	cmp	r3, #192	@ 0xc0
 800317c:	d818      	bhi.n	80031b0 <UART_SetConfig+0x210>
 800317e:	2b80      	cmp	r3, #128	@ 0x80
 8003180:	d00a      	beq.n	8003198 <UART_SetConfig+0x1f8>
 8003182:	2b80      	cmp	r3, #128	@ 0x80
 8003184:	d814      	bhi.n	80031b0 <UART_SetConfig+0x210>
 8003186:	2b00      	cmp	r3, #0
 8003188:	d002      	beq.n	8003190 <UART_SetConfig+0x1f0>
 800318a:	2b40      	cmp	r3, #64	@ 0x40
 800318c:	d008      	beq.n	80031a0 <UART_SetConfig+0x200>
 800318e:	e00f      	b.n	80031b0 <UART_SetConfig+0x210>
 8003190:	2300      	movs	r3, #0
 8003192:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003196:	e082      	b.n	800329e <UART_SetConfig+0x2fe>
 8003198:	2302      	movs	r3, #2
 800319a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800319e:	e07e      	b.n	800329e <UART_SetConfig+0x2fe>
 80031a0:	2304      	movs	r3, #4
 80031a2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80031a6:	e07a      	b.n	800329e <UART_SetConfig+0x2fe>
 80031a8:	2308      	movs	r3, #8
 80031aa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80031ae:	e076      	b.n	800329e <UART_SetConfig+0x2fe>
 80031b0:	2310      	movs	r3, #16
 80031b2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80031b6:	e072      	b.n	800329e <UART_SetConfig+0x2fe>
 80031b8:	697b      	ldr	r3, [r7, #20]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	4a35      	ldr	r2, [pc, #212]	@ (8003294 <UART_SetConfig+0x2f4>)
 80031be:	4293      	cmp	r3, r2
 80031c0:	d12a      	bne.n	8003218 <UART_SetConfig+0x278>
 80031c2:	4b30      	ldr	r3, [pc, #192]	@ (8003284 <UART_SetConfig+0x2e4>)
 80031c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80031c8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80031cc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80031d0:	d01a      	beq.n	8003208 <UART_SetConfig+0x268>
 80031d2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80031d6:	d81b      	bhi.n	8003210 <UART_SetConfig+0x270>
 80031d8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80031dc:	d00c      	beq.n	80031f8 <UART_SetConfig+0x258>
 80031de:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80031e2:	d815      	bhi.n	8003210 <UART_SetConfig+0x270>
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d003      	beq.n	80031f0 <UART_SetConfig+0x250>
 80031e8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80031ec:	d008      	beq.n	8003200 <UART_SetConfig+0x260>
 80031ee:	e00f      	b.n	8003210 <UART_SetConfig+0x270>
 80031f0:	2300      	movs	r3, #0
 80031f2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80031f6:	e052      	b.n	800329e <UART_SetConfig+0x2fe>
 80031f8:	2302      	movs	r3, #2
 80031fa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80031fe:	e04e      	b.n	800329e <UART_SetConfig+0x2fe>
 8003200:	2304      	movs	r3, #4
 8003202:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003206:	e04a      	b.n	800329e <UART_SetConfig+0x2fe>
 8003208:	2308      	movs	r3, #8
 800320a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800320e:	e046      	b.n	800329e <UART_SetConfig+0x2fe>
 8003210:	2310      	movs	r3, #16
 8003212:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003216:	e042      	b.n	800329e <UART_SetConfig+0x2fe>
 8003218:	697b      	ldr	r3, [r7, #20]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	4a17      	ldr	r2, [pc, #92]	@ (800327c <UART_SetConfig+0x2dc>)
 800321e:	4293      	cmp	r3, r2
 8003220:	d13a      	bne.n	8003298 <UART_SetConfig+0x2f8>
 8003222:	4b18      	ldr	r3, [pc, #96]	@ (8003284 <UART_SetConfig+0x2e4>)
 8003224:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003228:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800322c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003230:	d01a      	beq.n	8003268 <UART_SetConfig+0x2c8>
 8003232:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003236:	d81b      	bhi.n	8003270 <UART_SetConfig+0x2d0>
 8003238:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800323c:	d00c      	beq.n	8003258 <UART_SetConfig+0x2b8>
 800323e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003242:	d815      	bhi.n	8003270 <UART_SetConfig+0x2d0>
 8003244:	2b00      	cmp	r3, #0
 8003246:	d003      	beq.n	8003250 <UART_SetConfig+0x2b0>
 8003248:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800324c:	d008      	beq.n	8003260 <UART_SetConfig+0x2c0>
 800324e:	e00f      	b.n	8003270 <UART_SetConfig+0x2d0>
 8003250:	2300      	movs	r3, #0
 8003252:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003256:	e022      	b.n	800329e <UART_SetConfig+0x2fe>
 8003258:	2302      	movs	r3, #2
 800325a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800325e:	e01e      	b.n	800329e <UART_SetConfig+0x2fe>
 8003260:	2304      	movs	r3, #4
 8003262:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003266:	e01a      	b.n	800329e <UART_SetConfig+0x2fe>
 8003268:	2308      	movs	r3, #8
 800326a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800326e:	e016      	b.n	800329e <UART_SetConfig+0x2fe>
 8003270:	2310      	movs	r3, #16
 8003272:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003276:	e012      	b.n	800329e <UART_SetConfig+0x2fe>
 8003278:	cfff69f3 	.word	0xcfff69f3
 800327c:	40008000 	.word	0x40008000
 8003280:	40013800 	.word	0x40013800
 8003284:	40021000 	.word	0x40021000
 8003288:	40004400 	.word	0x40004400
 800328c:	40004800 	.word	0x40004800
 8003290:	40004c00 	.word	0x40004c00
 8003294:	40005000 	.word	0x40005000
 8003298:	2310      	movs	r3, #16
 800329a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800329e:	697b      	ldr	r3, [r7, #20]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	4aae      	ldr	r2, [pc, #696]	@ (800355c <UART_SetConfig+0x5bc>)
 80032a4:	4293      	cmp	r3, r2
 80032a6:	f040 8097 	bne.w	80033d8 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80032aa:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80032ae:	2b08      	cmp	r3, #8
 80032b0:	d823      	bhi.n	80032fa <UART_SetConfig+0x35a>
 80032b2:	a201      	add	r2, pc, #4	@ (adr r2, 80032b8 <UART_SetConfig+0x318>)
 80032b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032b8:	080032dd 	.word	0x080032dd
 80032bc:	080032fb 	.word	0x080032fb
 80032c0:	080032e5 	.word	0x080032e5
 80032c4:	080032fb 	.word	0x080032fb
 80032c8:	080032eb 	.word	0x080032eb
 80032cc:	080032fb 	.word	0x080032fb
 80032d0:	080032fb 	.word	0x080032fb
 80032d4:	080032fb 	.word	0x080032fb
 80032d8:	080032f3 	.word	0x080032f3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80032dc:	f7fe ff72 	bl	80021c4 <HAL_RCC_GetPCLK1Freq>
 80032e0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80032e2:	e010      	b.n	8003306 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80032e4:	4b9e      	ldr	r3, [pc, #632]	@ (8003560 <UART_SetConfig+0x5c0>)
 80032e6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80032e8:	e00d      	b.n	8003306 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80032ea:	f7fe fefd 	bl	80020e8 <HAL_RCC_GetSysClockFreq>
 80032ee:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80032f0:	e009      	b.n	8003306 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80032f2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80032f6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80032f8:	e005      	b.n	8003306 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 80032fa:	2300      	movs	r3, #0
 80032fc:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80032fe:	2301      	movs	r3, #1
 8003300:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8003304:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003306:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003308:	2b00      	cmp	r3, #0
 800330a:	f000 8130 	beq.w	800356e <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800330e:	697b      	ldr	r3, [r7, #20]
 8003310:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003312:	4a94      	ldr	r2, [pc, #592]	@ (8003564 <UART_SetConfig+0x5c4>)
 8003314:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003318:	461a      	mov	r2, r3
 800331a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800331c:	fbb3 f3f2 	udiv	r3, r3, r2
 8003320:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003322:	697b      	ldr	r3, [r7, #20]
 8003324:	685a      	ldr	r2, [r3, #4]
 8003326:	4613      	mov	r3, r2
 8003328:	005b      	lsls	r3, r3, #1
 800332a:	4413      	add	r3, r2
 800332c:	69ba      	ldr	r2, [r7, #24]
 800332e:	429a      	cmp	r2, r3
 8003330:	d305      	bcc.n	800333e <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8003332:	697b      	ldr	r3, [r7, #20]
 8003334:	685b      	ldr	r3, [r3, #4]
 8003336:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003338:	69ba      	ldr	r2, [r7, #24]
 800333a:	429a      	cmp	r2, r3
 800333c:	d903      	bls.n	8003346 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800333e:	2301      	movs	r3, #1
 8003340:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8003344:	e113      	b.n	800356e <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003346:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003348:	2200      	movs	r2, #0
 800334a:	60bb      	str	r3, [r7, #8]
 800334c:	60fa      	str	r2, [r7, #12]
 800334e:	697b      	ldr	r3, [r7, #20]
 8003350:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003352:	4a84      	ldr	r2, [pc, #528]	@ (8003564 <UART_SetConfig+0x5c4>)
 8003354:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003358:	b29b      	uxth	r3, r3
 800335a:	2200      	movs	r2, #0
 800335c:	603b      	str	r3, [r7, #0]
 800335e:	607a      	str	r2, [r7, #4]
 8003360:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003364:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003368:	f7fc ff5e 	bl	8000228 <__aeabi_uldivmod>
 800336c:	4602      	mov	r2, r0
 800336e:	460b      	mov	r3, r1
 8003370:	4610      	mov	r0, r2
 8003372:	4619      	mov	r1, r3
 8003374:	f04f 0200 	mov.w	r2, #0
 8003378:	f04f 0300 	mov.w	r3, #0
 800337c:	020b      	lsls	r3, r1, #8
 800337e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8003382:	0202      	lsls	r2, r0, #8
 8003384:	6979      	ldr	r1, [r7, #20]
 8003386:	6849      	ldr	r1, [r1, #4]
 8003388:	0849      	lsrs	r1, r1, #1
 800338a:	2000      	movs	r0, #0
 800338c:	460c      	mov	r4, r1
 800338e:	4605      	mov	r5, r0
 8003390:	eb12 0804 	adds.w	r8, r2, r4
 8003394:	eb43 0905 	adc.w	r9, r3, r5
 8003398:	697b      	ldr	r3, [r7, #20]
 800339a:	685b      	ldr	r3, [r3, #4]
 800339c:	2200      	movs	r2, #0
 800339e:	469a      	mov	sl, r3
 80033a0:	4693      	mov	fp, r2
 80033a2:	4652      	mov	r2, sl
 80033a4:	465b      	mov	r3, fp
 80033a6:	4640      	mov	r0, r8
 80033a8:	4649      	mov	r1, r9
 80033aa:	f7fc ff3d 	bl	8000228 <__aeabi_uldivmod>
 80033ae:	4602      	mov	r2, r0
 80033b0:	460b      	mov	r3, r1
 80033b2:	4613      	mov	r3, r2
 80033b4:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80033b6:	6a3b      	ldr	r3, [r7, #32]
 80033b8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80033bc:	d308      	bcc.n	80033d0 <UART_SetConfig+0x430>
 80033be:	6a3b      	ldr	r3, [r7, #32]
 80033c0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80033c4:	d204      	bcs.n	80033d0 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 80033c6:	697b      	ldr	r3, [r7, #20]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	6a3a      	ldr	r2, [r7, #32]
 80033cc:	60da      	str	r2, [r3, #12]
 80033ce:	e0ce      	b.n	800356e <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 80033d0:	2301      	movs	r3, #1
 80033d2:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80033d6:	e0ca      	b.n	800356e <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80033d8:	697b      	ldr	r3, [r7, #20]
 80033da:	69db      	ldr	r3, [r3, #28]
 80033dc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80033e0:	d166      	bne.n	80034b0 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 80033e2:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80033e6:	2b08      	cmp	r3, #8
 80033e8:	d827      	bhi.n	800343a <UART_SetConfig+0x49a>
 80033ea:	a201      	add	r2, pc, #4	@ (adr r2, 80033f0 <UART_SetConfig+0x450>)
 80033ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033f0:	08003415 	.word	0x08003415
 80033f4:	0800341d 	.word	0x0800341d
 80033f8:	08003425 	.word	0x08003425
 80033fc:	0800343b 	.word	0x0800343b
 8003400:	0800342b 	.word	0x0800342b
 8003404:	0800343b 	.word	0x0800343b
 8003408:	0800343b 	.word	0x0800343b
 800340c:	0800343b 	.word	0x0800343b
 8003410:	08003433 	.word	0x08003433
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003414:	f7fe fed6 	bl	80021c4 <HAL_RCC_GetPCLK1Freq>
 8003418:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800341a:	e014      	b.n	8003446 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800341c:	f7fe fee8 	bl	80021f0 <HAL_RCC_GetPCLK2Freq>
 8003420:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003422:	e010      	b.n	8003446 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003424:	4b4e      	ldr	r3, [pc, #312]	@ (8003560 <UART_SetConfig+0x5c0>)
 8003426:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003428:	e00d      	b.n	8003446 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800342a:	f7fe fe5d 	bl	80020e8 <HAL_RCC_GetSysClockFreq>
 800342e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003430:	e009      	b.n	8003446 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003432:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003436:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003438:	e005      	b.n	8003446 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800343a:	2300      	movs	r3, #0
 800343c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800343e:	2301      	movs	r3, #1
 8003440:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8003444:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003446:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003448:	2b00      	cmp	r3, #0
 800344a:	f000 8090 	beq.w	800356e <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800344e:	697b      	ldr	r3, [r7, #20]
 8003450:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003452:	4a44      	ldr	r2, [pc, #272]	@ (8003564 <UART_SetConfig+0x5c4>)
 8003454:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003458:	461a      	mov	r2, r3
 800345a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800345c:	fbb3 f3f2 	udiv	r3, r3, r2
 8003460:	005a      	lsls	r2, r3, #1
 8003462:	697b      	ldr	r3, [r7, #20]
 8003464:	685b      	ldr	r3, [r3, #4]
 8003466:	085b      	lsrs	r3, r3, #1
 8003468:	441a      	add	r2, r3
 800346a:	697b      	ldr	r3, [r7, #20]
 800346c:	685b      	ldr	r3, [r3, #4]
 800346e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003472:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003474:	6a3b      	ldr	r3, [r7, #32]
 8003476:	2b0f      	cmp	r3, #15
 8003478:	d916      	bls.n	80034a8 <UART_SetConfig+0x508>
 800347a:	6a3b      	ldr	r3, [r7, #32]
 800347c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003480:	d212      	bcs.n	80034a8 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003482:	6a3b      	ldr	r3, [r7, #32]
 8003484:	b29b      	uxth	r3, r3
 8003486:	f023 030f 	bic.w	r3, r3, #15
 800348a:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800348c:	6a3b      	ldr	r3, [r7, #32]
 800348e:	085b      	lsrs	r3, r3, #1
 8003490:	b29b      	uxth	r3, r3
 8003492:	f003 0307 	and.w	r3, r3, #7
 8003496:	b29a      	uxth	r2, r3
 8003498:	8bfb      	ldrh	r3, [r7, #30]
 800349a:	4313      	orrs	r3, r2
 800349c:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800349e:	697b      	ldr	r3, [r7, #20]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	8bfa      	ldrh	r2, [r7, #30]
 80034a4:	60da      	str	r2, [r3, #12]
 80034a6:	e062      	b.n	800356e <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 80034a8:	2301      	movs	r3, #1
 80034aa:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80034ae:	e05e      	b.n	800356e <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 80034b0:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80034b4:	2b08      	cmp	r3, #8
 80034b6:	d828      	bhi.n	800350a <UART_SetConfig+0x56a>
 80034b8:	a201      	add	r2, pc, #4	@ (adr r2, 80034c0 <UART_SetConfig+0x520>)
 80034ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034be:	bf00      	nop
 80034c0:	080034e5 	.word	0x080034e5
 80034c4:	080034ed 	.word	0x080034ed
 80034c8:	080034f5 	.word	0x080034f5
 80034cc:	0800350b 	.word	0x0800350b
 80034d0:	080034fb 	.word	0x080034fb
 80034d4:	0800350b 	.word	0x0800350b
 80034d8:	0800350b 	.word	0x0800350b
 80034dc:	0800350b 	.word	0x0800350b
 80034e0:	08003503 	.word	0x08003503
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80034e4:	f7fe fe6e 	bl	80021c4 <HAL_RCC_GetPCLK1Freq>
 80034e8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80034ea:	e014      	b.n	8003516 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80034ec:	f7fe fe80 	bl	80021f0 <HAL_RCC_GetPCLK2Freq>
 80034f0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80034f2:	e010      	b.n	8003516 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80034f4:	4b1a      	ldr	r3, [pc, #104]	@ (8003560 <UART_SetConfig+0x5c0>)
 80034f6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80034f8:	e00d      	b.n	8003516 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80034fa:	f7fe fdf5 	bl	80020e8 <HAL_RCC_GetSysClockFreq>
 80034fe:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003500:	e009      	b.n	8003516 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003502:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003506:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003508:	e005      	b.n	8003516 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800350a:	2300      	movs	r3, #0
 800350c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800350e:	2301      	movs	r3, #1
 8003510:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8003514:	bf00      	nop
    }

    if (pclk != 0U)
 8003516:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003518:	2b00      	cmp	r3, #0
 800351a:	d028      	beq.n	800356e <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800351c:	697b      	ldr	r3, [r7, #20]
 800351e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003520:	4a10      	ldr	r2, [pc, #64]	@ (8003564 <UART_SetConfig+0x5c4>)
 8003522:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003526:	461a      	mov	r2, r3
 8003528:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800352a:	fbb3 f2f2 	udiv	r2, r3, r2
 800352e:	697b      	ldr	r3, [r7, #20]
 8003530:	685b      	ldr	r3, [r3, #4]
 8003532:	085b      	lsrs	r3, r3, #1
 8003534:	441a      	add	r2, r3
 8003536:	697b      	ldr	r3, [r7, #20]
 8003538:	685b      	ldr	r3, [r3, #4]
 800353a:	fbb2 f3f3 	udiv	r3, r2, r3
 800353e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003540:	6a3b      	ldr	r3, [r7, #32]
 8003542:	2b0f      	cmp	r3, #15
 8003544:	d910      	bls.n	8003568 <UART_SetConfig+0x5c8>
 8003546:	6a3b      	ldr	r3, [r7, #32]
 8003548:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800354c:	d20c      	bcs.n	8003568 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800354e:	6a3b      	ldr	r3, [r7, #32]
 8003550:	b29a      	uxth	r2, r3
 8003552:	697b      	ldr	r3, [r7, #20]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	60da      	str	r2, [r3, #12]
 8003558:	e009      	b.n	800356e <UART_SetConfig+0x5ce>
 800355a:	bf00      	nop
 800355c:	40008000 	.word	0x40008000
 8003560:	00f42400 	.word	0x00f42400
 8003564:	08006598 	.word	0x08006598
      }
      else
      {
        ret = HAL_ERROR;
 8003568:	2301      	movs	r3, #1
 800356a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800356e:	697b      	ldr	r3, [r7, #20]
 8003570:	2201      	movs	r2, #1
 8003572:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8003576:	697b      	ldr	r3, [r7, #20]
 8003578:	2201      	movs	r2, #1
 800357a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800357e:	697b      	ldr	r3, [r7, #20]
 8003580:	2200      	movs	r2, #0
 8003582:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8003584:	697b      	ldr	r3, [r7, #20]
 8003586:	2200      	movs	r2, #0
 8003588:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800358a:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800358e:	4618      	mov	r0, r3
 8003590:	3730      	adds	r7, #48	@ 0x30
 8003592:	46bd      	mov	sp, r7
 8003594:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08003598 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003598:	b480      	push	{r7}
 800359a:	b083      	sub	sp, #12
 800359c:	af00      	add	r7, sp, #0
 800359e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035a4:	f003 0308 	and.w	r3, r3, #8
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d00a      	beq.n	80035c2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	685b      	ldr	r3, [r3, #4]
 80035b2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	430a      	orrs	r2, r1
 80035c0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035c6:	f003 0301 	and.w	r3, r3, #1
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d00a      	beq.n	80035e4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	685b      	ldr	r3, [r3, #4]
 80035d4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	430a      	orrs	r2, r1
 80035e2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035e8:	f003 0302 	and.w	r3, r3, #2
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d00a      	beq.n	8003606 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	685b      	ldr	r3, [r3, #4]
 80035f6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	430a      	orrs	r2, r1
 8003604:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800360a:	f003 0304 	and.w	r3, r3, #4
 800360e:	2b00      	cmp	r3, #0
 8003610:	d00a      	beq.n	8003628 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	685b      	ldr	r3, [r3, #4]
 8003618:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	430a      	orrs	r2, r1
 8003626:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800362c:	f003 0310 	and.w	r3, r3, #16
 8003630:	2b00      	cmp	r3, #0
 8003632:	d00a      	beq.n	800364a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	689b      	ldr	r3, [r3, #8]
 800363a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	430a      	orrs	r2, r1
 8003648:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800364e:	f003 0320 	and.w	r3, r3, #32
 8003652:	2b00      	cmp	r3, #0
 8003654:	d00a      	beq.n	800366c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	689b      	ldr	r3, [r3, #8]
 800365c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	430a      	orrs	r2, r1
 800366a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003670:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003674:	2b00      	cmp	r3, #0
 8003676:	d01a      	beq.n	80036ae <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	685b      	ldr	r3, [r3, #4]
 800367e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	430a      	orrs	r2, r1
 800368c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003692:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003696:	d10a      	bne.n	80036ae <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	685b      	ldr	r3, [r3, #4]
 800369e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	430a      	orrs	r2, r1
 80036ac:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d00a      	beq.n	80036d0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	685b      	ldr	r3, [r3, #4]
 80036c0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	430a      	orrs	r2, r1
 80036ce:	605a      	str	r2, [r3, #4]
  }
}
 80036d0:	bf00      	nop
 80036d2:	370c      	adds	r7, #12
 80036d4:	46bd      	mov	sp, r7
 80036d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036da:	4770      	bx	lr

080036dc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80036dc:	b580      	push	{r7, lr}
 80036de:	b098      	sub	sp, #96	@ 0x60
 80036e0:	af02      	add	r7, sp, #8
 80036e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	2200      	movs	r2, #0
 80036e8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80036ec:	f7fd fa3a 	bl	8000b64 <HAL_GetTick>
 80036f0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f003 0308 	and.w	r3, r3, #8
 80036fc:	2b08      	cmp	r3, #8
 80036fe:	d12f      	bne.n	8003760 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003700:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003704:	9300      	str	r3, [sp, #0]
 8003706:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003708:	2200      	movs	r2, #0
 800370a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800370e:	6878      	ldr	r0, [r7, #4]
 8003710:	f000 f88e 	bl	8003830 <UART_WaitOnFlagUntilTimeout>
 8003714:	4603      	mov	r3, r0
 8003716:	2b00      	cmp	r3, #0
 8003718:	d022      	beq.n	8003760 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003720:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003722:	e853 3f00 	ldrex	r3, [r3]
 8003726:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003728:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800372a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800372e:	653b      	str	r3, [r7, #80]	@ 0x50
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	461a      	mov	r2, r3
 8003736:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003738:	647b      	str	r3, [r7, #68]	@ 0x44
 800373a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800373c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800373e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003740:	e841 2300 	strex	r3, r2, [r1]
 8003744:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003746:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003748:	2b00      	cmp	r3, #0
 800374a:	d1e6      	bne.n	800371a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	2220      	movs	r2, #32
 8003750:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	2200      	movs	r2, #0
 8003758:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800375c:	2303      	movs	r3, #3
 800375e:	e063      	b.n	8003828 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f003 0304 	and.w	r3, r3, #4
 800376a:	2b04      	cmp	r3, #4
 800376c:	d149      	bne.n	8003802 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800376e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003772:	9300      	str	r3, [sp, #0]
 8003774:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003776:	2200      	movs	r2, #0
 8003778:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800377c:	6878      	ldr	r0, [r7, #4]
 800377e:	f000 f857 	bl	8003830 <UART_WaitOnFlagUntilTimeout>
 8003782:	4603      	mov	r3, r0
 8003784:	2b00      	cmp	r3, #0
 8003786:	d03c      	beq.n	8003802 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800378e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003790:	e853 3f00 	ldrex	r3, [r3]
 8003794:	623b      	str	r3, [r7, #32]
   return(result);
 8003796:	6a3b      	ldr	r3, [r7, #32]
 8003798:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800379c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	461a      	mov	r2, r3
 80037a4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80037a6:	633b      	str	r3, [r7, #48]	@ 0x30
 80037a8:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037aa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80037ac:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80037ae:	e841 2300 	strex	r3, r2, [r1]
 80037b2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80037b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d1e6      	bne.n	8003788 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	3308      	adds	r3, #8
 80037c0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037c2:	693b      	ldr	r3, [r7, #16]
 80037c4:	e853 3f00 	ldrex	r3, [r3]
 80037c8:	60fb      	str	r3, [r7, #12]
   return(result);
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	f023 0301 	bic.w	r3, r3, #1
 80037d0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	3308      	adds	r3, #8
 80037d8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80037da:	61fa      	str	r2, [r7, #28]
 80037dc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037de:	69b9      	ldr	r1, [r7, #24]
 80037e0:	69fa      	ldr	r2, [r7, #28]
 80037e2:	e841 2300 	strex	r3, r2, [r1]
 80037e6:	617b      	str	r3, [r7, #20]
   return(result);
 80037e8:	697b      	ldr	r3, [r7, #20]
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d1e5      	bne.n	80037ba <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	2220      	movs	r2, #32
 80037f2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	2200      	movs	r2, #0
 80037fa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80037fe:	2303      	movs	r3, #3
 8003800:	e012      	b.n	8003828 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	2220      	movs	r2, #32
 8003806:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	2220      	movs	r2, #32
 800380e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	2200      	movs	r2, #0
 8003816:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	2200      	movs	r2, #0
 800381c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	2200      	movs	r2, #0
 8003822:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8003826:	2300      	movs	r3, #0
}
 8003828:	4618      	mov	r0, r3
 800382a:	3758      	adds	r7, #88	@ 0x58
 800382c:	46bd      	mov	sp, r7
 800382e:	bd80      	pop	{r7, pc}

08003830 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003830:	b580      	push	{r7, lr}
 8003832:	b084      	sub	sp, #16
 8003834:	af00      	add	r7, sp, #0
 8003836:	60f8      	str	r0, [r7, #12]
 8003838:	60b9      	str	r1, [r7, #8]
 800383a:	603b      	str	r3, [r7, #0]
 800383c:	4613      	mov	r3, r2
 800383e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003840:	e04f      	b.n	80038e2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003842:	69bb      	ldr	r3, [r7, #24]
 8003844:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003848:	d04b      	beq.n	80038e2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800384a:	f7fd f98b 	bl	8000b64 <HAL_GetTick>
 800384e:	4602      	mov	r2, r0
 8003850:	683b      	ldr	r3, [r7, #0]
 8003852:	1ad3      	subs	r3, r2, r3
 8003854:	69ba      	ldr	r2, [r7, #24]
 8003856:	429a      	cmp	r2, r3
 8003858:	d302      	bcc.n	8003860 <UART_WaitOnFlagUntilTimeout+0x30>
 800385a:	69bb      	ldr	r3, [r7, #24]
 800385c:	2b00      	cmp	r3, #0
 800385e:	d101      	bne.n	8003864 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003860:	2303      	movs	r3, #3
 8003862:	e04e      	b.n	8003902 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f003 0304 	and.w	r3, r3, #4
 800386e:	2b00      	cmp	r3, #0
 8003870:	d037      	beq.n	80038e2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8003872:	68bb      	ldr	r3, [r7, #8]
 8003874:	2b80      	cmp	r3, #128	@ 0x80
 8003876:	d034      	beq.n	80038e2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8003878:	68bb      	ldr	r3, [r7, #8]
 800387a:	2b40      	cmp	r3, #64	@ 0x40
 800387c:	d031      	beq.n	80038e2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	69db      	ldr	r3, [r3, #28]
 8003884:	f003 0308 	and.w	r3, r3, #8
 8003888:	2b08      	cmp	r3, #8
 800388a:	d110      	bne.n	80038ae <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	2208      	movs	r2, #8
 8003892:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003894:	68f8      	ldr	r0, [r7, #12]
 8003896:	f000 f838 	bl	800390a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	2208      	movs	r2, #8
 800389e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	2200      	movs	r2, #0
 80038a6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80038aa:	2301      	movs	r3, #1
 80038ac:	e029      	b.n	8003902 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	69db      	ldr	r3, [r3, #28]
 80038b4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80038b8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80038bc:	d111      	bne.n	80038e2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80038c6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80038c8:	68f8      	ldr	r0, [r7, #12]
 80038ca:	f000 f81e 	bl	800390a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	2220      	movs	r2, #32
 80038d2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	2200      	movs	r2, #0
 80038da:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80038de:	2303      	movs	r3, #3
 80038e0:	e00f      	b.n	8003902 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	69da      	ldr	r2, [r3, #28]
 80038e8:	68bb      	ldr	r3, [r7, #8]
 80038ea:	4013      	ands	r3, r2
 80038ec:	68ba      	ldr	r2, [r7, #8]
 80038ee:	429a      	cmp	r2, r3
 80038f0:	bf0c      	ite	eq
 80038f2:	2301      	moveq	r3, #1
 80038f4:	2300      	movne	r3, #0
 80038f6:	b2db      	uxtb	r3, r3
 80038f8:	461a      	mov	r2, r3
 80038fa:	79fb      	ldrb	r3, [r7, #7]
 80038fc:	429a      	cmp	r2, r3
 80038fe:	d0a0      	beq.n	8003842 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003900:	2300      	movs	r3, #0
}
 8003902:	4618      	mov	r0, r3
 8003904:	3710      	adds	r7, #16
 8003906:	46bd      	mov	sp, r7
 8003908:	bd80      	pop	{r7, pc}

0800390a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800390a:	b480      	push	{r7}
 800390c:	b095      	sub	sp, #84	@ 0x54
 800390e:	af00      	add	r7, sp, #0
 8003910:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003918:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800391a:	e853 3f00 	ldrex	r3, [r3]
 800391e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003920:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003922:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003926:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	461a      	mov	r2, r3
 800392e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003930:	643b      	str	r3, [r7, #64]	@ 0x40
 8003932:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003934:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003936:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003938:	e841 2300 	strex	r3, r2, [r1]
 800393c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800393e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003940:	2b00      	cmp	r3, #0
 8003942:	d1e6      	bne.n	8003912 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	3308      	adds	r3, #8
 800394a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800394c:	6a3b      	ldr	r3, [r7, #32]
 800394e:	e853 3f00 	ldrex	r3, [r3]
 8003952:	61fb      	str	r3, [r7, #28]
   return(result);
 8003954:	69fb      	ldr	r3, [r7, #28]
 8003956:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800395a:	f023 0301 	bic.w	r3, r3, #1
 800395e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	3308      	adds	r3, #8
 8003966:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003968:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800396a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800396c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800396e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003970:	e841 2300 	strex	r3, r2, [r1]
 8003974:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003976:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003978:	2b00      	cmp	r3, #0
 800397a:	d1e3      	bne.n	8003944 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003980:	2b01      	cmp	r3, #1
 8003982:	d118      	bne.n	80039b6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	e853 3f00 	ldrex	r3, [r3]
 8003990:	60bb      	str	r3, [r7, #8]
   return(result);
 8003992:	68bb      	ldr	r3, [r7, #8]
 8003994:	f023 0310 	bic.w	r3, r3, #16
 8003998:	647b      	str	r3, [r7, #68]	@ 0x44
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	461a      	mov	r2, r3
 80039a0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80039a2:	61bb      	str	r3, [r7, #24]
 80039a4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039a6:	6979      	ldr	r1, [r7, #20]
 80039a8:	69ba      	ldr	r2, [r7, #24]
 80039aa:	e841 2300 	strex	r3, r2, [r1]
 80039ae:	613b      	str	r3, [r7, #16]
   return(result);
 80039b0:	693b      	ldr	r3, [r7, #16]
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d1e6      	bne.n	8003984 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	2220      	movs	r2, #32
 80039ba:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	2200      	movs	r2, #0
 80039c2:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	2200      	movs	r2, #0
 80039c8:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80039ca:	bf00      	nop
 80039cc:	3754      	adds	r7, #84	@ 0x54
 80039ce:	46bd      	mov	sp, r7
 80039d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d4:	4770      	bx	lr

080039d6 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80039d6:	b580      	push	{r7, lr}
 80039d8:	b084      	sub	sp, #16
 80039da:	af00      	add	r7, sp, #0
 80039dc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039e2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	2200      	movs	r2, #0
 80039e8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80039ec:	68f8      	ldr	r0, [r7, #12]
 80039ee:	f7ff fac1 	bl	8002f74 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80039f2:	bf00      	nop
 80039f4:	3710      	adds	r7, #16
 80039f6:	46bd      	mov	sp, r7
 80039f8:	bd80      	pop	{r7, pc}

080039fa <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80039fa:	b580      	push	{r7, lr}
 80039fc:	b088      	sub	sp, #32
 80039fe:	af00      	add	r7, sp, #0
 8003a00:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	e853 3f00 	ldrex	r3, [r3]
 8003a0e:	60bb      	str	r3, [r7, #8]
   return(result);
 8003a10:	68bb      	ldr	r3, [r7, #8]
 8003a12:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003a16:	61fb      	str	r3, [r7, #28]
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	461a      	mov	r2, r3
 8003a1e:	69fb      	ldr	r3, [r7, #28]
 8003a20:	61bb      	str	r3, [r7, #24]
 8003a22:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a24:	6979      	ldr	r1, [r7, #20]
 8003a26:	69ba      	ldr	r2, [r7, #24]
 8003a28:	e841 2300 	strex	r3, r2, [r1]
 8003a2c:	613b      	str	r3, [r7, #16]
   return(result);
 8003a2e:	693b      	ldr	r3, [r7, #16]
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d1e6      	bne.n	8003a02 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	2220      	movs	r2, #32
 8003a38:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	2200      	movs	r2, #0
 8003a40:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003a42:	6878      	ldr	r0, [r7, #4]
 8003a44:	f7ff fa8c 	bl	8002f60 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003a48:	bf00      	nop
 8003a4a:	3720      	adds	r7, #32
 8003a4c:	46bd      	mov	sp, r7
 8003a4e:	bd80      	pop	{r7, pc}

08003a50 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8003a50:	b480      	push	{r7}
 8003a52:	b083      	sub	sp, #12
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8003a58:	bf00      	nop
 8003a5a:	370c      	adds	r7, #12
 8003a5c:	46bd      	mov	sp, r7
 8003a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a62:	4770      	bx	lr

08003a64 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8003a64:	b480      	push	{r7}
 8003a66:	b083      	sub	sp, #12
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8003a6c:	bf00      	nop
 8003a6e:	370c      	adds	r7, #12
 8003a70:	46bd      	mov	sp, r7
 8003a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a76:	4770      	bx	lr

08003a78 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8003a78:	b480      	push	{r7}
 8003a7a:	b083      	sub	sp, #12
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8003a80:	bf00      	nop
 8003a82:	370c      	adds	r7, #12
 8003a84:	46bd      	mov	sp, r7
 8003a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a8a:	4770      	bx	lr

08003a8c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8003a8c:	b480      	push	{r7}
 8003a8e:	b085      	sub	sp, #20
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8003a9a:	2b01      	cmp	r3, #1
 8003a9c:	d101      	bne.n	8003aa2 <HAL_UARTEx_DisableFifoMode+0x16>
 8003a9e:	2302      	movs	r3, #2
 8003aa0:	e027      	b.n	8003af2 <HAL_UARTEx_DisableFifoMode+0x66>
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	2201      	movs	r2, #1
 8003aa6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	2224      	movs	r2, #36	@ 0x24
 8003aae:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	681a      	ldr	r2, [r3, #0]
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f022 0201 	bic.w	r2, r2, #1
 8003ac8:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8003ad0:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	2200      	movs	r2, #0
 8003ad6:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	68fa      	ldr	r2, [r7, #12]
 8003ade:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	2220      	movs	r2, #32
 8003ae4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	2200      	movs	r2, #0
 8003aec:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8003af0:	2300      	movs	r3, #0
}
 8003af2:	4618      	mov	r0, r3
 8003af4:	3714      	adds	r7, #20
 8003af6:	46bd      	mov	sp, r7
 8003af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003afc:	4770      	bx	lr

08003afe <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003afe:	b580      	push	{r7, lr}
 8003b00:	b084      	sub	sp, #16
 8003b02:	af00      	add	r7, sp, #0
 8003b04:	6078      	str	r0, [r7, #4]
 8003b06:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8003b0e:	2b01      	cmp	r3, #1
 8003b10:	d101      	bne.n	8003b16 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8003b12:	2302      	movs	r3, #2
 8003b14:	e02d      	b.n	8003b72 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	2201      	movs	r2, #1
 8003b1a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	2224      	movs	r2, #36	@ 0x24
 8003b22:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	681a      	ldr	r2, [r3, #0]
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f022 0201 	bic.w	r2, r2, #1
 8003b3c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	689b      	ldr	r3, [r3, #8]
 8003b44:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	683a      	ldr	r2, [r7, #0]
 8003b4e:	430a      	orrs	r2, r1
 8003b50:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003b52:	6878      	ldr	r0, [r7, #4]
 8003b54:	f000 f850 	bl	8003bf8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	68fa      	ldr	r2, [r7, #12]
 8003b5e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	2220      	movs	r2, #32
 8003b64:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	2200      	movs	r2, #0
 8003b6c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8003b70:	2300      	movs	r3, #0
}
 8003b72:	4618      	mov	r0, r3
 8003b74:	3710      	adds	r7, #16
 8003b76:	46bd      	mov	sp, r7
 8003b78:	bd80      	pop	{r7, pc}

08003b7a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003b7a:	b580      	push	{r7, lr}
 8003b7c:	b084      	sub	sp, #16
 8003b7e:	af00      	add	r7, sp, #0
 8003b80:	6078      	str	r0, [r7, #4]
 8003b82:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8003b8a:	2b01      	cmp	r3, #1
 8003b8c:	d101      	bne.n	8003b92 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8003b8e:	2302      	movs	r3, #2
 8003b90:	e02d      	b.n	8003bee <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	2201      	movs	r2, #1
 8003b96:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	2224      	movs	r2, #36	@ 0x24
 8003b9e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	681a      	ldr	r2, [r3, #0]
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	f022 0201 	bic.w	r2, r2, #1
 8003bb8:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	689b      	ldr	r3, [r3, #8]
 8003bc0:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	683a      	ldr	r2, [r7, #0]
 8003bca:	430a      	orrs	r2, r1
 8003bcc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003bce:	6878      	ldr	r0, [r7, #4]
 8003bd0:	f000 f812 	bl	8003bf8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	68fa      	ldr	r2, [r7, #12]
 8003bda:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	2220      	movs	r2, #32
 8003be0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	2200      	movs	r2, #0
 8003be8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8003bec:	2300      	movs	r3, #0
}
 8003bee:	4618      	mov	r0, r3
 8003bf0:	3710      	adds	r7, #16
 8003bf2:	46bd      	mov	sp, r7
 8003bf4:	bd80      	pop	{r7, pc}
	...

08003bf8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8003bf8:	b480      	push	{r7}
 8003bfa:	b085      	sub	sp, #20
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d108      	bne.n	8003c1a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	2201      	movs	r2, #1
 8003c0c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	2201      	movs	r2, #1
 8003c14:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8003c18:	e031      	b.n	8003c7e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8003c1a:	2308      	movs	r3, #8
 8003c1c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8003c1e:	2308      	movs	r3, #8
 8003c20:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	689b      	ldr	r3, [r3, #8]
 8003c28:	0e5b      	lsrs	r3, r3, #25
 8003c2a:	b2db      	uxtb	r3, r3
 8003c2c:	f003 0307 	and.w	r3, r3, #7
 8003c30:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	689b      	ldr	r3, [r3, #8]
 8003c38:	0f5b      	lsrs	r3, r3, #29
 8003c3a:	b2db      	uxtb	r3, r3
 8003c3c:	f003 0307 	and.w	r3, r3, #7
 8003c40:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003c42:	7bbb      	ldrb	r3, [r7, #14]
 8003c44:	7b3a      	ldrb	r2, [r7, #12]
 8003c46:	4911      	ldr	r1, [pc, #68]	@ (8003c8c <UARTEx_SetNbDataToProcess+0x94>)
 8003c48:	5c8a      	ldrb	r2, [r1, r2]
 8003c4a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8003c4e:	7b3a      	ldrb	r2, [r7, #12]
 8003c50:	490f      	ldr	r1, [pc, #60]	@ (8003c90 <UARTEx_SetNbDataToProcess+0x98>)
 8003c52:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003c54:	fb93 f3f2 	sdiv	r3, r3, r2
 8003c58:	b29a      	uxth	r2, r3
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003c60:	7bfb      	ldrb	r3, [r7, #15]
 8003c62:	7b7a      	ldrb	r2, [r7, #13]
 8003c64:	4909      	ldr	r1, [pc, #36]	@ (8003c8c <UARTEx_SetNbDataToProcess+0x94>)
 8003c66:	5c8a      	ldrb	r2, [r1, r2]
 8003c68:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8003c6c:	7b7a      	ldrb	r2, [r7, #13]
 8003c6e:	4908      	ldr	r1, [pc, #32]	@ (8003c90 <UARTEx_SetNbDataToProcess+0x98>)
 8003c70:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003c72:	fb93 f3f2 	sdiv	r3, r3, r2
 8003c76:	b29a      	uxth	r2, r3
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8003c7e:	bf00      	nop
 8003c80:	3714      	adds	r7, #20
 8003c82:	46bd      	mov	sp, r7
 8003c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c88:	4770      	bx	lr
 8003c8a:	bf00      	nop
 8003c8c:	080065b0 	.word	0x080065b0
 8003c90:	080065b8 	.word	0x080065b8

08003c94 <MX_FATFS_Init>:
  * @brief  FatFs initialization
  * @param  None
  * @retval Initialization result
  */
int32_t MX_FATFS_Init(void)
{
 8003c94:	b580      	push	{r7, lr}
 8003c96:	af00      	add	r7, sp, #0
  else
  {
    Appli_state = APPLICATION_INIT;
    return APP_OK;
  }*/
	retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8003c98:	4905      	ldr	r1, [pc, #20]	@ (8003cb0 <MX_FATFS_Init+0x1c>)
 8003c9a:	4806      	ldr	r0, [pc, #24]	@ (8003cb4 <MX_FATFS_Init+0x20>)
 8003c9c:	f7fc fc5a 	bl	8000554 <FATFS_LinkDriver>
 8003ca0:	4603      	mov	r3, r0
 8003ca2:	461a      	mov	r2, r3
 8003ca4:	4b04      	ldr	r3, [pc, #16]	@ (8003cb8 <MX_FATFS_Init+0x24>)
 8003ca6:	701a      	strb	r2, [r3, #0]

	  return APP_OK;
 8003ca8:	2300      	movs	r3, #0
  /* USER CODE END FATFS_Init */
}
 8003caa:	4618      	mov	r0, r3
 8003cac:	bd80      	pop	{r7, pc}
 8003cae:	bf00      	nop
 8003cb0:	20000104 	.word	0x20000104
 8003cb4:	20000030 	.word	0x20000030
 8003cb8:	20000108 	.word	0x20000108

08003cbc <get_fattime>:
  * @brief  Gets Time from RTC (generated when FS_NORTC==0; see ff.c)
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8003cbc:	b480      	push	{r7}
 8003cbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8003cc0:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8003cc2:	4618      	mov	r0, r3
 8003cc4:	46bd      	mov	sp, r7
 8003cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cca:	4770      	bx	lr

08003ccc <UART_Print>:
/* Disk status */
static volatile DSTATUS Stat = STA_NOINIT;

extern UART_HandleTypeDef huart1;
static void UART_Print(const char *msg)
{
 8003ccc:	b580      	push	{r7, lr}
 8003cce:	b082      	sub	sp, #8
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8003cd4:	6878      	ldr	r0, [r7, #4]
 8003cd6:	f7fc fa9f 	bl	8000218 <strlen>
 8003cda:	4603      	mov	r3, r0
 8003cdc:	b29a      	uxth	r2, r3
 8003cde:	f04f 33ff 	mov.w	r3, #4294967295
 8003ce2:	6879      	ldr	r1, [r7, #4]
 8003ce4:	4803      	ldr	r0, [pc, #12]	@ (8003cf4 <UART_Print+0x28>)
 8003ce6:	f7fe fd6b 	bl	80027c0 <HAL_UART_Transmit>
}
 8003cea:	bf00      	nop
 8003cec:	3708      	adds	r7, #8
 8003cee:	46bd      	mov	sp, r7
 8003cf0:	bd80      	pop	{r7, pc}
 8003cf2:	bf00      	nop
 8003cf4:	2000006c 	.word	0x2000006c

08003cf8 <USER_initialize>:
  * @brief  Initializes a Drive
  * @param  pdrv: Physical drive number (0..)
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize(BYTE pdrv)
{
 8003cf8:	b580      	push	{r7, lr}
 8003cfa:	b082      	sub	sp, #8
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	4603      	mov	r3, r0
 8003d00:	71fb      	strb	r3, [r7, #7]
    HAL_FLASH_Unlock();
 8003d02:	f7fd f977 	bl	8000ff4 <HAL_FLASH_Unlock>
    Stat = 0;
 8003d06:	4b06      	ldr	r3, [pc, #24]	@ (8003d20 <USER_initialize+0x28>)
 8003d08:	2200      	movs	r2, #0
 8003d0a:	701a      	strb	r2, [r3, #0]
    UART_Print("FlashDisk: Init OK\r\n");
 8003d0c:	4805      	ldr	r0, [pc, #20]	@ (8003d24 <USER_initialize+0x2c>)
 8003d0e:	f7ff ffdd 	bl	8003ccc <UART_Print>
    return Stat;
 8003d12:	4b03      	ldr	r3, [pc, #12]	@ (8003d20 <USER_initialize+0x28>)
 8003d14:	781b      	ldrb	r3, [r3, #0]
 8003d16:	b2db      	uxtb	r3, r3
}
 8003d18:	4618      	mov	r0, r3
 8003d1a:	3708      	adds	r7, #8
 8003d1c:	46bd      	mov	sp, r7
 8003d1e:	bd80      	pop	{r7, pc}
 8003d20:	2000002c 	.word	0x2000002c
 8003d24:	08006524 	.word	0x08006524

08003d28 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8003d28:	b480      	push	{r7}
 8003d2a:	b083      	sub	sp, #12
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	4603      	mov	r3, r0
 8003d30:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
   // Stat = STA_NOINIT;
    return Stat;
 8003d32:	4b04      	ldr	r3, [pc, #16]	@ (8003d44 <USER_status+0x1c>)
 8003d34:	781b      	ldrb	r3, [r3, #0]
 8003d36:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 8003d38:	4618      	mov	r0, r3
 8003d3a:	370c      	adds	r7, #12
 8003d3c:	46bd      	mov	sp, r7
 8003d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d42:	4770      	bx	lr
 8003d44:	2000002c 	.word	0x2000002c

08003d48 <USER_read>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
DRESULT USER_read(BYTE pdrv, BYTE *buff, DWORD sector, UINT count)
{
 8003d48:	b580      	push	{r7, lr}
 8003d4a:	b086      	sub	sp, #24
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	60b9      	str	r1, [r7, #8]
 8003d50:	607a      	str	r2, [r7, #4]
 8003d52:	603b      	str	r3, [r7, #0]
 8003d54:	4603      	mov	r3, r0
 8003d56:	73fb      	strb	r3, [r7, #15]
    if (sector >= SECTOR_COUNT)
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	2b0f      	cmp	r3, #15
 8003d5c:	d901      	bls.n	8003d62 <USER_read+0x1a>
        return RES_PARERR;
 8003d5e:	2304      	movs	r3, #4
 8003d60:	e00d      	b.n	8003d7e <USER_read+0x36>

    uint32_t addr = FLASH_FS_START_ADDR + (sector * FLASH_SECTOR_SIZE);
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8003d68:	3370      	adds	r3, #112	@ 0x70
 8003d6a:	031b      	lsls	r3, r3, #12
 8003d6c:	617b      	str	r3, [r7, #20]
    memcpy(buff, (uint8_t*)addr, count * FLASH_SECTOR_SIZE);
 8003d6e:	6979      	ldr	r1, [r7, #20]
 8003d70:	683b      	ldr	r3, [r7, #0]
 8003d72:	031b      	lsls	r3, r3, #12
 8003d74:	461a      	mov	r2, r3
 8003d76:	68b8      	ldr	r0, [r7, #8]
 8003d78:	f002 fb5a 	bl	8006430 <memcpy>

    return RES_OK;
 8003d7c:	2300      	movs	r3, #0
}
 8003d7e:	4618      	mov	r0, r3
 8003d80:	3718      	adds	r7, #24
 8003d82:	46bd      	mov	sp, r7
 8003d84:	bd80      	pop	{r7, pc}

08003d86 <USER_write>:
  * @param  count: Number of sectors to write (1..128)
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
DRESULT USER_write(BYTE pdrv, const BYTE *buff, DWORD sector, UINT count)
{
 8003d86:	b5b0      	push	{r4, r5, r7, lr}
 8003d88:	b08e      	sub	sp, #56	@ 0x38
 8003d8a:	af00      	add	r7, sp, #0
 8003d8c:	60b9      	str	r1, [r7, #8]
 8003d8e:	607a      	str	r2, [r7, #4]
 8003d90:	603b      	str	r3, [r7, #0]
 8003d92:	4603      	mov	r3, r0
 8003d94:	73fb      	strb	r3, [r7, #15]
    if (sector >= SECTOR_COUNT)
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	2b0f      	cmp	r3, #15
 8003d9a:	d901      	bls.n	8003da0 <USER_write+0x1a>
        return RES_PARERR;
 8003d9c:	2304      	movs	r3, #4
 8003d9e:	e046      	b.n	8003e2e <USER_write+0xa8>

    uint32_t addr = FLASH_FS_START_ADDR + (sector * FLASH_SECTOR_SIZE);
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8003da6:	3370      	adds	r3, #112	@ 0x70
 8003da8:	031b      	lsls	r3, r3, #12
 8003daa:	633b      	str	r3, [r7, #48]	@ 0x30

    // Erase the sector(s) before programming
    FLASH_EraseInitTypeDef eraseInit;
    uint32_t pageError;

    eraseInit.TypeErase = FLASH_TYPEERASE_PAGES;
 8003dac:	2300      	movs	r3, #0
 8003dae:	61fb      	str	r3, [r7, #28]
    eraseInit.Page = (addr - 0x08000000U) / FLASH_PAGE_SIZE;
 8003db0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003db2:	f103 4378 	add.w	r3, r3, #4160749568	@ 0xf8000000
 8003db6:	0adb      	lsrs	r3, r3, #11
 8003db8:	627b      	str	r3, [r7, #36]	@ 0x24
    eraseInit.NbPages = count * (FLASH_SECTOR_SIZE / FLASH_PAGE_SIZE);
 8003dba:	683b      	ldr	r3, [r7, #0]
 8003dbc:	005b      	lsls	r3, r3, #1
 8003dbe:	62bb      	str	r3, [r7, #40]	@ 0x28

    status = HAL_FLASHEx_Erase(&eraseInit, &pageError);
 8003dc0:	f107 0218 	add.w	r2, r7, #24
 8003dc4:	f107 031c 	add.w	r3, r7, #28
 8003dc8:	4611      	mov	r1, r2
 8003dca:	4618      	mov	r0, r3
 8003dcc:	f7fd f9e2 	bl	8001194 <HAL_FLASHEx_Erase>
 8003dd0:	4603      	mov	r3, r0
 8003dd2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status != HAL_OK)
 8003dd6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d001      	beq.n	8003de2 <USER_write+0x5c>
        return RES_ERROR;
 8003dde:	2301      	movs	r3, #1
 8003de0:	e025      	b.n	8003e2e <USER_write+0xa8>

    // Program flash word-by-word
    for (uint32_t i = 0; i < count * FLASH_SECTOR_SIZE; i += 8)
 8003de2:	2300      	movs	r3, #0
 8003de4:	637b      	str	r3, [r7, #52]	@ 0x34
 8003de6:	e01c      	b.n	8003e22 <USER_write+0x9c>
    {
        uint64_t data64;
        memcpy(&data64, buff + i, sizeof(uint64_t));
 8003de8:	68ba      	ldr	r2, [r7, #8]
 8003dea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003dec:	4413      	add	r3, r2
 8003dee:	681c      	ldr	r4, [r3, #0]
 8003df0:	685d      	ldr	r5, [r3, #4]
 8003df2:	4622      	mov	r2, r4
 8003df4:	462b      	mov	r3, r5
 8003df6:	e9c7 2304 	strd	r2, r3, [r7, #16]
        status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, addr + i, data64);
 8003dfa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003dfc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003dfe:	18d1      	adds	r1, r2, r3
 8003e00:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003e04:	2000      	movs	r0, #0
 8003e06:	f7fd f889 	bl	8000f1c <HAL_FLASH_Program>
 8003e0a:	4603      	mov	r3, r0
 8003e0c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
        if (status != HAL_OK)
 8003e10:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d001      	beq.n	8003e1c <USER_write+0x96>
            return RES_ERROR;
 8003e18:	2301      	movs	r3, #1
 8003e1a:	e008      	b.n	8003e2e <USER_write+0xa8>
    for (uint32_t i = 0; i < count * FLASH_SECTOR_SIZE; i += 8)
 8003e1c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003e1e:	3308      	adds	r3, #8
 8003e20:	637b      	str	r3, [r7, #52]	@ 0x34
 8003e22:	683b      	ldr	r3, [r7, #0]
 8003e24:	031b      	lsls	r3, r3, #12
 8003e26:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003e28:	429a      	cmp	r2, r3
 8003e2a:	d3dd      	bcc.n	8003de8 <USER_write+0x62>
    }

    return RES_OK;
 8003e2c:	2300      	movs	r3, #0
}
 8003e2e:	4618      	mov	r0, r3
 8003e30:	3738      	adds	r7, #56	@ 0x38
 8003e32:	46bd      	mov	sp, r7
 8003e34:	bdb0      	pop	{r4, r5, r7, pc}
	...

08003e38 <USER_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT USER_ioctl(BYTE pdrv, BYTE cmd, void *buff)
{
 8003e38:	b480      	push	{r7}
 8003e3a:	b085      	sub	sp, #20
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	4603      	mov	r3, r0
 8003e40:	603a      	str	r2, [r7, #0]
 8003e42:	71fb      	strb	r3, [r7, #7]
 8003e44:	460b      	mov	r3, r1
 8003e46:	71bb      	strb	r3, [r7, #6]
    DRESULT res = RES_OK;
 8003e48:	2300      	movs	r3, #0
 8003e4a:	73fb      	strb	r3, [r7, #15]

    switch (cmd)
 8003e4c:	79bb      	ldrb	r3, [r7, #6]
 8003e4e:	2b03      	cmp	r3, #3
 8003e50:	d820      	bhi.n	8003e94 <USER_ioctl+0x5c>
 8003e52:	a201      	add	r2, pc, #4	@ (adr r2, 8003e58 <USER_ioctl+0x20>)
 8003e54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e58:	08003e69 	.word	0x08003e69
 8003e5c:	08003e6f 	.word	0x08003e6f
 8003e60:	08003e7b 	.word	0x08003e7b
 8003e64:	08003e89 	.word	0x08003e89
    {
        case CTRL_SYNC:
            res = RES_OK;
 8003e68:	2300      	movs	r3, #0
 8003e6a:	73fb      	strb	r3, [r7, #15]
            break;
 8003e6c:	e015      	b.n	8003e9a <USER_ioctl+0x62>

        case GET_SECTOR_COUNT:
            *(DWORD*)buff = SECTOR_COUNT;
 8003e6e:	683b      	ldr	r3, [r7, #0]
 8003e70:	2210      	movs	r2, #16
 8003e72:	601a      	str	r2, [r3, #0]
            res = RES_OK;
 8003e74:	2300      	movs	r3, #0
 8003e76:	73fb      	strb	r3, [r7, #15]
            break;
 8003e78:	e00f      	b.n	8003e9a <USER_ioctl+0x62>

        case GET_SECTOR_SIZE:
            *(WORD*)buff = FLASH_SECTOR_SIZE;
 8003e7a:	683b      	ldr	r3, [r7, #0]
 8003e7c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8003e80:	801a      	strh	r2, [r3, #0]
            res = RES_OK;
 8003e82:	2300      	movs	r3, #0
 8003e84:	73fb      	strb	r3, [r7, #15]
            break;
 8003e86:	e008      	b.n	8003e9a <USER_ioctl+0x62>

        case GET_BLOCK_SIZE:
            *(DWORD*)buff = 1;
 8003e88:	683b      	ldr	r3, [r7, #0]
 8003e8a:	2201      	movs	r2, #1
 8003e8c:	601a      	str	r2, [r3, #0]
            res = RES_OK;
 8003e8e:	2300      	movs	r3, #0
 8003e90:	73fb      	strb	r3, [r7, #15]
            break;
 8003e92:	e002      	b.n	8003e9a <USER_ioctl+0x62>

        default:
            res = RES_PARERR;
 8003e94:	2304      	movs	r3, #4
 8003e96:	73fb      	strb	r3, [r7, #15]
            break;
 8003e98:	bf00      	nop
    }

    return res;
 8003e9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e9c:	4618      	mov	r0, r3
 8003e9e:	3714      	adds	r7, #20
 8003ea0:	46bd      	mov	sp, r7
 8003ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea6:	4770      	bx	lr

08003ea8 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8003ea8:	b580      	push	{r7, lr}
 8003eaa:	b084      	sub	sp, #16
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	4603      	mov	r3, r0
 8003eb0:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8003eb2:	79fb      	ldrb	r3, [r7, #7]
 8003eb4:	4a08      	ldr	r2, [pc, #32]	@ (8003ed8 <disk_status+0x30>)
 8003eb6:	009b      	lsls	r3, r3, #2
 8003eb8:	4413      	add	r3, r2
 8003eba:	685b      	ldr	r3, [r3, #4]
 8003ebc:	685b      	ldr	r3, [r3, #4]
 8003ebe:	79fa      	ldrb	r2, [r7, #7]
 8003ec0:	4905      	ldr	r1, [pc, #20]	@ (8003ed8 <disk_status+0x30>)
 8003ec2:	440a      	add	r2, r1
 8003ec4:	7a12      	ldrb	r2, [r2, #8]
 8003ec6:	4610      	mov	r0, r2
 8003ec8:	4798      	blx	r3
 8003eca:	4603      	mov	r3, r0
 8003ecc:	73fb      	strb	r3, [r7, #15]
  return stat;
 8003ece:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ed0:	4618      	mov	r0, r3
 8003ed2:	3710      	adds	r7, #16
 8003ed4:	46bd      	mov	sp, r7
 8003ed6:	bd80      	pop	{r7, pc}
 8003ed8:	20000060 	.word	0x20000060

08003edc <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8003edc:	b580      	push	{r7, lr}
 8003ede:	b084      	sub	sp, #16
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	4603      	mov	r3, r0
 8003ee4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8003ee6:	2300      	movs	r3, #0
 8003ee8:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8003eea:	79fb      	ldrb	r3, [r7, #7]
 8003eec:	4a0d      	ldr	r2, [pc, #52]	@ (8003f24 <disk_initialize+0x48>)
 8003eee:	5cd3      	ldrb	r3, [r2, r3]
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d111      	bne.n	8003f18 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8003ef4:	79fb      	ldrb	r3, [r7, #7]
 8003ef6:	4a0b      	ldr	r2, [pc, #44]	@ (8003f24 <disk_initialize+0x48>)
 8003ef8:	2101      	movs	r1, #1
 8003efa:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8003efc:	79fb      	ldrb	r3, [r7, #7]
 8003efe:	4a09      	ldr	r2, [pc, #36]	@ (8003f24 <disk_initialize+0x48>)
 8003f00:	009b      	lsls	r3, r3, #2
 8003f02:	4413      	add	r3, r2
 8003f04:	685b      	ldr	r3, [r3, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	79fa      	ldrb	r2, [r7, #7]
 8003f0a:	4906      	ldr	r1, [pc, #24]	@ (8003f24 <disk_initialize+0x48>)
 8003f0c:	440a      	add	r2, r1
 8003f0e:	7a12      	ldrb	r2, [r2, #8]
 8003f10:	4610      	mov	r0, r2
 8003f12:	4798      	blx	r3
 8003f14:	4603      	mov	r3, r0
 8003f16:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8003f18:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f1a:	4618      	mov	r0, r3
 8003f1c:	3710      	adds	r7, #16
 8003f1e:	46bd      	mov	sp, r7
 8003f20:	bd80      	pop	{r7, pc}
 8003f22:	bf00      	nop
 8003f24:	20000060 	.word	0x20000060

08003f28 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8003f28:	b590      	push	{r4, r7, lr}
 8003f2a:	b087      	sub	sp, #28
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	60b9      	str	r1, [r7, #8]
 8003f30:	607a      	str	r2, [r7, #4]
 8003f32:	603b      	str	r3, [r7, #0]
 8003f34:	4603      	mov	r3, r0
 8003f36:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8003f38:	7bfb      	ldrb	r3, [r7, #15]
 8003f3a:	4a0a      	ldr	r2, [pc, #40]	@ (8003f64 <disk_read+0x3c>)
 8003f3c:	009b      	lsls	r3, r3, #2
 8003f3e:	4413      	add	r3, r2
 8003f40:	685b      	ldr	r3, [r3, #4]
 8003f42:	689c      	ldr	r4, [r3, #8]
 8003f44:	7bfb      	ldrb	r3, [r7, #15]
 8003f46:	4a07      	ldr	r2, [pc, #28]	@ (8003f64 <disk_read+0x3c>)
 8003f48:	4413      	add	r3, r2
 8003f4a:	7a18      	ldrb	r0, [r3, #8]
 8003f4c:	683b      	ldr	r3, [r7, #0]
 8003f4e:	687a      	ldr	r2, [r7, #4]
 8003f50:	68b9      	ldr	r1, [r7, #8]
 8003f52:	47a0      	blx	r4
 8003f54:	4603      	mov	r3, r0
 8003f56:	75fb      	strb	r3, [r7, #23]
  return res;
 8003f58:	7dfb      	ldrb	r3, [r7, #23]
}
 8003f5a:	4618      	mov	r0, r3
 8003f5c:	371c      	adds	r7, #28
 8003f5e:	46bd      	mov	sp, r7
 8003f60:	bd90      	pop	{r4, r7, pc}
 8003f62:	bf00      	nop
 8003f64:	20000060 	.word	0x20000060

08003f68 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8003f68:	b590      	push	{r4, r7, lr}
 8003f6a:	b087      	sub	sp, #28
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	60b9      	str	r1, [r7, #8]
 8003f70:	607a      	str	r2, [r7, #4]
 8003f72:	603b      	str	r3, [r7, #0]
 8003f74:	4603      	mov	r3, r0
 8003f76:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8003f78:	7bfb      	ldrb	r3, [r7, #15]
 8003f7a:	4a0a      	ldr	r2, [pc, #40]	@ (8003fa4 <disk_write+0x3c>)
 8003f7c:	009b      	lsls	r3, r3, #2
 8003f7e:	4413      	add	r3, r2
 8003f80:	685b      	ldr	r3, [r3, #4]
 8003f82:	68dc      	ldr	r4, [r3, #12]
 8003f84:	7bfb      	ldrb	r3, [r7, #15]
 8003f86:	4a07      	ldr	r2, [pc, #28]	@ (8003fa4 <disk_write+0x3c>)
 8003f88:	4413      	add	r3, r2
 8003f8a:	7a18      	ldrb	r0, [r3, #8]
 8003f8c:	683b      	ldr	r3, [r7, #0]
 8003f8e:	687a      	ldr	r2, [r7, #4]
 8003f90:	68b9      	ldr	r1, [r7, #8]
 8003f92:	47a0      	blx	r4
 8003f94:	4603      	mov	r3, r0
 8003f96:	75fb      	strb	r3, [r7, #23]
  return res;
 8003f98:	7dfb      	ldrb	r3, [r7, #23]
}
 8003f9a:	4618      	mov	r0, r3
 8003f9c:	371c      	adds	r7, #28
 8003f9e:	46bd      	mov	sp, r7
 8003fa0:	bd90      	pop	{r4, r7, pc}
 8003fa2:	bf00      	nop
 8003fa4:	20000060 	.word	0x20000060

08003fa8 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8003fa8:	b580      	push	{r7, lr}
 8003faa:	b084      	sub	sp, #16
 8003fac:	af00      	add	r7, sp, #0
 8003fae:	4603      	mov	r3, r0
 8003fb0:	603a      	str	r2, [r7, #0]
 8003fb2:	71fb      	strb	r3, [r7, #7]
 8003fb4:	460b      	mov	r3, r1
 8003fb6:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8003fb8:	79fb      	ldrb	r3, [r7, #7]
 8003fba:	4a09      	ldr	r2, [pc, #36]	@ (8003fe0 <disk_ioctl+0x38>)
 8003fbc:	009b      	lsls	r3, r3, #2
 8003fbe:	4413      	add	r3, r2
 8003fc0:	685b      	ldr	r3, [r3, #4]
 8003fc2:	691b      	ldr	r3, [r3, #16]
 8003fc4:	79fa      	ldrb	r2, [r7, #7]
 8003fc6:	4906      	ldr	r1, [pc, #24]	@ (8003fe0 <disk_ioctl+0x38>)
 8003fc8:	440a      	add	r2, r1
 8003fca:	7a10      	ldrb	r0, [r2, #8]
 8003fcc:	79b9      	ldrb	r1, [r7, #6]
 8003fce:	683a      	ldr	r2, [r7, #0]
 8003fd0:	4798      	blx	r3
 8003fd2:	4603      	mov	r3, r0
 8003fd4:	73fb      	strb	r3, [r7, #15]
  return res;
 8003fd6:	7bfb      	ldrb	r3, [r7, #15]
}
 8003fd8:	4618      	mov	r0, r3
 8003fda:	3710      	adds	r7, #16
 8003fdc:	46bd      	mov	sp, r7
 8003fde:	bd80      	pop	{r7, pc}
 8003fe0:	20000060 	.word	0x20000060

08003fe4 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8003fe4:	b480      	push	{r7}
 8003fe6:	b085      	sub	sp, #20
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	3301      	adds	r3, #1
 8003ff0:	781b      	ldrb	r3, [r3, #0]
 8003ff2:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8003ff4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003ff8:	021b      	lsls	r3, r3, #8
 8003ffa:	b21a      	sxth	r2, r3
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	781b      	ldrb	r3, [r3, #0]
 8004000:	b21b      	sxth	r3, r3
 8004002:	4313      	orrs	r3, r2
 8004004:	b21b      	sxth	r3, r3
 8004006:	81fb      	strh	r3, [r7, #14]
	return rv;
 8004008:	89fb      	ldrh	r3, [r7, #14]
}
 800400a:	4618      	mov	r0, r3
 800400c:	3714      	adds	r7, #20
 800400e:	46bd      	mov	sp, r7
 8004010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004014:	4770      	bx	lr

08004016 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8004016:	b480      	push	{r7}
 8004018:	b085      	sub	sp, #20
 800401a:	af00      	add	r7, sp, #0
 800401c:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	3303      	adds	r3, #3
 8004022:	781b      	ldrb	r3, [r3, #0]
 8004024:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	021b      	lsls	r3, r3, #8
 800402a:	687a      	ldr	r2, [r7, #4]
 800402c:	3202      	adds	r2, #2
 800402e:	7812      	ldrb	r2, [r2, #0]
 8004030:	4313      	orrs	r3, r2
 8004032:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	021b      	lsls	r3, r3, #8
 8004038:	687a      	ldr	r2, [r7, #4]
 800403a:	3201      	adds	r2, #1
 800403c:	7812      	ldrb	r2, [r2, #0]
 800403e:	4313      	orrs	r3, r2
 8004040:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	021b      	lsls	r3, r3, #8
 8004046:	687a      	ldr	r2, [r7, #4]
 8004048:	7812      	ldrb	r2, [r2, #0]
 800404a:	4313      	orrs	r3, r2
 800404c:	60fb      	str	r3, [r7, #12]
	return rv;
 800404e:	68fb      	ldr	r3, [r7, #12]
}
 8004050:	4618      	mov	r0, r3
 8004052:	3714      	adds	r7, #20
 8004054:	46bd      	mov	sp, r7
 8004056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800405a:	4770      	bx	lr

0800405c <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800405c:	b480      	push	{r7}
 800405e:	b083      	sub	sp, #12
 8004060:	af00      	add	r7, sp, #0
 8004062:	6078      	str	r0, [r7, #4]
 8004064:	460b      	mov	r3, r1
 8004066:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	1c5a      	adds	r2, r3, #1
 800406c:	607a      	str	r2, [r7, #4]
 800406e:	887a      	ldrh	r2, [r7, #2]
 8004070:	b2d2      	uxtb	r2, r2
 8004072:	701a      	strb	r2, [r3, #0]
 8004074:	887b      	ldrh	r3, [r7, #2]
 8004076:	0a1b      	lsrs	r3, r3, #8
 8004078:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	1c5a      	adds	r2, r3, #1
 800407e:	607a      	str	r2, [r7, #4]
 8004080:	887a      	ldrh	r2, [r7, #2]
 8004082:	b2d2      	uxtb	r2, r2
 8004084:	701a      	strb	r2, [r3, #0]
}
 8004086:	bf00      	nop
 8004088:	370c      	adds	r7, #12
 800408a:	46bd      	mov	sp, r7
 800408c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004090:	4770      	bx	lr

08004092 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8004092:	b480      	push	{r7}
 8004094:	b083      	sub	sp, #12
 8004096:	af00      	add	r7, sp, #0
 8004098:	6078      	str	r0, [r7, #4]
 800409a:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	1c5a      	adds	r2, r3, #1
 80040a0:	607a      	str	r2, [r7, #4]
 80040a2:	683a      	ldr	r2, [r7, #0]
 80040a4:	b2d2      	uxtb	r2, r2
 80040a6:	701a      	strb	r2, [r3, #0]
 80040a8:	683b      	ldr	r3, [r7, #0]
 80040aa:	0a1b      	lsrs	r3, r3, #8
 80040ac:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	1c5a      	adds	r2, r3, #1
 80040b2:	607a      	str	r2, [r7, #4]
 80040b4:	683a      	ldr	r2, [r7, #0]
 80040b6:	b2d2      	uxtb	r2, r2
 80040b8:	701a      	strb	r2, [r3, #0]
 80040ba:	683b      	ldr	r3, [r7, #0]
 80040bc:	0a1b      	lsrs	r3, r3, #8
 80040be:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	1c5a      	adds	r2, r3, #1
 80040c4:	607a      	str	r2, [r7, #4]
 80040c6:	683a      	ldr	r2, [r7, #0]
 80040c8:	b2d2      	uxtb	r2, r2
 80040ca:	701a      	strb	r2, [r3, #0]
 80040cc:	683b      	ldr	r3, [r7, #0]
 80040ce:	0a1b      	lsrs	r3, r3, #8
 80040d0:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	1c5a      	adds	r2, r3, #1
 80040d6:	607a      	str	r2, [r7, #4]
 80040d8:	683a      	ldr	r2, [r7, #0]
 80040da:	b2d2      	uxtb	r2, r2
 80040dc:	701a      	strb	r2, [r3, #0]
}
 80040de:	bf00      	nop
 80040e0:	370c      	adds	r7, #12
 80040e2:	46bd      	mov	sp, r7
 80040e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e8:	4770      	bx	lr

080040ea <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 80040ea:	b480      	push	{r7}
 80040ec:	b087      	sub	sp, #28
 80040ee:	af00      	add	r7, sp, #0
 80040f0:	60f8      	str	r0, [r7, #12]
 80040f2:	60b9      	str	r1, [r7, #8]
 80040f4:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 80040fa:	68bb      	ldr	r3, [r7, #8]
 80040fc:	613b      	str	r3, [r7, #16]

	if (cnt) {
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	2b00      	cmp	r3, #0
 8004102:	d00d      	beq.n	8004120 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8004104:	693a      	ldr	r2, [r7, #16]
 8004106:	1c53      	adds	r3, r2, #1
 8004108:	613b      	str	r3, [r7, #16]
 800410a:	697b      	ldr	r3, [r7, #20]
 800410c:	1c59      	adds	r1, r3, #1
 800410e:	6179      	str	r1, [r7, #20]
 8004110:	7812      	ldrb	r2, [r2, #0]
 8004112:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	3b01      	subs	r3, #1
 8004118:	607b      	str	r3, [r7, #4]
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	2b00      	cmp	r3, #0
 800411e:	d1f1      	bne.n	8004104 <mem_cpy+0x1a>
	}
}
 8004120:	bf00      	nop
 8004122:	371c      	adds	r7, #28
 8004124:	46bd      	mov	sp, r7
 8004126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800412a:	4770      	bx	lr

0800412c <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800412c:	b480      	push	{r7}
 800412e:	b087      	sub	sp, #28
 8004130:	af00      	add	r7, sp, #0
 8004132:	60f8      	str	r0, [r7, #12]
 8004134:	60b9      	str	r1, [r7, #8]
 8004136:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800413c:	697b      	ldr	r3, [r7, #20]
 800413e:	1c5a      	adds	r2, r3, #1
 8004140:	617a      	str	r2, [r7, #20]
 8004142:	68ba      	ldr	r2, [r7, #8]
 8004144:	b2d2      	uxtb	r2, r2
 8004146:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	3b01      	subs	r3, #1
 800414c:	607b      	str	r3, [r7, #4]
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	2b00      	cmp	r3, #0
 8004152:	d1f3      	bne.n	800413c <mem_set+0x10>
}
 8004154:	bf00      	nop
 8004156:	bf00      	nop
 8004158:	371c      	adds	r7, #28
 800415a:	46bd      	mov	sp, r7
 800415c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004160:	4770      	bx	lr

08004162 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8004162:	b480      	push	{r7}
 8004164:	b089      	sub	sp, #36	@ 0x24
 8004166:	af00      	add	r7, sp, #0
 8004168:	60f8      	str	r0, [r7, #12]
 800416a:	60b9      	str	r1, [r7, #8]
 800416c:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	61fb      	str	r3, [r7, #28]
 8004172:	68bb      	ldr	r3, [r7, #8]
 8004174:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8004176:	2300      	movs	r3, #0
 8004178:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800417a:	69fb      	ldr	r3, [r7, #28]
 800417c:	1c5a      	adds	r2, r3, #1
 800417e:	61fa      	str	r2, [r7, #28]
 8004180:	781b      	ldrb	r3, [r3, #0]
 8004182:	4619      	mov	r1, r3
 8004184:	69bb      	ldr	r3, [r7, #24]
 8004186:	1c5a      	adds	r2, r3, #1
 8004188:	61ba      	str	r2, [r7, #24]
 800418a:	781b      	ldrb	r3, [r3, #0]
 800418c:	1acb      	subs	r3, r1, r3
 800418e:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	3b01      	subs	r3, #1
 8004194:	607b      	str	r3, [r7, #4]
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	2b00      	cmp	r3, #0
 800419a:	d002      	beq.n	80041a2 <mem_cmp+0x40>
 800419c:	697b      	ldr	r3, [r7, #20]
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d0eb      	beq.n	800417a <mem_cmp+0x18>

	return r;
 80041a2:	697b      	ldr	r3, [r7, #20]
}
 80041a4:	4618      	mov	r0, r3
 80041a6:	3724      	adds	r7, #36	@ 0x24
 80041a8:	46bd      	mov	sp, r7
 80041aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ae:	4770      	bx	lr

080041b0 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 80041b0:	b480      	push	{r7}
 80041b2:	b083      	sub	sp, #12
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	6078      	str	r0, [r7, #4]
 80041b8:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 80041ba:	e002      	b.n	80041c2 <chk_chr+0x12>
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	3301      	adds	r3, #1
 80041c0:	607b      	str	r3, [r7, #4]
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	781b      	ldrb	r3, [r3, #0]
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d005      	beq.n	80041d6 <chk_chr+0x26>
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	781b      	ldrb	r3, [r3, #0]
 80041ce:	461a      	mov	r2, r3
 80041d0:	683b      	ldr	r3, [r7, #0]
 80041d2:	4293      	cmp	r3, r2
 80041d4:	d1f2      	bne.n	80041bc <chk_chr+0xc>
	return *str;
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	781b      	ldrb	r3, [r3, #0]
}
 80041da:	4618      	mov	r0, r3
 80041dc:	370c      	adds	r7, #12
 80041de:	46bd      	mov	sp, r7
 80041e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e4:	4770      	bx	lr
	...

080041e8 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80041e8:	b480      	push	{r7}
 80041ea:	b085      	sub	sp, #20
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	6078      	str	r0, [r7, #4]
 80041f0:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 80041f2:	2300      	movs	r3, #0
 80041f4:	60bb      	str	r3, [r7, #8]
 80041f6:	68bb      	ldr	r3, [r7, #8]
 80041f8:	60fb      	str	r3, [r7, #12]
 80041fa:	e029      	b.n	8004250 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 80041fc:	4a27      	ldr	r2, [pc, #156]	@ (800429c <chk_lock+0xb4>)
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	011b      	lsls	r3, r3, #4
 8004202:	4413      	add	r3, r2
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	2b00      	cmp	r3, #0
 8004208:	d01d      	beq.n	8004246 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800420a:	4a24      	ldr	r2, [pc, #144]	@ (800429c <chk_lock+0xb4>)
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	011b      	lsls	r3, r3, #4
 8004210:	4413      	add	r3, r2
 8004212:	681a      	ldr	r2, [r3, #0]
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	429a      	cmp	r2, r3
 800421a:	d116      	bne.n	800424a <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800421c:	4a1f      	ldr	r2, [pc, #124]	@ (800429c <chk_lock+0xb4>)
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	011b      	lsls	r3, r3, #4
 8004222:	4413      	add	r3, r2
 8004224:	3304      	adds	r3, #4
 8004226:	681a      	ldr	r2, [r3, #0]
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800422c:	429a      	cmp	r2, r3
 800422e:	d10c      	bne.n	800424a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8004230:	4a1a      	ldr	r2, [pc, #104]	@ (800429c <chk_lock+0xb4>)
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	011b      	lsls	r3, r3, #4
 8004236:	4413      	add	r3, r2
 8004238:	3308      	adds	r3, #8
 800423a:	681a      	ldr	r2, [r3, #0]
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8004240:	429a      	cmp	r2, r3
 8004242:	d102      	bne.n	800424a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8004244:	e007      	b.n	8004256 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8004246:	2301      	movs	r3, #1
 8004248:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	3301      	adds	r3, #1
 800424e:	60fb      	str	r3, [r7, #12]
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	2b01      	cmp	r3, #1
 8004254:	d9d2      	bls.n	80041fc <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	2b02      	cmp	r3, #2
 800425a:	d109      	bne.n	8004270 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800425c:	68bb      	ldr	r3, [r7, #8]
 800425e:	2b00      	cmp	r3, #0
 8004260:	d102      	bne.n	8004268 <chk_lock+0x80>
 8004262:	683b      	ldr	r3, [r7, #0]
 8004264:	2b02      	cmp	r3, #2
 8004266:	d101      	bne.n	800426c <chk_lock+0x84>
 8004268:	2300      	movs	r3, #0
 800426a:	e010      	b.n	800428e <chk_lock+0xa6>
 800426c:	2312      	movs	r3, #18
 800426e:	e00e      	b.n	800428e <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8004270:	683b      	ldr	r3, [r7, #0]
 8004272:	2b00      	cmp	r3, #0
 8004274:	d108      	bne.n	8004288 <chk_lock+0xa0>
 8004276:	4a09      	ldr	r2, [pc, #36]	@ (800429c <chk_lock+0xb4>)
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	011b      	lsls	r3, r3, #4
 800427c:	4413      	add	r3, r2
 800427e:	330c      	adds	r3, #12
 8004280:	881b      	ldrh	r3, [r3, #0]
 8004282:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004286:	d101      	bne.n	800428c <chk_lock+0xa4>
 8004288:	2310      	movs	r3, #16
 800428a:	e000      	b.n	800428e <chk_lock+0xa6>
 800428c:	2300      	movs	r3, #0
}
 800428e:	4618      	mov	r0, r3
 8004290:	3714      	adds	r7, #20
 8004292:	46bd      	mov	sp, r7
 8004294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004298:	4770      	bx	lr
 800429a:	bf00      	nop
 800429c:	20000114 	.word	0x20000114

080042a0 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 80042a0:	b480      	push	{r7}
 80042a2:	b083      	sub	sp, #12
 80042a4:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80042a6:	2300      	movs	r3, #0
 80042a8:	607b      	str	r3, [r7, #4]
 80042aa:	e002      	b.n	80042b2 <enq_lock+0x12>
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	3301      	adds	r3, #1
 80042b0:	607b      	str	r3, [r7, #4]
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	2b01      	cmp	r3, #1
 80042b6:	d806      	bhi.n	80042c6 <enq_lock+0x26>
 80042b8:	4a09      	ldr	r2, [pc, #36]	@ (80042e0 <enq_lock+0x40>)
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	011b      	lsls	r3, r3, #4
 80042be:	4413      	add	r3, r2
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d1f2      	bne.n	80042ac <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	2b02      	cmp	r3, #2
 80042ca:	bf14      	ite	ne
 80042cc:	2301      	movne	r3, #1
 80042ce:	2300      	moveq	r3, #0
 80042d0:	b2db      	uxtb	r3, r3
}
 80042d2:	4618      	mov	r0, r3
 80042d4:	370c      	adds	r7, #12
 80042d6:	46bd      	mov	sp, r7
 80042d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042dc:	4770      	bx	lr
 80042de:	bf00      	nop
 80042e0:	20000114 	.word	0x20000114

080042e4 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80042e4:	b480      	push	{r7}
 80042e6:	b085      	sub	sp, #20
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	6078      	str	r0, [r7, #4]
 80042ec:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80042ee:	2300      	movs	r3, #0
 80042f0:	60fb      	str	r3, [r7, #12]
 80042f2:	e01f      	b.n	8004334 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 80042f4:	4a41      	ldr	r2, [pc, #260]	@ (80043fc <inc_lock+0x118>)
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	011b      	lsls	r3, r3, #4
 80042fa:	4413      	add	r3, r2
 80042fc:	681a      	ldr	r2, [r3, #0]
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	429a      	cmp	r2, r3
 8004304:	d113      	bne.n	800432e <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8004306:	4a3d      	ldr	r2, [pc, #244]	@ (80043fc <inc_lock+0x118>)
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	011b      	lsls	r3, r3, #4
 800430c:	4413      	add	r3, r2
 800430e:	3304      	adds	r3, #4
 8004310:	681a      	ldr	r2, [r3, #0]
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8004316:	429a      	cmp	r2, r3
 8004318:	d109      	bne.n	800432e <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800431a:	4a38      	ldr	r2, [pc, #224]	@ (80043fc <inc_lock+0x118>)
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	011b      	lsls	r3, r3, #4
 8004320:	4413      	add	r3, r2
 8004322:	3308      	adds	r3, #8
 8004324:	681a      	ldr	r2, [r3, #0]
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800432a:	429a      	cmp	r2, r3
 800432c:	d006      	beq.n	800433c <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	3301      	adds	r3, #1
 8004332:	60fb      	str	r3, [r7, #12]
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	2b01      	cmp	r3, #1
 8004338:	d9dc      	bls.n	80042f4 <inc_lock+0x10>
 800433a:	e000      	b.n	800433e <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800433c:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	2b02      	cmp	r3, #2
 8004342:	d132      	bne.n	80043aa <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8004344:	2300      	movs	r3, #0
 8004346:	60fb      	str	r3, [r7, #12]
 8004348:	e002      	b.n	8004350 <inc_lock+0x6c>
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	3301      	adds	r3, #1
 800434e:	60fb      	str	r3, [r7, #12]
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	2b01      	cmp	r3, #1
 8004354:	d806      	bhi.n	8004364 <inc_lock+0x80>
 8004356:	4a29      	ldr	r2, [pc, #164]	@ (80043fc <inc_lock+0x118>)
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	011b      	lsls	r3, r3, #4
 800435c:	4413      	add	r3, r2
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	2b00      	cmp	r3, #0
 8004362:	d1f2      	bne.n	800434a <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	2b02      	cmp	r3, #2
 8004368:	d101      	bne.n	800436e <inc_lock+0x8a>
 800436a:	2300      	movs	r3, #0
 800436c:	e040      	b.n	80043f0 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681a      	ldr	r2, [r3, #0]
 8004372:	4922      	ldr	r1, [pc, #136]	@ (80043fc <inc_lock+0x118>)
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	011b      	lsls	r3, r3, #4
 8004378:	440b      	add	r3, r1
 800437a:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	689a      	ldr	r2, [r3, #8]
 8004380:	491e      	ldr	r1, [pc, #120]	@ (80043fc <inc_lock+0x118>)
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	011b      	lsls	r3, r3, #4
 8004386:	440b      	add	r3, r1
 8004388:	3304      	adds	r3, #4
 800438a:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	695a      	ldr	r2, [r3, #20]
 8004390:	491a      	ldr	r1, [pc, #104]	@ (80043fc <inc_lock+0x118>)
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	011b      	lsls	r3, r3, #4
 8004396:	440b      	add	r3, r1
 8004398:	3308      	adds	r3, #8
 800439a:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800439c:	4a17      	ldr	r2, [pc, #92]	@ (80043fc <inc_lock+0x118>)
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	011b      	lsls	r3, r3, #4
 80043a2:	4413      	add	r3, r2
 80043a4:	330c      	adds	r3, #12
 80043a6:	2200      	movs	r2, #0
 80043a8:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 80043aa:	683b      	ldr	r3, [r7, #0]
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d009      	beq.n	80043c4 <inc_lock+0xe0>
 80043b0:	4a12      	ldr	r2, [pc, #72]	@ (80043fc <inc_lock+0x118>)
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	011b      	lsls	r3, r3, #4
 80043b6:	4413      	add	r3, r2
 80043b8:	330c      	adds	r3, #12
 80043ba:	881b      	ldrh	r3, [r3, #0]
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d001      	beq.n	80043c4 <inc_lock+0xe0>
 80043c0:	2300      	movs	r3, #0
 80043c2:	e015      	b.n	80043f0 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80043c4:	683b      	ldr	r3, [r7, #0]
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d108      	bne.n	80043dc <inc_lock+0xf8>
 80043ca:	4a0c      	ldr	r2, [pc, #48]	@ (80043fc <inc_lock+0x118>)
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	011b      	lsls	r3, r3, #4
 80043d0:	4413      	add	r3, r2
 80043d2:	330c      	adds	r3, #12
 80043d4:	881b      	ldrh	r3, [r3, #0]
 80043d6:	3301      	adds	r3, #1
 80043d8:	b29a      	uxth	r2, r3
 80043da:	e001      	b.n	80043e0 <inc_lock+0xfc>
 80043dc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80043e0:	4906      	ldr	r1, [pc, #24]	@ (80043fc <inc_lock+0x118>)
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	011b      	lsls	r3, r3, #4
 80043e6:	440b      	add	r3, r1
 80043e8:	330c      	adds	r3, #12
 80043ea:	801a      	strh	r2, [r3, #0]

	return i + 1;
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	3301      	adds	r3, #1
}
 80043f0:	4618      	mov	r0, r3
 80043f2:	3714      	adds	r7, #20
 80043f4:	46bd      	mov	sp, r7
 80043f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043fa:	4770      	bx	lr
 80043fc:	20000114 	.word	0x20000114

08004400 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8004400:	b480      	push	{r7}
 8004402:	b085      	sub	sp, #20
 8004404:	af00      	add	r7, sp, #0
 8004406:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	3b01      	subs	r3, #1
 800440c:	607b      	str	r3, [r7, #4]
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	2b01      	cmp	r3, #1
 8004412:	d825      	bhi.n	8004460 <dec_lock+0x60>
		n = Files[i].ctr;
 8004414:	4a17      	ldr	r2, [pc, #92]	@ (8004474 <dec_lock+0x74>)
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	011b      	lsls	r3, r3, #4
 800441a:	4413      	add	r3, r2
 800441c:	330c      	adds	r3, #12
 800441e:	881b      	ldrh	r3, [r3, #0]
 8004420:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8004422:	89fb      	ldrh	r3, [r7, #14]
 8004424:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004428:	d101      	bne.n	800442e <dec_lock+0x2e>
 800442a:	2300      	movs	r3, #0
 800442c:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800442e:	89fb      	ldrh	r3, [r7, #14]
 8004430:	2b00      	cmp	r3, #0
 8004432:	d002      	beq.n	800443a <dec_lock+0x3a>
 8004434:	89fb      	ldrh	r3, [r7, #14]
 8004436:	3b01      	subs	r3, #1
 8004438:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800443a:	4a0e      	ldr	r2, [pc, #56]	@ (8004474 <dec_lock+0x74>)
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	011b      	lsls	r3, r3, #4
 8004440:	4413      	add	r3, r2
 8004442:	330c      	adds	r3, #12
 8004444:	89fa      	ldrh	r2, [r7, #14]
 8004446:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8004448:	89fb      	ldrh	r3, [r7, #14]
 800444a:	2b00      	cmp	r3, #0
 800444c:	d105      	bne.n	800445a <dec_lock+0x5a>
 800444e:	4a09      	ldr	r2, [pc, #36]	@ (8004474 <dec_lock+0x74>)
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	011b      	lsls	r3, r3, #4
 8004454:	4413      	add	r3, r2
 8004456:	2200      	movs	r2, #0
 8004458:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800445a:	2300      	movs	r3, #0
 800445c:	737b      	strb	r3, [r7, #13]
 800445e:	e001      	b.n	8004464 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8004460:	2302      	movs	r3, #2
 8004462:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8004464:	7b7b      	ldrb	r3, [r7, #13]
}
 8004466:	4618      	mov	r0, r3
 8004468:	3714      	adds	r7, #20
 800446a:	46bd      	mov	sp, r7
 800446c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004470:	4770      	bx	lr
 8004472:	bf00      	nop
 8004474:	20000114 	.word	0x20000114

08004478 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8004478:	b480      	push	{r7}
 800447a:	b085      	sub	sp, #20
 800447c:	af00      	add	r7, sp, #0
 800447e:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8004480:	2300      	movs	r3, #0
 8004482:	60fb      	str	r3, [r7, #12]
 8004484:	e010      	b.n	80044a8 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8004486:	4a0d      	ldr	r2, [pc, #52]	@ (80044bc <clear_lock+0x44>)
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	011b      	lsls	r3, r3, #4
 800448c:	4413      	add	r3, r2
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	687a      	ldr	r2, [r7, #4]
 8004492:	429a      	cmp	r2, r3
 8004494:	d105      	bne.n	80044a2 <clear_lock+0x2a>
 8004496:	4a09      	ldr	r2, [pc, #36]	@ (80044bc <clear_lock+0x44>)
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	011b      	lsls	r3, r3, #4
 800449c:	4413      	add	r3, r2
 800449e:	2200      	movs	r2, #0
 80044a0:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	3301      	adds	r3, #1
 80044a6:	60fb      	str	r3, [r7, #12]
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	2b01      	cmp	r3, #1
 80044ac:	d9eb      	bls.n	8004486 <clear_lock+0xe>
	}
}
 80044ae:	bf00      	nop
 80044b0:	bf00      	nop
 80044b2:	3714      	adds	r7, #20
 80044b4:	46bd      	mov	sp, r7
 80044b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ba:	4770      	bx	lr
 80044bc:	20000114 	.word	0x20000114

080044c0 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 80044c0:	b580      	push	{r7, lr}
 80044c2:	b086      	sub	sp, #24
 80044c4:	af00      	add	r7, sp, #0
 80044c6:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 80044c8:	2300      	movs	r3, #0
 80044ca:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	78db      	ldrb	r3, [r3, #3]
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d034      	beq.n	800453e <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044d8:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	7858      	ldrb	r0, [r3, #1]
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80044e4:	2301      	movs	r3, #1
 80044e6:	697a      	ldr	r2, [r7, #20]
 80044e8:	f7ff fd3e 	bl	8003f68 <disk_write>
 80044ec:	4603      	mov	r3, r0
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d002      	beq.n	80044f8 <sync_window+0x38>
			res = FR_DISK_ERR;
 80044f2:	2301      	movs	r3, #1
 80044f4:	73fb      	strb	r3, [r7, #15]
 80044f6:	e022      	b.n	800453e <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	2200      	movs	r2, #0
 80044fc:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	6a1b      	ldr	r3, [r3, #32]
 8004502:	697a      	ldr	r2, [r7, #20]
 8004504:	1ad2      	subs	r2, r2, r3
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	699b      	ldr	r3, [r3, #24]
 800450a:	429a      	cmp	r2, r3
 800450c:	d217      	bcs.n	800453e <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	789b      	ldrb	r3, [r3, #2]
 8004512:	613b      	str	r3, [r7, #16]
 8004514:	e010      	b.n	8004538 <sync_window+0x78>
					wsect += fs->fsize;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	699b      	ldr	r3, [r3, #24]
 800451a:	697a      	ldr	r2, [r7, #20]
 800451c:	4413      	add	r3, r2
 800451e:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	7858      	ldrb	r0, [r3, #1]
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800452a:	2301      	movs	r3, #1
 800452c:	697a      	ldr	r2, [r7, #20]
 800452e:	f7ff fd1b 	bl	8003f68 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8004532:	693b      	ldr	r3, [r7, #16]
 8004534:	3b01      	subs	r3, #1
 8004536:	613b      	str	r3, [r7, #16]
 8004538:	693b      	ldr	r3, [r7, #16]
 800453a:	2b01      	cmp	r3, #1
 800453c:	d8eb      	bhi.n	8004516 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800453e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004540:	4618      	mov	r0, r3
 8004542:	3718      	adds	r7, #24
 8004544:	46bd      	mov	sp, r7
 8004546:	bd80      	pop	{r7, pc}

08004548 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8004548:	b580      	push	{r7, lr}
 800454a:	b084      	sub	sp, #16
 800454c:	af00      	add	r7, sp, #0
 800454e:	6078      	str	r0, [r7, #4]
 8004550:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8004552:	2300      	movs	r3, #0
 8004554:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800455a:	683a      	ldr	r2, [r7, #0]
 800455c:	429a      	cmp	r2, r3
 800455e:	d01b      	beq.n	8004598 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8004560:	6878      	ldr	r0, [r7, #4]
 8004562:	f7ff ffad 	bl	80044c0 <sync_window>
 8004566:	4603      	mov	r3, r0
 8004568:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800456a:	7bfb      	ldrb	r3, [r7, #15]
 800456c:	2b00      	cmp	r3, #0
 800456e:	d113      	bne.n	8004598 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	7858      	ldrb	r0, [r3, #1]
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800457a:	2301      	movs	r3, #1
 800457c:	683a      	ldr	r2, [r7, #0]
 800457e:	f7ff fcd3 	bl	8003f28 <disk_read>
 8004582:	4603      	mov	r3, r0
 8004584:	2b00      	cmp	r3, #0
 8004586:	d004      	beq.n	8004592 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8004588:	f04f 33ff 	mov.w	r3, #4294967295
 800458c:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800458e:	2301      	movs	r3, #1
 8004590:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	683a      	ldr	r2, [r7, #0]
 8004596:	62da      	str	r2, [r3, #44]	@ 0x2c
		}
	}
	return res;
 8004598:	7bfb      	ldrb	r3, [r7, #15]
}
 800459a:	4618      	mov	r0, r3
 800459c:	3710      	adds	r7, #16
 800459e:	46bd      	mov	sp, r7
 80045a0:	bd80      	pop	{r7, pc}
	...

080045a4 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 80045a4:	b580      	push	{r7, lr}
 80045a6:	b084      	sub	sp, #16
 80045a8:	af00      	add	r7, sp, #0
 80045aa:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 80045ac:	6878      	ldr	r0, [r7, #4]
 80045ae:	f7ff ff87 	bl	80044c0 <sync_window>
 80045b2:	4603      	mov	r3, r0
 80045b4:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80045b6:	7bfb      	ldrb	r3, [r7, #15]
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d158      	bne.n	800466e <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	781b      	ldrb	r3, [r3, #0]
 80045c0:	2b03      	cmp	r3, #3
 80045c2:	d148      	bne.n	8004656 <sync_fs+0xb2>
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	791b      	ldrb	r3, [r3, #4]
 80045c8:	2b01      	cmp	r3, #1
 80045ca:	d144      	bne.n	8004656 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	3330      	adds	r3, #48	@ 0x30
 80045d0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80045d4:	2100      	movs	r1, #0
 80045d6:	4618      	mov	r0, r3
 80045d8:	f7ff fda8 	bl	800412c <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	3330      	adds	r3, #48	@ 0x30
 80045e0:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 80045e4:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 80045e8:	4618      	mov	r0, r3
 80045ea:	f7ff fd37 	bl	800405c <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	3330      	adds	r3, #48	@ 0x30
 80045f2:	4921      	ldr	r1, [pc, #132]	@ (8004678 <sync_fs+0xd4>)
 80045f4:	4618      	mov	r0, r3
 80045f6:	f7ff fd4c 	bl	8004092 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	3330      	adds	r3, #48	@ 0x30
 80045fe:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8004602:	491e      	ldr	r1, [pc, #120]	@ (800467c <sync_fs+0xd8>)
 8004604:	4618      	mov	r0, r3
 8004606:	f7ff fd44 	bl	8004092 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	3330      	adds	r3, #48	@ 0x30
 800460e:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	691b      	ldr	r3, [r3, #16]
 8004616:	4619      	mov	r1, r3
 8004618:	4610      	mov	r0, r2
 800461a:	f7ff fd3a 	bl	8004092 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	3330      	adds	r3, #48	@ 0x30
 8004622:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	68db      	ldr	r3, [r3, #12]
 800462a:	4619      	mov	r1, r3
 800462c:	4610      	mov	r0, r2
 800462e:	f7ff fd30 	bl	8004092 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	69db      	ldr	r3, [r3, #28]
 8004636:	1c5a      	adds	r2, r3, #1
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	62da      	str	r2, [r3, #44]	@ 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	7858      	ldrb	r0, [r3, #1]
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800464a:	2301      	movs	r3, #1
 800464c:	f7ff fc8c 	bl	8003f68 <disk_write>
			fs->fsi_flag = 0;
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	2200      	movs	r2, #0
 8004654:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	785b      	ldrb	r3, [r3, #1]
 800465a:	2200      	movs	r2, #0
 800465c:	2100      	movs	r1, #0
 800465e:	4618      	mov	r0, r3
 8004660:	f7ff fca2 	bl	8003fa8 <disk_ioctl>
 8004664:	4603      	mov	r3, r0
 8004666:	2b00      	cmp	r3, #0
 8004668:	d001      	beq.n	800466e <sync_fs+0xca>
 800466a:	2301      	movs	r3, #1
 800466c:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800466e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004670:	4618      	mov	r0, r3
 8004672:	3710      	adds	r7, #16
 8004674:	46bd      	mov	sp, r7
 8004676:	bd80      	pop	{r7, pc}
 8004678:	41615252 	.word	0x41615252
 800467c:	61417272 	.word	0x61417272

08004680 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8004680:	b480      	push	{r7}
 8004682:	b083      	sub	sp, #12
 8004684:	af00      	add	r7, sp, #0
 8004686:	6078      	str	r0, [r7, #4]
 8004688:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800468a:	683b      	ldr	r3, [r7, #0]
 800468c:	3b02      	subs	r3, #2
 800468e:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	695b      	ldr	r3, [r3, #20]
 8004694:	3b02      	subs	r3, #2
 8004696:	683a      	ldr	r2, [r7, #0]
 8004698:	429a      	cmp	r2, r3
 800469a:	d301      	bcc.n	80046a0 <clust2sect+0x20>
 800469c:	2300      	movs	r3, #0
 800469e:	e008      	b.n	80046b2 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	895b      	ldrh	r3, [r3, #10]
 80046a4:	461a      	mov	r2, r3
 80046a6:	683b      	ldr	r3, [r7, #0]
 80046a8:	fb03 f202 	mul.w	r2, r3, r2
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046b0:	4413      	add	r3, r2
}
 80046b2:	4618      	mov	r0, r3
 80046b4:	370c      	adds	r7, #12
 80046b6:	46bd      	mov	sp, r7
 80046b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046bc:	4770      	bx	lr

080046be <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 80046be:	b580      	push	{r7, lr}
 80046c0:	b086      	sub	sp, #24
 80046c2:	af00      	add	r7, sp, #0
 80046c4:	6078      	str	r0, [r7, #4]
 80046c6:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 80046ce:	683b      	ldr	r3, [r7, #0]
 80046d0:	2b01      	cmp	r3, #1
 80046d2:	d904      	bls.n	80046de <get_fat+0x20>
 80046d4:	693b      	ldr	r3, [r7, #16]
 80046d6:	695b      	ldr	r3, [r3, #20]
 80046d8:	683a      	ldr	r2, [r7, #0]
 80046da:	429a      	cmp	r2, r3
 80046dc:	d302      	bcc.n	80046e4 <get_fat+0x26>
		val = 1;	/* Internal error */
 80046de:	2301      	movs	r3, #1
 80046e0:	617b      	str	r3, [r7, #20]
 80046e2:	e08e      	b.n	8004802 <get_fat+0x144>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 80046e4:	f04f 33ff 	mov.w	r3, #4294967295
 80046e8:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 80046ea:	693b      	ldr	r3, [r7, #16]
 80046ec:	781b      	ldrb	r3, [r3, #0]
 80046ee:	2b03      	cmp	r3, #3
 80046f0:	d061      	beq.n	80047b6 <get_fat+0xf8>
 80046f2:	2b03      	cmp	r3, #3
 80046f4:	dc7b      	bgt.n	80047ee <get_fat+0x130>
 80046f6:	2b01      	cmp	r3, #1
 80046f8:	d002      	beq.n	8004700 <get_fat+0x42>
 80046fa:	2b02      	cmp	r3, #2
 80046fc:	d041      	beq.n	8004782 <get_fat+0xc4>
 80046fe:	e076      	b.n	80047ee <get_fat+0x130>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8004700:	683b      	ldr	r3, [r7, #0]
 8004702:	60fb      	str	r3, [r7, #12]
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	085b      	lsrs	r3, r3, #1
 8004708:	68fa      	ldr	r2, [r7, #12]
 800470a:	4413      	add	r3, r2
 800470c:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800470e:	693b      	ldr	r3, [r7, #16]
 8004710:	6a1a      	ldr	r2, [r3, #32]
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	0a5b      	lsrs	r3, r3, #9
 8004716:	4413      	add	r3, r2
 8004718:	4619      	mov	r1, r3
 800471a:	6938      	ldr	r0, [r7, #16]
 800471c:	f7ff ff14 	bl	8004548 <move_window>
 8004720:	4603      	mov	r3, r0
 8004722:	2b00      	cmp	r3, #0
 8004724:	d166      	bne.n	80047f4 <get_fat+0x136>
			wc = fs->win[bc++ % SS(fs)];
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	1c5a      	adds	r2, r3, #1
 800472a:	60fa      	str	r2, [r7, #12]
 800472c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004730:	693a      	ldr	r2, [r7, #16]
 8004732:	4413      	add	r3, r2
 8004734:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8004738:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800473a:	693b      	ldr	r3, [r7, #16]
 800473c:	6a1a      	ldr	r2, [r3, #32]
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	0a5b      	lsrs	r3, r3, #9
 8004742:	4413      	add	r3, r2
 8004744:	4619      	mov	r1, r3
 8004746:	6938      	ldr	r0, [r7, #16]
 8004748:	f7ff fefe 	bl	8004548 <move_window>
 800474c:	4603      	mov	r3, r0
 800474e:	2b00      	cmp	r3, #0
 8004750:	d152      	bne.n	80047f8 <get_fat+0x13a>
			wc |= fs->win[bc % SS(fs)] << 8;
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004758:	693a      	ldr	r2, [r7, #16]
 800475a:	4413      	add	r3, r2
 800475c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8004760:	021b      	lsls	r3, r3, #8
 8004762:	68ba      	ldr	r2, [r7, #8]
 8004764:	4313      	orrs	r3, r2
 8004766:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8004768:	683b      	ldr	r3, [r7, #0]
 800476a:	f003 0301 	and.w	r3, r3, #1
 800476e:	2b00      	cmp	r3, #0
 8004770:	d002      	beq.n	8004778 <get_fat+0xba>
 8004772:	68bb      	ldr	r3, [r7, #8]
 8004774:	091b      	lsrs	r3, r3, #4
 8004776:	e002      	b.n	800477e <get_fat+0xc0>
 8004778:	68bb      	ldr	r3, [r7, #8]
 800477a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800477e:	617b      	str	r3, [r7, #20]
			break;
 8004780:	e03f      	b.n	8004802 <get_fat+0x144>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8004782:	693b      	ldr	r3, [r7, #16]
 8004784:	6a1a      	ldr	r2, [r3, #32]
 8004786:	683b      	ldr	r3, [r7, #0]
 8004788:	0a1b      	lsrs	r3, r3, #8
 800478a:	4413      	add	r3, r2
 800478c:	4619      	mov	r1, r3
 800478e:	6938      	ldr	r0, [r7, #16]
 8004790:	f7ff feda 	bl	8004548 <move_window>
 8004794:	4603      	mov	r3, r0
 8004796:	2b00      	cmp	r3, #0
 8004798:	d130      	bne.n	80047fc <get_fat+0x13e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800479a:	693b      	ldr	r3, [r7, #16]
 800479c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80047a0:	683b      	ldr	r3, [r7, #0]
 80047a2:	005b      	lsls	r3, r3, #1
 80047a4:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 80047a8:	4413      	add	r3, r2
 80047aa:	4618      	mov	r0, r3
 80047ac:	f7ff fc1a 	bl	8003fe4 <ld_word>
 80047b0:	4603      	mov	r3, r0
 80047b2:	617b      	str	r3, [r7, #20]
			break;
 80047b4:	e025      	b.n	8004802 <get_fat+0x144>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80047b6:	693b      	ldr	r3, [r7, #16]
 80047b8:	6a1a      	ldr	r2, [r3, #32]
 80047ba:	683b      	ldr	r3, [r7, #0]
 80047bc:	09db      	lsrs	r3, r3, #7
 80047be:	4413      	add	r3, r2
 80047c0:	4619      	mov	r1, r3
 80047c2:	6938      	ldr	r0, [r7, #16]
 80047c4:	f7ff fec0 	bl	8004548 <move_window>
 80047c8:	4603      	mov	r3, r0
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d118      	bne.n	8004800 <get_fat+0x142>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 80047ce:	693b      	ldr	r3, [r7, #16]
 80047d0:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80047d4:	683b      	ldr	r3, [r7, #0]
 80047d6:	009b      	lsls	r3, r3, #2
 80047d8:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 80047dc:	4413      	add	r3, r2
 80047de:	4618      	mov	r0, r3
 80047e0:	f7ff fc19 	bl	8004016 <ld_dword>
 80047e4:	4603      	mov	r3, r0
 80047e6:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 80047ea:	617b      	str	r3, [r7, #20]
			break;
 80047ec:	e009      	b.n	8004802 <get_fat+0x144>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 80047ee:	2301      	movs	r3, #1
 80047f0:	617b      	str	r3, [r7, #20]
 80047f2:	e006      	b.n	8004802 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80047f4:	bf00      	nop
 80047f6:	e004      	b.n	8004802 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80047f8:	bf00      	nop
 80047fa:	e002      	b.n	8004802 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80047fc:	bf00      	nop
 80047fe:	e000      	b.n	8004802 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8004800:	bf00      	nop
		}
	}

	return val;
 8004802:	697b      	ldr	r3, [r7, #20]
}
 8004804:	4618      	mov	r0, r3
 8004806:	3718      	adds	r7, #24
 8004808:	46bd      	mov	sp, r7
 800480a:	bd80      	pop	{r7, pc}

0800480c <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800480c:	b590      	push	{r4, r7, lr}
 800480e:	b089      	sub	sp, #36	@ 0x24
 8004810:	af00      	add	r7, sp, #0
 8004812:	60f8      	str	r0, [r7, #12]
 8004814:	60b9      	str	r1, [r7, #8]
 8004816:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8004818:	2302      	movs	r3, #2
 800481a:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800481c:	68bb      	ldr	r3, [r7, #8]
 800481e:	2b01      	cmp	r3, #1
 8004820:	f240 80d9 	bls.w	80049d6 <put_fat+0x1ca>
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	695b      	ldr	r3, [r3, #20]
 8004828:	68ba      	ldr	r2, [r7, #8]
 800482a:	429a      	cmp	r2, r3
 800482c:	f080 80d3 	bcs.w	80049d6 <put_fat+0x1ca>
		switch (fs->fs_type) {
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	781b      	ldrb	r3, [r3, #0]
 8004834:	2b03      	cmp	r3, #3
 8004836:	f000 8096 	beq.w	8004966 <put_fat+0x15a>
 800483a:	2b03      	cmp	r3, #3
 800483c:	f300 80cb 	bgt.w	80049d6 <put_fat+0x1ca>
 8004840:	2b01      	cmp	r3, #1
 8004842:	d002      	beq.n	800484a <put_fat+0x3e>
 8004844:	2b02      	cmp	r3, #2
 8004846:	d06e      	beq.n	8004926 <put_fat+0x11a>
 8004848:	e0c5      	b.n	80049d6 <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800484a:	68bb      	ldr	r3, [r7, #8]
 800484c:	61bb      	str	r3, [r7, #24]
 800484e:	69bb      	ldr	r3, [r7, #24]
 8004850:	085b      	lsrs	r3, r3, #1
 8004852:	69ba      	ldr	r2, [r7, #24]
 8004854:	4413      	add	r3, r2
 8004856:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	6a1a      	ldr	r2, [r3, #32]
 800485c:	69bb      	ldr	r3, [r7, #24]
 800485e:	0a5b      	lsrs	r3, r3, #9
 8004860:	4413      	add	r3, r2
 8004862:	4619      	mov	r1, r3
 8004864:	68f8      	ldr	r0, [r7, #12]
 8004866:	f7ff fe6f 	bl	8004548 <move_window>
 800486a:	4603      	mov	r3, r0
 800486c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800486e:	7ffb      	ldrb	r3, [r7, #31]
 8004870:	2b00      	cmp	r3, #0
 8004872:	f040 80a9 	bne.w	80049c8 <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800487c:	69bb      	ldr	r3, [r7, #24]
 800487e:	1c59      	adds	r1, r3, #1
 8004880:	61b9      	str	r1, [r7, #24]
 8004882:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004886:	4413      	add	r3, r2
 8004888:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800488a:	68bb      	ldr	r3, [r7, #8]
 800488c:	f003 0301 	and.w	r3, r3, #1
 8004890:	2b00      	cmp	r3, #0
 8004892:	d00d      	beq.n	80048b0 <put_fat+0xa4>
 8004894:	697b      	ldr	r3, [r7, #20]
 8004896:	781b      	ldrb	r3, [r3, #0]
 8004898:	b25b      	sxtb	r3, r3
 800489a:	f003 030f 	and.w	r3, r3, #15
 800489e:	b25a      	sxtb	r2, r3
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	b25b      	sxtb	r3, r3
 80048a4:	011b      	lsls	r3, r3, #4
 80048a6:	b25b      	sxtb	r3, r3
 80048a8:	4313      	orrs	r3, r2
 80048aa:	b25b      	sxtb	r3, r3
 80048ac:	b2db      	uxtb	r3, r3
 80048ae:	e001      	b.n	80048b4 <put_fat+0xa8>
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	b2db      	uxtb	r3, r3
 80048b4:	697a      	ldr	r2, [r7, #20]
 80048b6:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	2201      	movs	r2, #1
 80048bc:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	6a1a      	ldr	r2, [r3, #32]
 80048c2:	69bb      	ldr	r3, [r7, #24]
 80048c4:	0a5b      	lsrs	r3, r3, #9
 80048c6:	4413      	add	r3, r2
 80048c8:	4619      	mov	r1, r3
 80048ca:	68f8      	ldr	r0, [r7, #12]
 80048cc:	f7ff fe3c 	bl	8004548 <move_window>
 80048d0:	4603      	mov	r3, r0
 80048d2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80048d4:	7ffb      	ldrb	r3, [r7, #31]
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d178      	bne.n	80049cc <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80048e0:	69bb      	ldr	r3, [r7, #24]
 80048e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80048e6:	4413      	add	r3, r2
 80048e8:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 80048ea:	68bb      	ldr	r3, [r7, #8]
 80048ec:	f003 0301 	and.w	r3, r3, #1
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d003      	beq.n	80048fc <put_fat+0xf0>
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	091b      	lsrs	r3, r3, #4
 80048f8:	b2db      	uxtb	r3, r3
 80048fa:	e00e      	b.n	800491a <put_fat+0x10e>
 80048fc:	697b      	ldr	r3, [r7, #20]
 80048fe:	781b      	ldrb	r3, [r3, #0]
 8004900:	b25b      	sxtb	r3, r3
 8004902:	f023 030f 	bic.w	r3, r3, #15
 8004906:	b25a      	sxtb	r2, r3
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	0a1b      	lsrs	r3, r3, #8
 800490c:	b25b      	sxtb	r3, r3
 800490e:	f003 030f 	and.w	r3, r3, #15
 8004912:	b25b      	sxtb	r3, r3
 8004914:	4313      	orrs	r3, r2
 8004916:	b25b      	sxtb	r3, r3
 8004918:	b2db      	uxtb	r3, r3
 800491a:	697a      	ldr	r2, [r7, #20]
 800491c:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	2201      	movs	r2, #1
 8004922:	70da      	strb	r2, [r3, #3]
			break;
 8004924:	e057      	b.n	80049d6 <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	6a1a      	ldr	r2, [r3, #32]
 800492a:	68bb      	ldr	r3, [r7, #8]
 800492c:	0a1b      	lsrs	r3, r3, #8
 800492e:	4413      	add	r3, r2
 8004930:	4619      	mov	r1, r3
 8004932:	68f8      	ldr	r0, [r7, #12]
 8004934:	f7ff fe08 	bl	8004548 <move_window>
 8004938:	4603      	mov	r3, r0
 800493a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800493c:	7ffb      	ldrb	r3, [r7, #31]
 800493e:	2b00      	cmp	r3, #0
 8004940:	d146      	bne.n	80049d0 <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8004948:	68bb      	ldr	r3, [r7, #8]
 800494a:	005b      	lsls	r3, r3, #1
 800494c:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 8004950:	4413      	add	r3, r2
 8004952:	687a      	ldr	r2, [r7, #4]
 8004954:	b292      	uxth	r2, r2
 8004956:	4611      	mov	r1, r2
 8004958:	4618      	mov	r0, r3
 800495a:	f7ff fb7f 	bl	800405c <st_word>
			fs->wflag = 1;
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	2201      	movs	r2, #1
 8004962:	70da      	strb	r2, [r3, #3]
			break;
 8004964:	e037      	b.n	80049d6 <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	6a1a      	ldr	r2, [r3, #32]
 800496a:	68bb      	ldr	r3, [r7, #8]
 800496c:	09db      	lsrs	r3, r3, #7
 800496e:	4413      	add	r3, r2
 8004970:	4619      	mov	r1, r3
 8004972:	68f8      	ldr	r0, [r7, #12]
 8004974:	f7ff fde8 	bl	8004548 <move_window>
 8004978:	4603      	mov	r3, r0
 800497a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800497c:	7ffb      	ldrb	r3, [r7, #31]
 800497e:	2b00      	cmp	r3, #0
 8004980:	d128      	bne.n	80049d4 <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800498e:	68bb      	ldr	r3, [r7, #8]
 8004990:	009b      	lsls	r3, r3, #2
 8004992:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8004996:	4413      	add	r3, r2
 8004998:	4618      	mov	r0, r3
 800499a:	f7ff fb3c 	bl	8004016 <ld_dword>
 800499e:	4603      	mov	r3, r0
 80049a0:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 80049a4:	4323      	orrs	r3, r4
 80049a6:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80049ae:	68bb      	ldr	r3, [r7, #8]
 80049b0:	009b      	lsls	r3, r3, #2
 80049b2:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 80049b6:	4413      	add	r3, r2
 80049b8:	6879      	ldr	r1, [r7, #4]
 80049ba:	4618      	mov	r0, r3
 80049bc:	f7ff fb69 	bl	8004092 <st_dword>
			fs->wflag = 1;
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	2201      	movs	r2, #1
 80049c4:	70da      	strb	r2, [r3, #3]
			break;
 80049c6:	e006      	b.n	80049d6 <put_fat+0x1ca>
			if (res != FR_OK) break;
 80049c8:	bf00      	nop
 80049ca:	e004      	b.n	80049d6 <put_fat+0x1ca>
			if (res != FR_OK) break;
 80049cc:	bf00      	nop
 80049ce:	e002      	b.n	80049d6 <put_fat+0x1ca>
			if (res != FR_OK) break;
 80049d0:	bf00      	nop
 80049d2:	e000      	b.n	80049d6 <put_fat+0x1ca>
			if (res != FR_OK) break;
 80049d4:	bf00      	nop
		}
	}
	return res;
 80049d6:	7ffb      	ldrb	r3, [r7, #31]
}
 80049d8:	4618      	mov	r0, r3
 80049da:	3724      	adds	r7, #36	@ 0x24
 80049dc:	46bd      	mov	sp, r7
 80049de:	bd90      	pop	{r4, r7, pc}

080049e0 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 80049e0:	b580      	push	{r7, lr}
 80049e2:	b088      	sub	sp, #32
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	60f8      	str	r0, [r7, #12]
 80049e8:	60b9      	str	r1, [r7, #8]
 80049ea:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 80049ec:	2300      	movs	r3, #0
 80049ee:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 80049f6:	68bb      	ldr	r3, [r7, #8]
 80049f8:	2b01      	cmp	r3, #1
 80049fa:	d904      	bls.n	8004a06 <remove_chain+0x26>
 80049fc:	69bb      	ldr	r3, [r7, #24]
 80049fe:	695b      	ldr	r3, [r3, #20]
 8004a00:	68ba      	ldr	r2, [r7, #8]
 8004a02:	429a      	cmp	r2, r3
 8004a04:	d301      	bcc.n	8004a0a <remove_chain+0x2a>
 8004a06:	2302      	movs	r3, #2
 8004a08:	e04b      	b.n	8004aa2 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d00c      	beq.n	8004a2a <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8004a10:	f04f 32ff 	mov.w	r2, #4294967295
 8004a14:	6879      	ldr	r1, [r7, #4]
 8004a16:	69b8      	ldr	r0, [r7, #24]
 8004a18:	f7ff fef8 	bl	800480c <put_fat>
 8004a1c:	4603      	mov	r3, r0
 8004a1e:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8004a20:	7ffb      	ldrb	r3, [r7, #31]
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d001      	beq.n	8004a2a <remove_chain+0x4a>
 8004a26:	7ffb      	ldrb	r3, [r7, #31]
 8004a28:	e03b      	b.n	8004aa2 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8004a2a:	68b9      	ldr	r1, [r7, #8]
 8004a2c:	68f8      	ldr	r0, [r7, #12]
 8004a2e:	f7ff fe46 	bl	80046be <get_fat>
 8004a32:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8004a34:	697b      	ldr	r3, [r7, #20]
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d031      	beq.n	8004a9e <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8004a3a:	697b      	ldr	r3, [r7, #20]
 8004a3c:	2b01      	cmp	r3, #1
 8004a3e:	d101      	bne.n	8004a44 <remove_chain+0x64>
 8004a40:	2302      	movs	r3, #2
 8004a42:	e02e      	b.n	8004aa2 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8004a44:	697b      	ldr	r3, [r7, #20]
 8004a46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a4a:	d101      	bne.n	8004a50 <remove_chain+0x70>
 8004a4c:	2301      	movs	r3, #1
 8004a4e:	e028      	b.n	8004aa2 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8004a50:	2200      	movs	r2, #0
 8004a52:	68b9      	ldr	r1, [r7, #8]
 8004a54:	69b8      	ldr	r0, [r7, #24]
 8004a56:	f7ff fed9 	bl	800480c <put_fat>
 8004a5a:	4603      	mov	r3, r0
 8004a5c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8004a5e:	7ffb      	ldrb	r3, [r7, #31]
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d001      	beq.n	8004a68 <remove_chain+0x88>
 8004a64:	7ffb      	ldrb	r3, [r7, #31]
 8004a66:	e01c      	b.n	8004aa2 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8004a68:	69bb      	ldr	r3, [r7, #24]
 8004a6a:	691a      	ldr	r2, [r3, #16]
 8004a6c:	69bb      	ldr	r3, [r7, #24]
 8004a6e:	695b      	ldr	r3, [r3, #20]
 8004a70:	3b02      	subs	r3, #2
 8004a72:	429a      	cmp	r2, r3
 8004a74:	d20b      	bcs.n	8004a8e <remove_chain+0xae>
			fs->free_clst++;
 8004a76:	69bb      	ldr	r3, [r7, #24]
 8004a78:	691b      	ldr	r3, [r3, #16]
 8004a7a:	1c5a      	adds	r2, r3, #1
 8004a7c:	69bb      	ldr	r3, [r7, #24]
 8004a7e:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 8004a80:	69bb      	ldr	r3, [r7, #24]
 8004a82:	791b      	ldrb	r3, [r3, #4]
 8004a84:	f043 0301 	orr.w	r3, r3, #1
 8004a88:	b2da      	uxtb	r2, r3
 8004a8a:	69bb      	ldr	r3, [r7, #24]
 8004a8c:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8004a8e:	697b      	ldr	r3, [r7, #20]
 8004a90:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8004a92:	69bb      	ldr	r3, [r7, #24]
 8004a94:	695b      	ldr	r3, [r3, #20]
 8004a96:	68ba      	ldr	r2, [r7, #8]
 8004a98:	429a      	cmp	r2, r3
 8004a9a:	d3c6      	bcc.n	8004a2a <remove_chain+0x4a>
 8004a9c:	e000      	b.n	8004aa0 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8004a9e:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8004aa0:	2300      	movs	r3, #0
}
 8004aa2:	4618      	mov	r0, r3
 8004aa4:	3720      	adds	r7, #32
 8004aa6:	46bd      	mov	sp, r7
 8004aa8:	bd80      	pop	{r7, pc}

08004aaa <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8004aaa:	b580      	push	{r7, lr}
 8004aac:	b088      	sub	sp, #32
 8004aae:	af00      	add	r7, sp, #0
 8004ab0:	6078      	str	r0, [r7, #4]
 8004ab2:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8004aba:	683b      	ldr	r3, [r7, #0]
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d10d      	bne.n	8004adc <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8004ac0:	693b      	ldr	r3, [r7, #16]
 8004ac2:	68db      	ldr	r3, [r3, #12]
 8004ac4:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8004ac6:	69bb      	ldr	r3, [r7, #24]
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d004      	beq.n	8004ad6 <create_chain+0x2c>
 8004acc:	693b      	ldr	r3, [r7, #16]
 8004ace:	695b      	ldr	r3, [r3, #20]
 8004ad0:	69ba      	ldr	r2, [r7, #24]
 8004ad2:	429a      	cmp	r2, r3
 8004ad4:	d31b      	bcc.n	8004b0e <create_chain+0x64>
 8004ad6:	2301      	movs	r3, #1
 8004ad8:	61bb      	str	r3, [r7, #24]
 8004ada:	e018      	b.n	8004b0e <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8004adc:	6839      	ldr	r1, [r7, #0]
 8004ade:	6878      	ldr	r0, [r7, #4]
 8004ae0:	f7ff fded 	bl	80046be <get_fat>
 8004ae4:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	2b01      	cmp	r3, #1
 8004aea:	d801      	bhi.n	8004af0 <create_chain+0x46>
 8004aec:	2301      	movs	r3, #1
 8004aee:	e070      	b.n	8004bd2 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004af6:	d101      	bne.n	8004afc <create_chain+0x52>
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	e06a      	b.n	8004bd2 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8004afc:	693b      	ldr	r3, [r7, #16]
 8004afe:	695b      	ldr	r3, [r3, #20]
 8004b00:	68fa      	ldr	r2, [r7, #12]
 8004b02:	429a      	cmp	r2, r3
 8004b04:	d201      	bcs.n	8004b0a <create_chain+0x60>
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	e063      	b.n	8004bd2 <create_chain+0x128>
		scl = clst;
 8004b0a:	683b      	ldr	r3, [r7, #0]
 8004b0c:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8004b0e:	69bb      	ldr	r3, [r7, #24]
 8004b10:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8004b12:	69fb      	ldr	r3, [r7, #28]
 8004b14:	3301      	adds	r3, #1
 8004b16:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8004b18:	693b      	ldr	r3, [r7, #16]
 8004b1a:	695b      	ldr	r3, [r3, #20]
 8004b1c:	69fa      	ldr	r2, [r7, #28]
 8004b1e:	429a      	cmp	r2, r3
 8004b20:	d307      	bcc.n	8004b32 <create_chain+0x88>
				ncl = 2;
 8004b22:	2302      	movs	r3, #2
 8004b24:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8004b26:	69fa      	ldr	r2, [r7, #28]
 8004b28:	69bb      	ldr	r3, [r7, #24]
 8004b2a:	429a      	cmp	r2, r3
 8004b2c:	d901      	bls.n	8004b32 <create_chain+0x88>
 8004b2e:	2300      	movs	r3, #0
 8004b30:	e04f      	b.n	8004bd2 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8004b32:	69f9      	ldr	r1, [r7, #28]
 8004b34:	6878      	ldr	r0, [r7, #4]
 8004b36:	f7ff fdc2 	bl	80046be <get_fat>
 8004b3a:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d00e      	beq.n	8004b60 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	2b01      	cmp	r3, #1
 8004b46:	d003      	beq.n	8004b50 <create_chain+0xa6>
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b4e:	d101      	bne.n	8004b54 <create_chain+0xaa>
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	e03e      	b.n	8004bd2 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8004b54:	69fa      	ldr	r2, [r7, #28]
 8004b56:	69bb      	ldr	r3, [r7, #24]
 8004b58:	429a      	cmp	r2, r3
 8004b5a:	d1da      	bne.n	8004b12 <create_chain+0x68>
 8004b5c:	2300      	movs	r3, #0
 8004b5e:	e038      	b.n	8004bd2 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8004b60:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8004b62:	f04f 32ff 	mov.w	r2, #4294967295
 8004b66:	69f9      	ldr	r1, [r7, #28]
 8004b68:	6938      	ldr	r0, [r7, #16]
 8004b6a:	f7ff fe4f 	bl	800480c <put_fat>
 8004b6e:	4603      	mov	r3, r0
 8004b70:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8004b72:	7dfb      	ldrb	r3, [r7, #23]
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d109      	bne.n	8004b8c <create_chain+0xe2>
 8004b78:	683b      	ldr	r3, [r7, #0]
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d006      	beq.n	8004b8c <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8004b7e:	69fa      	ldr	r2, [r7, #28]
 8004b80:	6839      	ldr	r1, [r7, #0]
 8004b82:	6938      	ldr	r0, [r7, #16]
 8004b84:	f7ff fe42 	bl	800480c <put_fat>
 8004b88:	4603      	mov	r3, r0
 8004b8a:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8004b8c:	7dfb      	ldrb	r3, [r7, #23]
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d116      	bne.n	8004bc0 <create_chain+0x116>
		fs->last_clst = ncl;
 8004b92:	693b      	ldr	r3, [r7, #16]
 8004b94:	69fa      	ldr	r2, [r7, #28]
 8004b96:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8004b98:	693b      	ldr	r3, [r7, #16]
 8004b9a:	691a      	ldr	r2, [r3, #16]
 8004b9c:	693b      	ldr	r3, [r7, #16]
 8004b9e:	695b      	ldr	r3, [r3, #20]
 8004ba0:	3b02      	subs	r3, #2
 8004ba2:	429a      	cmp	r2, r3
 8004ba4:	d804      	bhi.n	8004bb0 <create_chain+0x106>
 8004ba6:	693b      	ldr	r3, [r7, #16]
 8004ba8:	691b      	ldr	r3, [r3, #16]
 8004baa:	1e5a      	subs	r2, r3, #1
 8004bac:	693b      	ldr	r3, [r7, #16]
 8004bae:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 8004bb0:	693b      	ldr	r3, [r7, #16]
 8004bb2:	791b      	ldrb	r3, [r3, #4]
 8004bb4:	f043 0301 	orr.w	r3, r3, #1
 8004bb8:	b2da      	uxtb	r2, r3
 8004bba:	693b      	ldr	r3, [r7, #16]
 8004bbc:	711a      	strb	r2, [r3, #4]
 8004bbe:	e007      	b.n	8004bd0 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8004bc0:	7dfb      	ldrb	r3, [r7, #23]
 8004bc2:	2b01      	cmp	r3, #1
 8004bc4:	d102      	bne.n	8004bcc <create_chain+0x122>
 8004bc6:	f04f 33ff 	mov.w	r3, #4294967295
 8004bca:	e000      	b.n	8004bce <create_chain+0x124>
 8004bcc:	2301      	movs	r3, #1
 8004bce:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8004bd0:	69fb      	ldr	r3, [r7, #28]
}
 8004bd2:	4618      	mov	r0, r3
 8004bd4:	3720      	adds	r7, #32
 8004bd6:	46bd      	mov	sp, r7
 8004bd8:	bd80      	pop	{r7, pc}

08004bda <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8004bda:	b480      	push	{r7}
 8004bdc:	b087      	sub	sp, #28
 8004bde:	af00      	add	r7, sp, #0
 8004be0:	6078      	str	r0, [r7, #4]
 8004be2:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004bee:	3304      	adds	r3, #4
 8004bf0:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8004bf2:	683b      	ldr	r3, [r7, #0]
 8004bf4:	0a5b      	lsrs	r3, r3, #9
 8004bf6:	68fa      	ldr	r2, [r7, #12]
 8004bf8:	8952      	ldrh	r2, [r2, #10]
 8004bfa:	fbb3 f3f2 	udiv	r3, r3, r2
 8004bfe:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8004c00:	693b      	ldr	r3, [r7, #16]
 8004c02:	1d1a      	adds	r2, r3, #4
 8004c04:	613a      	str	r2, [r7, #16]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8004c0a:	68bb      	ldr	r3, [r7, #8]
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d101      	bne.n	8004c14 <clmt_clust+0x3a>
 8004c10:	2300      	movs	r3, #0
 8004c12:	e010      	b.n	8004c36 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 8004c14:	697a      	ldr	r2, [r7, #20]
 8004c16:	68bb      	ldr	r3, [r7, #8]
 8004c18:	429a      	cmp	r2, r3
 8004c1a:	d307      	bcc.n	8004c2c <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 8004c1c:	697a      	ldr	r2, [r7, #20]
 8004c1e:	68bb      	ldr	r3, [r7, #8]
 8004c20:	1ad3      	subs	r3, r2, r3
 8004c22:	617b      	str	r3, [r7, #20]
 8004c24:	693b      	ldr	r3, [r7, #16]
 8004c26:	3304      	adds	r3, #4
 8004c28:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8004c2a:	e7e9      	b.n	8004c00 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 8004c2c:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8004c2e:	693b      	ldr	r3, [r7, #16]
 8004c30:	681a      	ldr	r2, [r3, #0]
 8004c32:	697b      	ldr	r3, [r7, #20]
 8004c34:	4413      	add	r3, r2
}
 8004c36:	4618      	mov	r0, r3
 8004c38:	371c      	adds	r7, #28
 8004c3a:	46bd      	mov	sp, r7
 8004c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c40:	4770      	bx	lr

08004c42 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8004c42:	b580      	push	{r7, lr}
 8004c44:	b086      	sub	sp, #24
 8004c46:	af00      	add	r7, sp, #0
 8004c48:	6078      	str	r0, [r7, #4]
 8004c4a:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8004c52:	683b      	ldr	r3, [r7, #0]
 8004c54:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004c58:	d204      	bcs.n	8004c64 <dir_sdi+0x22>
 8004c5a:	683b      	ldr	r3, [r7, #0]
 8004c5c:	f003 031f 	and.w	r3, r3, #31
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d001      	beq.n	8004c68 <dir_sdi+0x26>
		return FR_INT_ERR;
 8004c64:	2302      	movs	r3, #2
 8004c66:	e063      	b.n	8004d30 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	683a      	ldr	r2, [r7, #0]
 8004c6c:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	689b      	ldr	r3, [r3, #8]
 8004c72:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8004c74:	697b      	ldr	r3, [r7, #20]
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d106      	bne.n	8004c88 <dir_sdi+0x46>
 8004c7a:	693b      	ldr	r3, [r7, #16]
 8004c7c:	781b      	ldrb	r3, [r3, #0]
 8004c7e:	2b02      	cmp	r3, #2
 8004c80:	d902      	bls.n	8004c88 <dir_sdi+0x46>
		clst = fs->dirbase;
 8004c82:	693b      	ldr	r3, [r7, #16]
 8004c84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c86:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8004c88:	697b      	ldr	r3, [r7, #20]
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d10c      	bne.n	8004ca8 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8004c8e:	683b      	ldr	r3, [r7, #0]
 8004c90:	095b      	lsrs	r3, r3, #5
 8004c92:	693a      	ldr	r2, [r7, #16]
 8004c94:	8912      	ldrh	r2, [r2, #8]
 8004c96:	4293      	cmp	r3, r2
 8004c98:	d301      	bcc.n	8004c9e <dir_sdi+0x5c>
 8004c9a:	2302      	movs	r3, #2
 8004c9c:	e048      	b.n	8004d30 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8004c9e:	693b      	ldr	r3, [r7, #16]
 8004ca0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	61da      	str	r2, [r3, #28]
 8004ca6:	e029      	b.n	8004cfc <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8004ca8:	693b      	ldr	r3, [r7, #16]
 8004caa:	895b      	ldrh	r3, [r3, #10]
 8004cac:	025b      	lsls	r3, r3, #9
 8004cae:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8004cb0:	e019      	b.n	8004ce6 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	6979      	ldr	r1, [r7, #20]
 8004cb6:	4618      	mov	r0, r3
 8004cb8:	f7ff fd01 	bl	80046be <get_fat>
 8004cbc:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8004cbe:	697b      	ldr	r3, [r7, #20]
 8004cc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cc4:	d101      	bne.n	8004cca <dir_sdi+0x88>
 8004cc6:	2301      	movs	r3, #1
 8004cc8:	e032      	b.n	8004d30 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8004cca:	697b      	ldr	r3, [r7, #20]
 8004ccc:	2b01      	cmp	r3, #1
 8004cce:	d904      	bls.n	8004cda <dir_sdi+0x98>
 8004cd0:	693b      	ldr	r3, [r7, #16]
 8004cd2:	695b      	ldr	r3, [r3, #20]
 8004cd4:	697a      	ldr	r2, [r7, #20]
 8004cd6:	429a      	cmp	r2, r3
 8004cd8:	d301      	bcc.n	8004cde <dir_sdi+0x9c>
 8004cda:	2302      	movs	r3, #2
 8004cdc:	e028      	b.n	8004d30 <dir_sdi+0xee>
			ofs -= csz;
 8004cde:	683a      	ldr	r2, [r7, #0]
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	1ad3      	subs	r3, r2, r3
 8004ce4:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8004ce6:	683a      	ldr	r2, [r7, #0]
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	429a      	cmp	r2, r3
 8004cec:	d2e1      	bcs.n	8004cb2 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 8004cee:	6979      	ldr	r1, [r7, #20]
 8004cf0:	6938      	ldr	r0, [r7, #16]
 8004cf2:	f7ff fcc5 	bl	8004680 <clust2sect>
 8004cf6:	4602      	mov	r2, r0
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	697a      	ldr	r2, [r7, #20]
 8004d00:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	69db      	ldr	r3, [r3, #28]
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d101      	bne.n	8004d0e <dir_sdi+0xcc>
 8004d0a:	2302      	movs	r3, #2
 8004d0c:	e010      	b.n	8004d30 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	69da      	ldr	r2, [r3, #28]
 8004d12:	683b      	ldr	r3, [r7, #0]
 8004d14:	0a5b      	lsrs	r3, r3, #9
 8004d16:	441a      	add	r2, r3
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8004d1c:	693b      	ldr	r3, [r7, #16]
 8004d1e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8004d22:	683b      	ldr	r3, [r7, #0]
 8004d24:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d28:	441a      	add	r2, r3
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8004d2e:	2300      	movs	r3, #0
}
 8004d30:	4618      	mov	r0, r3
 8004d32:	3718      	adds	r7, #24
 8004d34:	46bd      	mov	sp, r7
 8004d36:	bd80      	pop	{r7, pc}

08004d38 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8004d38:	b580      	push	{r7, lr}
 8004d3a:	b086      	sub	sp, #24
 8004d3c:	af00      	add	r7, sp, #0
 8004d3e:	6078      	str	r0, [r7, #4]
 8004d40:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	695b      	ldr	r3, [r3, #20]
 8004d4c:	3320      	adds	r3, #32
 8004d4e:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	69db      	ldr	r3, [r3, #28]
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d003      	beq.n	8004d60 <dir_next+0x28>
 8004d58:	68bb      	ldr	r3, [r7, #8]
 8004d5a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004d5e:	d301      	bcc.n	8004d64 <dir_next+0x2c>
 8004d60:	2304      	movs	r3, #4
 8004d62:	e0aa      	b.n	8004eba <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8004d64:	68bb      	ldr	r3, [r7, #8]
 8004d66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	f040 8098 	bne.w	8004ea0 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	69db      	ldr	r3, [r3, #28]
 8004d74:	1c5a      	adds	r2, r3, #1
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	699b      	ldr	r3, [r3, #24]
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d10b      	bne.n	8004d9a <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8004d82:	68bb      	ldr	r3, [r7, #8]
 8004d84:	095b      	lsrs	r3, r3, #5
 8004d86:	68fa      	ldr	r2, [r7, #12]
 8004d88:	8912      	ldrh	r2, [r2, #8]
 8004d8a:	4293      	cmp	r3, r2
 8004d8c:	f0c0 8088 	bcc.w	8004ea0 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	2200      	movs	r2, #0
 8004d94:	61da      	str	r2, [r3, #28]
 8004d96:	2304      	movs	r3, #4
 8004d98:	e08f      	b.n	8004eba <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8004d9a:	68bb      	ldr	r3, [r7, #8]
 8004d9c:	0a5b      	lsrs	r3, r3, #9
 8004d9e:	68fa      	ldr	r2, [r7, #12]
 8004da0:	8952      	ldrh	r2, [r2, #10]
 8004da2:	3a01      	subs	r2, #1
 8004da4:	4013      	ands	r3, r2
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d17a      	bne.n	8004ea0 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8004daa:	687a      	ldr	r2, [r7, #4]
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	699b      	ldr	r3, [r3, #24]
 8004db0:	4619      	mov	r1, r3
 8004db2:	4610      	mov	r0, r2
 8004db4:	f7ff fc83 	bl	80046be <get_fat>
 8004db8:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8004dba:	697b      	ldr	r3, [r7, #20]
 8004dbc:	2b01      	cmp	r3, #1
 8004dbe:	d801      	bhi.n	8004dc4 <dir_next+0x8c>
 8004dc0:	2302      	movs	r3, #2
 8004dc2:	e07a      	b.n	8004eba <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8004dc4:	697b      	ldr	r3, [r7, #20]
 8004dc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004dca:	d101      	bne.n	8004dd0 <dir_next+0x98>
 8004dcc:	2301      	movs	r3, #1
 8004dce:	e074      	b.n	8004eba <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	695b      	ldr	r3, [r3, #20]
 8004dd4:	697a      	ldr	r2, [r7, #20]
 8004dd6:	429a      	cmp	r2, r3
 8004dd8:	d358      	bcc.n	8004e8c <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8004dda:	683b      	ldr	r3, [r7, #0]
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d104      	bne.n	8004dea <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	2200      	movs	r2, #0
 8004de4:	61da      	str	r2, [r3, #28]
 8004de6:	2304      	movs	r3, #4
 8004de8:	e067      	b.n	8004eba <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8004dea:	687a      	ldr	r2, [r7, #4]
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	699b      	ldr	r3, [r3, #24]
 8004df0:	4619      	mov	r1, r3
 8004df2:	4610      	mov	r0, r2
 8004df4:	f7ff fe59 	bl	8004aaa <create_chain>
 8004df8:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8004dfa:	697b      	ldr	r3, [r7, #20]
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d101      	bne.n	8004e04 <dir_next+0xcc>
 8004e00:	2307      	movs	r3, #7
 8004e02:	e05a      	b.n	8004eba <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8004e04:	697b      	ldr	r3, [r7, #20]
 8004e06:	2b01      	cmp	r3, #1
 8004e08:	d101      	bne.n	8004e0e <dir_next+0xd6>
 8004e0a:	2302      	movs	r3, #2
 8004e0c:	e055      	b.n	8004eba <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8004e0e:	697b      	ldr	r3, [r7, #20]
 8004e10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e14:	d101      	bne.n	8004e1a <dir_next+0xe2>
 8004e16:	2301      	movs	r3, #1
 8004e18:	e04f      	b.n	8004eba <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8004e1a:	68f8      	ldr	r0, [r7, #12]
 8004e1c:	f7ff fb50 	bl	80044c0 <sync_window>
 8004e20:	4603      	mov	r3, r0
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d001      	beq.n	8004e2a <dir_next+0xf2>
 8004e26:	2301      	movs	r3, #1
 8004e28:	e047      	b.n	8004eba <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	3330      	adds	r3, #48	@ 0x30
 8004e2e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004e32:	2100      	movs	r1, #0
 8004e34:	4618      	mov	r0, r3
 8004e36:	f7ff f979 	bl	800412c <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8004e3a:	2300      	movs	r3, #0
 8004e3c:	613b      	str	r3, [r7, #16]
 8004e3e:	6979      	ldr	r1, [r7, #20]
 8004e40:	68f8      	ldr	r0, [r7, #12]
 8004e42:	f7ff fc1d 	bl	8004680 <clust2sect>
 8004e46:	4602      	mov	r2, r0
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	62da      	str	r2, [r3, #44]	@ 0x2c
 8004e4c:	e012      	b.n	8004e74 <dir_next+0x13c>
						fs->wflag = 1;
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	2201      	movs	r2, #1
 8004e52:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8004e54:	68f8      	ldr	r0, [r7, #12]
 8004e56:	f7ff fb33 	bl	80044c0 <sync_window>
 8004e5a:	4603      	mov	r3, r0
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d001      	beq.n	8004e64 <dir_next+0x12c>
 8004e60:	2301      	movs	r3, #1
 8004e62:	e02a      	b.n	8004eba <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8004e64:	693b      	ldr	r3, [r7, #16]
 8004e66:	3301      	adds	r3, #1
 8004e68:	613b      	str	r3, [r7, #16]
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e6e:	1c5a      	adds	r2, r3, #1
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	62da      	str	r2, [r3, #44]	@ 0x2c
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	895b      	ldrh	r3, [r3, #10]
 8004e78:	461a      	mov	r2, r3
 8004e7a:	693b      	ldr	r3, [r7, #16]
 8004e7c:	4293      	cmp	r3, r2
 8004e7e:	d3e6      	bcc.n	8004e4e <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004e84:	693b      	ldr	r3, [r7, #16]
 8004e86:	1ad2      	subs	r2, r2, r3
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	62da      	str	r2, [r3, #44]	@ 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	697a      	ldr	r2, [r7, #20]
 8004e90:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8004e92:	6979      	ldr	r1, [r7, #20]
 8004e94:	68f8      	ldr	r0, [r7, #12]
 8004e96:	f7ff fbf3 	bl	8004680 <clust2sect>
 8004e9a:	4602      	mov	r2, r0
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	68ba      	ldr	r2, [r7, #8]
 8004ea4:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8004eac:	68bb      	ldr	r3, [r7, #8]
 8004eae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004eb2:	441a      	add	r2, r3
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8004eb8:	2300      	movs	r3, #0
}
 8004eba:	4618      	mov	r0, r3
 8004ebc:	3718      	adds	r7, #24
 8004ebe:	46bd      	mov	sp, r7
 8004ec0:	bd80      	pop	{r7, pc}

08004ec2 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8004ec2:	b580      	push	{r7, lr}
 8004ec4:	b086      	sub	sp, #24
 8004ec6:	af00      	add	r7, sp, #0
 8004ec8:	6078      	str	r0, [r7, #4]
 8004eca:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8004ed2:	2100      	movs	r1, #0
 8004ed4:	6878      	ldr	r0, [r7, #4]
 8004ed6:	f7ff feb4 	bl	8004c42 <dir_sdi>
 8004eda:	4603      	mov	r3, r0
 8004edc:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8004ede:	7dfb      	ldrb	r3, [r7, #23]
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d12b      	bne.n	8004f3c <dir_alloc+0x7a>
		n = 0;
 8004ee4:	2300      	movs	r3, #0
 8004ee6:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	69db      	ldr	r3, [r3, #28]
 8004eec:	4619      	mov	r1, r3
 8004eee:	68f8      	ldr	r0, [r7, #12]
 8004ef0:	f7ff fb2a 	bl	8004548 <move_window>
 8004ef4:	4603      	mov	r3, r0
 8004ef6:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8004ef8:	7dfb      	ldrb	r3, [r7, #23]
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d11d      	bne.n	8004f3a <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	6a1b      	ldr	r3, [r3, #32]
 8004f02:	781b      	ldrb	r3, [r3, #0]
 8004f04:	2be5      	cmp	r3, #229	@ 0xe5
 8004f06:	d004      	beq.n	8004f12 <dir_alloc+0x50>
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	6a1b      	ldr	r3, [r3, #32]
 8004f0c:	781b      	ldrb	r3, [r3, #0]
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d107      	bne.n	8004f22 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8004f12:	693b      	ldr	r3, [r7, #16]
 8004f14:	3301      	adds	r3, #1
 8004f16:	613b      	str	r3, [r7, #16]
 8004f18:	693a      	ldr	r2, [r7, #16]
 8004f1a:	683b      	ldr	r3, [r7, #0]
 8004f1c:	429a      	cmp	r2, r3
 8004f1e:	d102      	bne.n	8004f26 <dir_alloc+0x64>
 8004f20:	e00c      	b.n	8004f3c <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8004f22:	2300      	movs	r3, #0
 8004f24:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8004f26:	2101      	movs	r1, #1
 8004f28:	6878      	ldr	r0, [r7, #4]
 8004f2a:	f7ff ff05 	bl	8004d38 <dir_next>
 8004f2e:	4603      	mov	r3, r0
 8004f30:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8004f32:	7dfb      	ldrb	r3, [r7, #23]
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d0d7      	beq.n	8004ee8 <dir_alloc+0x26>
 8004f38:	e000      	b.n	8004f3c <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8004f3a:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8004f3c:	7dfb      	ldrb	r3, [r7, #23]
 8004f3e:	2b04      	cmp	r3, #4
 8004f40:	d101      	bne.n	8004f46 <dir_alloc+0x84>
 8004f42:	2307      	movs	r3, #7
 8004f44:	75fb      	strb	r3, [r7, #23]
	return res;
 8004f46:	7dfb      	ldrb	r3, [r7, #23]
}
 8004f48:	4618      	mov	r0, r3
 8004f4a:	3718      	adds	r7, #24
 8004f4c:	46bd      	mov	sp, r7
 8004f4e:	bd80      	pop	{r7, pc}

08004f50 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8004f50:	b580      	push	{r7, lr}
 8004f52:	b084      	sub	sp, #16
 8004f54:	af00      	add	r7, sp, #0
 8004f56:	6078      	str	r0, [r7, #4]
 8004f58:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8004f5a:	683b      	ldr	r3, [r7, #0]
 8004f5c:	331a      	adds	r3, #26
 8004f5e:	4618      	mov	r0, r3
 8004f60:	f7ff f840 	bl	8003fe4 <ld_word>
 8004f64:	4603      	mov	r3, r0
 8004f66:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	781b      	ldrb	r3, [r3, #0]
 8004f6c:	2b03      	cmp	r3, #3
 8004f6e:	d109      	bne.n	8004f84 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8004f70:	683b      	ldr	r3, [r7, #0]
 8004f72:	3314      	adds	r3, #20
 8004f74:	4618      	mov	r0, r3
 8004f76:	f7ff f835 	bl	8003fe4 <ld_word>
 8004f7a:	4603      	mov	r3, r0
 8004f7c:	041b      	lsls	r3, r3, #16
 8004f7e:	68fa      	ldr	r2, [r7, #12]
 8004f80:	4313      	orrs	r3, r2
 8004f82:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8004f84:	68fb      	ldr	r3, [r7, #12]
}
 8004f86:	4618      	mov	r0, r3
 8004f88:	3710      	adds	r7, #16
 8004f8a:	46bd      	mov	sp, r7
 8004f8c:	bd80      	pop	{r7, pc}

08004f8e <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8004f8e:	b580      	push	{r7, lr}
 8004f90:	b084      	sub	sp, #16
 8004f92:	af00      	add	r7, sp, #0
 8004f94:	60f8      	str	r0, [r7, #12]
 8004f96:	60b9      	str	r1, [r7, #8]
 8004f98:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8004f9a:	68bb      	ldr	r3, [r7, #8]
 8004f9c:	331a      	adds	r3, #26
 8004f9e:	687a      	ldr	r2, [r7, #4]
 8004fa0:	b292      	uxth	r2, r2
 8004fa2:	4611      	mov	r1, r2
 8004fa4:	4618      	mov	r0, r3
 8004fa6:	f7ff f859 	bl	800405c <st_word>
	if (fs->fs_type == FS_FAT32) {
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	781b      	ldrb	r3, [r3, #0]
 8004fae:	2b03      	cmp	r3, #3
 8004fb0:	d109      	bne.n	8004fc6 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8004fb2:	68bb      	ldr	r3, [r7, #8]
 8004fb4:	f103 0214 	add.w	r2, r3, #20
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	0c1b      	lsrs	r3, r3, #16
 8004fbc:	b29b      	uxth	r3, r3
 8004fbe:	4619      	mov	r1, r3
 8004fc0:	4610      	mov	r0, r2
 8004fc2:	f7ff f84b 	bl	800405c <st_word>
	}
}
 8004fc6:	bf00      	nop
 8004fc8:	3710      	adds	r7, #16
 8004fca:	46bd      	mov	sp, r7
 8004fcc:	bd80      	pop	{r7, pc}

08004fce <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8004fce:	b580      	push	{r7, lr}
 8004fd0:	b086      	sub	sp, #24
 8004fd2:	af00      	add	r7, sp, #0
 8004fd4:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8004fdc:	2100      	movs	r1, #0
 8004fde:	6878      	ldr	r0, [r7, #4]
 8004fe0:	f7ff fe2f 	bl	8004c42 <dir_sdi>
 8004fe4:	4603      	mov	r3, r0
 8004fe6:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8004fe8:	7dfb      	ldrb	r3, [r7, #23]
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d001      	beq.n	8004ff2 <dir_find+0x24>
 8004fee:	7dfb      	ldrb	r3, [r7, #23]
 8004ff0:	e03e      	b.n	8005070 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	69db      	ldr	r3, [r3, #28]
 8004ff6:	4619      	mov	r1, r3
 8004ff8:	6938      	ldr	r0, [r7, #16]
 8004ffa:	f7ff faa5 	bl	8004548 <move_window>
 8004ffe:	4603      	mov	r3, r0
 8005000:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8005002:	7dfb      	ldrb	r3, [r7, #23]
 8005004:	2b00      	cmp	r3, #0
 8005006:	d12f      	bne.n	8005068 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	6a1b      	ldr	r3, [r3, #32]
 800500c:	781b      	ldrb	r3, [r3, #0]
 800500e:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8005010:	7bfb      	ldrb	r3, [r7, #15]
 8005012:	2b00      	cmp	r3, #0
 8005014:	d102      	bne.n	800501c <dir_find+0x4e>
 8005016:	2304      	movs	r3, #4
 8005018:	75fb      	strb	r3, [r7, #23]
 800501a:	e028      	b.n	800506e <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	6a1b      	ldr	r3, [r3, #32]
 8005020:	330b      	adds	r3, #11
 8005022:	781b      	ldrb	r3, [r3, #0]
 8005024:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005028:	b2da      	uxtb	r2, r3
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	6a1b      	ldr	r3, [r3, #32]
 8005032:	330b      	adds	r3, #11
 8005034:	781b      	ldrb	r3, [r3, #0]
 8005036:	f003 0308 	and.w	r3, r3, #8
 800503a:	2b00      	cmp	r3, #0
 800503c:	d10a      	bne.n	8005054 <dir_find+0x86>
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	6a18      	ldr	r0, [r3, #32]
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	3324      	adds	r3, #36	@ 0x24
 8005046:	220b      	movs	r2, #11
 8005048:	4619      	mov	r1, r3
 800504a:	f7ff f88a 	bl	8004162 <mem_cmp>
 800504e:	4603      	mov	r3, r0
 8005050:	2b00      	cmp	r3, #0
 8005052:	d00b      	beq.n	800506c <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8005054:	2100      	movs	r1, #0
 8005056:	6878      	ldr	r0, [r7, #4]
 8005058:	f7ff fe6e 	bl	8004d38 <dir_next>
 800505c:	4603      	mov	r3, r0
 800505e:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8005060:	7dfb      	ldrb	r3, [r7, #23]
 8005062:	2b00      	cmp	r3, #0
 8005064:	d0c5      	beq.n	8004ff2 <dir_find+0x24>
 8005066:	e002      	b.n	800506e <dir_find+0xa0>
		if (res != FR_OK) break;
 8005068:	bf00      	nop
 800506a:	e000      	b.n	800506e <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800506c:	bf00      	nop

	return res;
 800506e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005070:	4618      	mov	r0, r3
 8005072:	3718      	adds	r7, #24
 8005074:	46bd      	mov	sp, r7
 8005076:	bd80      	pop	{r7, pc}

08005078 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8005078:	b580      	push	{r7, lr}
 800507a:	b084      	sub	sp, #16
 800507c:	af00      	add	r7, sp, #0
 800507e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8005086:	2101      	movs	r1, #1
 8005088:	6878      	ldr	r0, [r7, #4]
 800508a:	f7ff ff1a 	bl	8004ec2 <dir_alloc>
 800508e:	4603      	mov	r3, r0
 8005090:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8005092:	7bfb      	ldrb	r3, [r7, #15]
 8005094:	2b00      	cmp	r3, #0
 8005096:	d11c      	bne.n	80050d2 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	69db      	ldr	r3, [r3, #28]
 800509c:	4619      	mov	r1, r3
 800509e:	68b8      	ldr	r0, [r7, #8]
 80050a0:	f7ff fa52 	bl	8004548 <move_window>
 80050a4:	4603      	mov	r3, r0
 80050a6:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 80050a8:	7bfb      	ldrb	r3, [r7, #15]
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d111      	bne.n	80050d2 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	6a1b      	ldr	r3, [r3, #32]
 80050b2:	2220      	movs	r2, #32
 80050b4:	2100      	movs	r1, #0
 80050b6:	4618      	mov	r0, r3
 80050b8:	f7ff f838 	bl	800412c <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	6a18      	ldr	r0, [r3, #32]
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	3324      	adds	r3, #36	@ 0x24
 80050c4:	220b      	movs	r2, #11
 80050c6:	4619      	mov	r1, r3
 80050c8:	f7ff f80f 	bl	80040ea <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 80050cc:	68bb      	ldr	r3, [r7, #8]
 80050ce:	2201      	movs	r2, #1
 80050d0:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 80050d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80050d4:	4618      	mov	r0, r3
 80050d6:	3710      	adds	r7, #16
 80050d8:	46bd      	mov	sp, r7
 80050da:	bd80      	pop	{r7, pc}

080050dc <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 80050dc:	b580      	push	{r7, lr}
 80050de:	b088      	sub	sp, #32
 80050e0:	af00      	add	r7, sp, #0
 80050e2:	6078      	str	r0, [r7, #4]
 80050e4:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 80050e6:	683b      	ldr	r3, [r7, #0]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	60fb      	str	r3, [r7, #12]
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	3324      	adds	r3, #36	@ 0x24
 80050f0:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 80050f2:	220b      	movs	r2, #11
 80050f4:	2120      	movs	r1, #32
 80050f6:	68b8      	ldr	r0, [r7, #8]
 80050f8:	f7ff f818 	bl	800412c <mem_set>
	si = i = 0; ni = 8;
 80050fc:	2300      	movs	r3, #0
 80050fe:	613b      	str	r3, [r7, #16]
 8005100:	693b      	ldr	r3, [r7, #16]
 8005102:	61fb      	str	r3, [r7, #28]
 8005104:	2308      	movs	r3, #8
 8005106:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8005108:	69fb      	ldr	r3, [r7, #28]
 800510a:	1c5a      	adds	r2, r3, #1
 800510c:	61fa      	str	r2, [r7, #28]
 800510e:	68fa      	ldr	r2, [r7, #12]
 8005110:	4413      	add	r3, r2
 8005112:	781b      	ldrb	r3, [r3, #0]
 8005114:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 8005116:	7efb      	ldrb	r3, [r7, #27]
 8005118:	2b20      	cmp	r3, #32
 800511a:	d94e      	bls.n	80051ba <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800511c:	7efb      	ldrb	r3, [r7, #27]
 800511e:	2b2f      	cmp	r3, #47	@ 0x2f
 8005120:	d006      	beq.n	8005130 <create_name+0x54>
 8005122:	7efb      	ldrb	r3, [r7, #27]
 8005124:	2b5c      	cmp	r3, #92	@ 0x5c
 8005126:	d110      	bne.n	800514a <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8005128:	e002      	b.n	8005130 <create_name+0x54>
 800512a:	69fb      	ldr	r3, [r7, #28]
 800512c:	3301      	adds	r3, #1
 800512e:	61fb      	str	r3, [r7, #28]
 8005130:	68fa      	ldr	r2, [r7, #12]
 8005132:	69fb      	ldr	r3, [r7, #28]
 8005134:	4413      	add	r3, r2
 8005136:	781b      	ldrb	r3, [r3, #0]
 8005138:	2b2f      	cmp	r3, #47	@ 0x2f
 800513a:	d0f6      	beq.n	800512a <create_name+0x4e>
 800513c:	68fa      	ldr	r2, [r7, #12]
 800513e:	69fb      	ldr	r3, [r7, #28]
 8005140:	4413      	add	r3, r2
 8005142:	781b      	ldrb	r3, [r3, #0]
 8005144:	2b5c      	cmp	r3, #92	@ 0x5c
 8005146:	d0f0      	beq.n	800512a <create_name+0x4e>
			break;
 8005148:	e038      	b.n	80051bc <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800514a:	7efb      	ldrb	r3, [r7, #27]
 800514c:	2b2e      	cmp	r3, #46	@ 0x2e
 800514e:	d003      	beq.n	8005158 <create_name+0x7c>
 8005150:	693a      	ldr	r2, [r7, #16]
 8005152:	697b      	ldr	r3, [r7, #20]
 8005154:	429a      	cmp	r2, r3
 8005156:	d30c      	bcc.n	8005172 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8005158:	697b      	ldr	r3, [r7, #20]
 800515a:	2b0b      	cmp	r3, #11
 800515c:	d002      	beq.n	8005164 <create_name+0x88>
 800515e:	7efb      	ldrb	r3, [r7, #27]
 8005160:	2b2e      	cmp	r3, #46	@ 0x2e
 8005162:	d001      	beq.n	8005168 <create_name+0x8c>
 8005164:	2306      	movs	r3, #6
 8005166:	e044      	b.n	80051f2 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8005168:	2308      	movs	r3, #8
 800516a:	613b      	str	r3, [r7, #16]
 800516c:	230b      	movs	r3, #11
 800516e:	617b      	str	r3, [r7, #20]
			continue;
 8005170:	e022      	b.n	80051b8 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 8005172:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8005176:	2b00      	cmp	r3, #0
 8005178:	da04      	bge.n	8005184 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800517a:	7efb      	ldrb	r3, [r7, #27]
 800517c:	3b80      	subs	r3, #128	@ 0x80
 800517e:	4a1f      	ldr	r2, [pc, #124]	@ (80051fc <create_name+0x120>)
 8005180:	5cd3      	ldrb	r3, [r2, r3]
 8005182:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8005184:	7efb      	ldrb	r3, [r7, #27]
 8005186:	4619      	mov	r1, r3
 8005188:	481d      	ldr	r0, [pc, #116]	@ (8005200 <create_name+0x124>)
 800518a:	f7ff f811 	bl	80041b0 <chk_chr>
 800518e:	4603      	mov	r3, r0
 8005190:	2b00      	cmp	r3, #0
 8005192:	d001      	beq.n	8005198 <create_name+0xbc>
 8005194:	2306      	movs	r3, #6
 8005196:	e02c      	b.n	80051f2 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8005198:	7efb      	ldrb	r3, [r7, #27]
 800519a:	2b60      	cmp	r3, #96	@ 0x60
 800519c:	d905      	bls.n	80051aa <create_name+0xce>
 800519e:	7efb      	ldrb	r3, [r7, #27]
 80051a0:	2b7a      	cmp	r3, #122	@ 0x7a
 80051a2:	d802      	bhi.n	80051aa <create_name+0xce>
 80051a4:	7efb      	ldrb	r3, [r7, #27]
 80051a6:	3b20      	subs	r3, #32
 80051a8:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 80051aa:	693b      	ldr	r3, [r7, #16]
 80051ac:	1c5a      	adds	r2, r3, #1
 80051ae:	613a      	str	r2, [r7, #16]
 80051b0:	68ba      	ldr	r2, [r7, #8]
 80051b2:	4413      	add	r3, r2
 80051b4:	7efa      	ldrb	r2, [r7, #27]
 80051b6:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 80051b8:	e7a6      	b.n	8005108 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 80051ba:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 80051bc:	68fa      	ldr	r2, [r7, #12]
 80051be:	69fb      	ldr	r3, [r7, #28]
 80051c0:	441a      	add	r2, r3
 80051c2:	683b      	ldr	r3, [r7, #0]
 80051c4:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 80051c6:	693b      	ldr	r3, [r7, #16]
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d101      	bne.n	80051d0 <create_name+0xf4>
 80051cc:	2306      	movs	r3, #6
 80051ce:	e010      	b.n	80051f2 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 80051d0:	68bb      	ldr	r3, [r7, #8]
 80051d2:	781b      	ldrb	r3, [r3, #0]
 80051d4:	2be5      	cmp	r3, #229	@ 0xe5
 80051d6:	d102      	bne.n	80051de <create_name+0x102>
 80051d8:	68bb      	ldr	r3, [r7, #8]
 80051da:	2205      	movs	r2, #5
 80051dc:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 80051de:	7efb      	ldrb	r3, [r7, #27]
 80051e0:	2b20      	cmp	r3, #32
 80051e2:	d801      	bhi.n	80051e8 <create_name+0x10c>
 80051e4:	2204      	movs	r2, #4
 80051e6:	e000      	b.n	80051ea <create_name+0x10e>
 80051e8:	2200      	movs	r2, #0
 80051ea:	68bb      	ldr	r3, [r7, #8]
 80051ec:	330b      	adds	r3, #11
 80051ee:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 80051f0:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 80051f2:	4618      	mov	r0, r3
 80051f4:	3720      	adds	r7, #32
 80051f6:	46bd      	mov	sp, r7
 80051f8:	bd80      	pop	{r7, pc}
 80051fa:	bf00      	nop
 80051fc:	080065c0 	.word	0x080065c0
 8005200:	0800653c 	.word	0x0800653c

08005204 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8005204:	b580      	push	{r7, lr}
 8005206:	b086      	sub	sp, #24
 8005208:	af00      	add	r7, sp, #0
 800520a:	6078      	str	r0, [r7, #4]
 800520c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8005212:	693b      	ldr	r3, [r7, #16]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8005218:	e002      	b.n	8005220 <follow_path+0x1c>
 800521a:	683b      	ldr	r3, [r7, #0]
 800521c:	3301      	adds	r3, #1
 800521e:	603b      	str	r3, [r7, #0]
 8005220:	683b      	ldr	r3, [r7, #0]
 8005222:	781b      	ldrb	r3, [r3, #0]
 8005224:	2b2f      	cmp	r3, #47	@ 0x2f
 8005226:	d0f8      	beq.n	800521a <follow_path+0x16>
 8005228:	683b      	ldr	r3, [r7, #0]
 800522a:	781b      	ldrb	r3, [r3, #0]
 800522c:	2b5c      	cmp	r3, #92	@ 0x5c
 800522e:	d0f4      	beq.n	800521a <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8005230:	693b      	ldr	r3, [r7, #16]
 8005232:	2200      	movs	r2, #0
 8005234:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8005236:	683b      	ldr	r3, [r7, #0]
 8005238:	781b      	ldrb	r3, [r3, #0]
 800523a:	2b1f      	cmp	r3, #31
 800523c:	d80a      	bhi.n	8005254 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	2280      	movs	r2, #128	@ 0x80
 8005242:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 8005246:	2100      	movs	r1, #0
 8005248:	6878      	ldr	r0, [r7, #4]
 800524a:	f7ff fcfa 	bl	8004c42 <dir_sdi>
 800524e:	4603      	mov	r3, r0
 8005250:	75fb      	strb	r3, [r7, #23]
 8005252:	e043      	b.n	80052dc <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8005254:	463b      	mov	r3, r7
 8005256:	4619      	mov	r1, r3
 8005258:	6878      	ldr	r0, [r7, #4]
 800525a:	f7ff ff3f 	bl	80050dc <create_name>
 800525e:	4603      	mov	r3, r0
 8005260:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8005262:	7dfb      	ldrb	r3, [r7, #23]
 8005264:	2b00      	cmp	r3, #0
 8005266:	d134      	bne.n	80052d2 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 8005268:	6878      	ldr	r0, [r7, #4]
 800526a:	f7ff feb0 	bl	8004fce <dir_find>
 800526e:	4603      	mov	r3, r0
 8005270:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8005278:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800527a:	7dfb      	ldrb	r3, [r7, #23]
 800527c:	2b00      	cmp	r3, #0
 800527e:	d00a      	beq.n	8005296 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8005280:	7dfb      	ldrb	r3, [r7, #23]
 8005282:	2b04      	cmp	r3, #4
 8005284:	d127      	bne.n	80052d6 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8005286:	7afb      	ldrb	r3, [r7, #11]
 8005288:	f003 0304 	and.w	r3, r3, #4
 800528c:	2b00      	cmp	r3, #0
 800528e:	d122      	bne.n	80052d6 <follow_path+0xd2>
 8005290:	2305      	movs	r3, #5
 8005292:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8005294:	e01f      	b.n	80052d6 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8005296:	7afb      	ldrb	r3, [r7, #11]
 8005298:	f003 0304 	and.w	r3, r3, #4
 800529c:	2b00      	cmp	r3, #0
 800529e:	d11c      	bne.n	80052da <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 80052a0:	693b      	ldr	r3, [r7, #16]
 80052a2:	799b      	ldrb	r3, [r3, #6]
 80052a4:	f003 0310 	and.w	r3, r3, #16
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d102      	bne.n	80052b2 <follow_path+0xae>
				res = FR_NO_PATH; break;
 80052ac:	2305      	movs	r3, #5
 80052ae:	75fb      	strb	r3, [r7, #23]
 80052b0:	e014      	b.n	80052dc <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	695b      	ldr	r3, [r3, #20]
 80052bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80052c0:	4413      	add	r3, r2
 80052c2:	4619      	mov	r1, r3
 80052c4:	68f8      	ldr	r0, [r7, #12]
 80052c6:	f7ff fe43 	bl	8004f50 <ld_clust>
 80052ca:	4602      	mov	r2, r0
 80052cc:	693b      	ldr	r3, [r7, #16]
 80052ce:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80052d0:	e7c0      	b.n	8005254 <follow_path+0x50>
			if (res != FR_OK) break;
 80052d2:	bf00      	nop
 80052d4:	e002      	b.n	80052dc <follow_path+0xd8>
				break;
 80052d6:	bf00      	nop
 80052d8:	e000      	b.n	80052dc <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80052da:	bf00      	nop
			}
		}
	}

	return res;
 80052dc:	7dfb      	ldrb	r3, [r7, #23]
}
 80052de:	4618      	mov	r0, r3
 80052e0:	3718      	adds	r7, #24
 80052e2:	46bd      	mov	sp, r7
 80052e4:	bd80      	pop	{r7, pc}

080052e6 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 80052e6:	b480      	push	{r7}
 80052e8:	b087      	sub	sp, #28
 80052ea:	af00      	add	r7, sp, #0
 80052ec:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 80052ee:	f04f 33ff 	mov.w	r3, #4294967295
 80052f2:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d031      	beq.n	8005360 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	617b      	str	r3, [r7, #20]
 8005302:	e002      	b.n	800530a <get_ldnumber+0x24>
 8005304:	697b      	ldr	r3, [r7, #20]
 8005306:	3301      	adds	r3, #1
 8005308:	617b      	str	r3, [r7, #20]
 800530a:	697b      	ldr	r3, [r7, #20]
 800530c:	781b      	ldrb	r3, [r3, #0]
 800530e:	2b20      	cmp	r3, #32
 8005310:	d903      	bls.n	800531a <get_ldnumber+0x34>
 8005312:	697b      	ldr	r3, [r7, #20]
 8005314:	781b      	ldrb	r3, [r3, #0]
 8005316:	2b3a      	cmp	r3, #58	@ 0x3a
 8005318:	d1f4      	bne.n	8005304 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800531a:	697b      	ldr	r3, [r7, #20]
 800531c:	781b      	ldrb	r3, [r3, #0]
 800531e:	2b3a      	cmp	r3, #58	@ 0x3a
 8005320:	d11c      	bne.n	800535c <get_ldnumber+0x76>
			tp = *path;
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	1c5a      	adds	r2, r3, #1
 800532c:	60fa      	str	r2, [r7, #12]
 800532e:	781b      	ldrb	r3, [r3, #0]
 8005330:	3b30      	subs	r3, #48	@ 0x30
 8005332:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8005334:	68bb      	ldr	r3, [r7, #8]
 8005336:	2b09      	cmp	r3, #9
 8005338:	d80e      	bhi.n	8005358 <get_ldnumber+0x72>
 800533a:	68fa      	ldr	r2, [r7, #12]
 800533c:	697b      	ldr	r3, [r7, #20]
 800533e:	429a      	cmp	r2, r3
 8005340:	d10a      	bne.n	8005358 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8005342:	68bb      	ldr	r3, [r7, #8]
 8005344:	2b00      	cmp	r3, #0
 8005346:	d107      	bne.n	8005358 <get_ldnumber+0x72>
					vol = (int)i;
 8005348:	68bb      	ldr	r3, [r7, #8]
 800534a:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800534c:	697b      	ldr	r3, [r7, #20]
 800534e:	3301      	adds	r3, #1
 8005350:	617b      	str	r3, [r7, #20]
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	697a      	ldr	r2, [r7, #20]
 8005356:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8005358:	693b      	ldr	r3, [r7, #16]
 800535a:	e002      	b.n	8005362 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800535c:	2300      	movs	r3, #0
 800535e:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8005360:	693b      	ldr	r3, [r7, #16]
}
 8005362:	4618      	mov	r0, r3
 8005364:	371c      	adds	r7, #28
 8005366:	46bd      	mov	sp, r7
 8005368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800536c:	4770      	bx	lr
	...

08005370 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8005370:	b580      	push	{r7, lr}
 8005372:	b082      	sub	sp, #8
 8005374:	af00      	add	r7, sp, #0
 8005376:	6078      	str	r0, [r7, #4]
 8005378:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	2200      	movs	r2, #0
 800537e:	70da      	strb	r2, [r3, #3]
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	f04f 32ff 	mov.w	r2, #4294967295
 8005386:	62da      	str	r2, [r3, #44]	@ 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8005388:	6839      	ldr	r1, [r7, #0]
 800538a:	6878      	ldr	r0, [r7, #4]
 800538c:	f7ff f8dc 	bl	8004548 <move_window>
 8005390:	4603      	mov	r3, r0
 8005392:	2b00      	cmp	r3, #0
 8005394:	d001      	beq.n	800539a <check_fs+0x2a>
 8005396:	2304      	movs	r3, #4
 8005398:	e038      	b.n	800540c <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	3330      	adds	r3, #48	@ 0x30
 800539e:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 80053a2:	4618      	mov	r0, r3
 80053a4:	f7fe fe1e 	bl	8003fe4 <ld_word>
 80053a8:	4603      	mov	r3, r0
 80053aa:	461a      	mov	r2, r3
 80053ac:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 80053b0:	429a      	cmp	r2, r3
 80053b2:	d001      	beq.n	80053b8 <check_fs+0x48>
 80053b4:	2303      	movs	r3, #3
 80053b6:	e029      	b.n	800540c <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80053be:	2be9      	cmp	r3, #233	@ 0xe9
 80053c0:	d009      	beq.n	80053d6 <check_fs+0x66>
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80053c8:	2beb      	cmp	r3, #235	@ 0xeb
 80053ca:	d11e      	bne.n	800540a <check_fs+0x9a>
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 80053d2:	2b90      	cmp	r3, #144	@ 0x90
 80053d4:	d119      	bne.n	800540a <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	3330      	adds	r3, #48	@ 0x30
 80053da:	3336      	adds	r3, #54	@ 0x36
 80053dc:	4618      	mov	r0, r3
 80053de:	f7fe fe1a 	bl	8004016 <ld_dword>
 80053e2:	4603      	mov	r3, r0
 80053e4:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80053e8:	4a0a      	ldr	r2, [pc, #40]	@ (8005414 <check_fs+0xa4>)
 80053ea:	4293      	cmp	r3, r2
 80053ec:	d101      	bne.n	80053f2 <check_fs+0x82>
 80053ee:	2300      	movs	r3, #0
 80053f0:	e00c      	b.n	800540c <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	3330      	adds	r3, #48	@ 0x30
 80053f6:	3352      	adds	r3, #82	@ 0x52
 80053f8:	4618      	mov	r0, r3
 80053fa:	f7fe fe0c 	bl	8004016 <ld_dword>
 80053fe:	4603      	mov	r3, r0
 8005400:	4a05      	ldr	r2, [pc, #20]	@ (8005418 <check_fs+0xa8>)
 8005402:	4293      	cmp	r3, r2
 8005404:	d101      	bne.n	800540a <check_fs+0x9a>
 8005406:	2300      	movs	r3, #0
 8005408:	e000      	b.n	800540c <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800540a:	2302      	movs	r3, #2
}
 800540c:	4618      	mov	r0, r3
 800540e:	3708      	adds	r7, #8
 8005410:	46bd      	mov	sp, r7
 8005412:	bd80      	pop	{r7, pc}
 8005414:	00544146 	.word	0x00544146
 8005418:	33544146 	.word	0x33544146

0800541c <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800541c:	b580      	push	{r7, lr}
 800541e:	b096      	sub	sp, #88	@ 0x58
 8005420:	af00      	add	r7, sp, #0
 8005422:	60f8      	str	r0, [r7, #12]
 8005424:	60b9      	str	r1, [r7, #8]
 8005426:	4613      	mov	r3, r2
 8005428:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800542a:	68bb      	ldr	r3, [r7, #8]
 800542c:	2200      	movs	r2, #0
 800542e:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8005430:	68f8      	ldr	r0, [r7, #12]
 8005432:	f7ff ff58 	bl	80052e6 <get_ldnumber>
 8005436:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8005438:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800543a:	2b00      	cmp	r3, #0
 800543c:	da01      	bge.n	8005442 <find_volume+0x26>
 800543e:	230b      	movs	r3, #11
 8005440:	e22d      	b.n	800589e <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8005442:	4aa1      	ldr	r2, [pc, #644]	@ (80056c8 <find_volume+0x2ac>)
 8005444:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005446:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800544a:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800544c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800544e:	2b00      	cmp	r3, #0
 8005450:	d101      	bne.n	8005456 <find_volume+0x3a>
 8005452:	230c      	movs	r3, #12
 8005454:	e223      	b.n	800589e <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8005456:	68bb      	ldr	r3, [r7, #8]
 8005458:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800545a:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800545c:	79fb      	ldrb	r3, [r7, #7]
 800545e:	f023 0301 	bic.w	r3, r3, #1
 8005462:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8005464:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005466:	781b      	ldrb	r3, [r3, #0]
 8005468:	2b00      	cmp	r3, #0
 800546a:	d01a      	beq.n	80054a2 <find_volume+0x86>
		stat = disk_status(fs->drv);
 800546c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800546e:	785b      	ldrb	r3, [r3, #1]
 8005470:	4618      	mov	r0, r3
 8005472:	f7fe fd19 	bl	8003ea8 <disk_status>
 8005476:	4603      	mov	r3, r0
 8005478:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800547c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8005480:	f003 0301 	and.w	r3, r3, #1
 8005484:	2b00      	cmp	r3, #0
 8005486:	d10c      	bne.n	80054a2 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8005488:	79fb      	ldrb	r3, [r7, #7]
 800548a:	2b00      	cmp	r3, #0
 800548c:	d007      	beq.n	800549e <find_volume+0x82>
 800548e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8005492:	f003 0304 	and.w	r3, r3, #4
 8005496:	2b00      	cmp	r3, #0
 8005498:	d001      	beq.n	800549e <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800549a:	230a      	movs	r3, #10
 800549c:	e1ff      	b.n	800589e <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 800549e:	2300      	movs	r3, #0
 80054a0:	e1fd      	b.n	800589e <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 80054a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80054a4:	2200      	movs	r2, #0
 80054a6:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 80054a8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80054aa:	b2da      	uxtb	r2, r3
 80054ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80054ae:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 80054b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80054b2:	785b      	ldrb	r3, [r3, #1]
 80054b4:	4618      	mov	r0, r3
 80054b6:	f7fe fd11 	bl	8003edc <disk_initialize>
 80054ba:	4603      	mov	r3, r0
 80054bc:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 80054c0:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80054c4:	f003 0301 	and.w	r3, r3, #1
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d001      	beq.n	80054d0 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 80054cc:	2303      	movs	r3, #3
 80054ce:	e1e6      	b.n	800589e <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 80054d0:	79fb      	ldrb	r3, [r7, #7]
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d007      	beq.n	80054e6 <find_volume+0xca>
 80054d6:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80054da:	f003 0304 	and.w	r3, r3, #4
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d001      	beq.n	80054e6 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 80054e2:	230a      	movs	r3, #10
 80054e4:	e1db      	b.n	800589e <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 80054e6:	2300      	movs	r3, #0
 80054e8:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 80054ea:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80054ec:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80054ee:	f7ff ff3f 	bl	8005370 <check_fs>
 80054f2:	4603      	mov	r3, r0
 80054f4:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 80054f8:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80054fc:	2b02      	cmp	r3, #2
 80054fe:	d149      	bne.n	8005594 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8005500:	2300      	movs	r3, #0
 8005502:	643b      	str	r3, [r7, #64]	@ 0x40
 8005504:	e01e      	b.n	8005544 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8005506:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005508:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800550c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800550e:	011b      	lsls	r3, r3, #4
 8005510:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 8005514:	4413      	add	r3, r2
 8005516:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8005518:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800551a:	3304      	adds	r3, #4
 800551c:	781b      	ldrb	r3, [r3, #0]
 800551e:	2b00      	cmp	r3, #0
 8005520:	d006      	beq.n	8005530 <find_volume+0x114>
 8005522:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005524:	3308      	adds	r3, #8
 8005526:	4618      	mov	r0, r3
 8005528:	f7fe fd75 	bl	8004016 <ld_dword>
 800552c:	4602      	mov	r2, r0
 800552e:	e000      	b.n	8005532 <find_volume+0x116>
 8005530:	2200      	movs	r2, #0
 8005532:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005534:	009b      	lsls	r3, r3, #2
 8005536:	3358      	adds	r3, #88	@ 0x58
 8005538:	443b      	add	r3, r7
 800553a:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800553e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005540:	3301      	adds	r3, #1
 8005542:	643b      	str	r3, [r7, #64]	@ 0x40
 8005544:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005546:	2b03      	cmp	r3, #3
 8005548:	d9dd      	bls.n	8005506 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800554a:	2300      	movs	r3, #0
 800554c:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 800554e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005550:	2b00      	cmp	r3, #0
 8005552:	d002      	beq.n	800555a <find_volume+0x13e>
 8005554:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005556:	3b01      	subs	r3, #1
 8005558:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800555a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800555c:	009b      	lsls	r3, r3, #2
 800555e:	3358      	adds	r3, #88	@ 0x58
 8005560:	443b      	add	r3, r7
 8005562:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8005566:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8005568:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800556a:	2b00      	cmp	r3, #0
 800556c:	d005      	beq.n	800557a <find_volume+0x15e>
 800556e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8005570:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8005572:	f7ff fefd 	bl	8005370 <check_fs>
 8005576:	4603      	mov	r3, r0
 8005578:	e000      	b.n	800557c <find_volume+0x160>
 800557a:	2303      	movs	r3, #3
 800557c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8005580:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005584:	2b01      	cmp	r3, #1
 8005586:	d905      	bls.n	8005594 <find_volume+0x178>
 8005588:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800558a:	3301      	adds	r3, #1
 800558c:	643b      	str	r3, [r7, #64]	@ 0x40
 800558e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005590:	2b03      	cmp	r3, #3
 8005592:	d9e2      	bls.n	800555a <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8005594:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005598:	2b04      	cmp	r3, #4
 800559a:	d101      	bne.n	80055a0 <find_volume+0x184>
 800559c:	2301      	movs	r3, #1
 800559e:	e17e      	b.n	800589e <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 80055a0:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80055a4:	2b01      	cmp	r3, #1
 80055a6:	d901      	bls.n	80055ac <find_volume+0x190>
 80055a8:	230d      	movs	r3, #13
 80055aa:	e178      	b.n	800589e <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 80055ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80055ae:	3330      	adds	r3, #48	@ 0x30
 80055b0:	330b      	adds	r3, #11
 80055b2:	4618      	mov	r0, r3
 80055b4:	f7fe fd16 	bl	8003fe4 <ld_word>
 80055b8:	4603      	mov	r3, r0
 80055ba:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80055be:	d001      	beq.n	80055c4 <find_volume+0x1a8>
 80055c0:	230d      	movs	r3, #13
 80055c2:	e16c      	b.n	800589e <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 80055c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80055c6:	3330      	adds	r3, #48	@ 0x30
 80055c8:	3316      	adds	r3, #22
 80055ca:	4618      	mov	r0, r3
 80055cc:	f7fe fd0a 	bl	8003fe4 <ld_word>
 80055d0:	4603      	mov	r3, r0
 80055d2:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 80055d4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d106      	bne.n	80055e8 <find_volume+0x1cc>
 80055da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80055dc:	3330      	adds	r3, #48	@ 0x30
 80055de:	3324      	adds	r3, #36	@ 0x24
 80055e0:	4618      	mov	r0, r3
 80055e2:	f7fe fd18 	bl	8004016 <ld_dword>
 80055e6:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 80055e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80055ea:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80055ec:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 80055ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80055f0:	f893 2040 	ldrb.w	r2, [r3, #64]	@ 0x40
 80055f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80055f6:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 80055f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80055fa:	789b      	ldrb	r3, [r3, #2]
 80055fc:	2b01      	cmp	r3, #1
 80055fe:	d005      	beq.n	800560c <find_volume+0x1f0>
 8005600:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005602:	789b      	ldrb	r3, [r3, #2]
 8005604:	2b02      	cmp	r3, #2
 8005606:	d001      	beq.n	800560c <find_volume+0x1f0>
 8005608:	230d      	movs	r3, #13
 800560a:	e148      	b.n	800589e <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800560c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800560e:	789b      	ldrb	r3, [r3, #2]
 8005610:	461a      	mov	r2, r3
 8005612:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005614:	fb02 f303 	mul.w	r3, r2, r3
 8005618:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800561a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800561c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005620:	461a      	mov	r2, r3
 8005622:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005624:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8005626:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005628:	895b      	ldrh	r3, [r3, #10]
 800562a:	2b00      	cmp	r3, #0
 800562c:	d008      	beq.n	8005640 <find_volume+0x224>
 800562e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005630:	895b      	ldrh	r3, [r3, #10]
 8005632:	461a      	mov	r2, r3
 8005634:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005636:	895b      	ldrh	r3, [r3, #10]
 8005638:	3b01      	subs	r3, #1
 800563a:	4013      	ands	r3, r2
 800563c:	2b00      	cmp	r3, #0
 800563e:	d001      	beq.n	8005644 <find_volume+0x228>
 8005640:	230d      	movs	r3, #13
 8005642:	e12c      	b.n	800589e <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8005644:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005646:	3330      	adds	r3, #48	@ 0x30
 8005648:	3311      	adds	r3, #17
 800564a:	4618      	mov	r0, r3
 800564c:	f7fe fcca 	bl	8003fe4 <ld_word>
 8005650:	4603      	mov	r3, r0
 8005652:	461a      	mov	r2, r3
 8005654:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005656:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8005658:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800565a:	891b      	ldrh	r3, [r3, #8]
 800565c:	f003 030f 	and.w	r3, r3, #15
 8005660:	b29b      	uxth	r3, r3
 8005662:	2b00      	cmp	r3, #0
 8005664:	d001      	beq.n	800566a <find_volume+0x24e>
 8005666:	230d      	movs	r3, #13
 8005668:	e119      	b.n	800589e <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800566a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800566c:	3330      	adds	r3, #48	@ 0x30
 800566e:	3313      	adds	r3, #19
 8005670:	4618      	mov	r0, r3
 8005672:	f7fe fcb7 	bl	8003fe4 <ld_word>
 8005676:	4603      	mov	r3, r0
 8005678:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800567a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800567c:	2b00      	cmp	r3, #0
 800567e:	d106      	bne.n	800568e <find_volume+0x272>
 8005680:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005682:	3330      	adds	r3, #48	@ 0x30
 8005684:	3320      	adds	r3, #32
 8005686:	4618      	mov	r0, r3
 8005688:	f7fe fcc5 	bl	8004016 <ld_dword>
 800568c:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800568e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005690:	3330      	adds	r3, #48	@ 0x30
 8005692:	330e      	adds	r3, #14
 8005694:	4618      	mov	r0, r3
 8005696:	f7fe fca5 	bl	8003fe4 <ld_word>
 800569a:	4603      	mov	r3, r0
 800569c:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800569e:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d101      	bne.n	80056a8 <find_volume+0x28c>
 80056a4:	230d      	movs	r3, #13
 80056a6:	e0fa      	b.n	800589e <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 80056a8:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 80056aa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80056ac:	4413      	add	r3, r2
 80056ae:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80056b0:	8912      	ldrh	r2, [r2, #8]
 80056b2:	0912      	lsrs	r2, r2, #4
 80056b4:	b292      	uxth	r2, r2
 80056b6:	4413      	add	r3, r2
 80056b8:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 80056ba:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80056bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80056be:	429a      	cmp	r2, r3
 80056c0:	d204      	bcs.n	80056cc <find_volume+0x2b0>
 80056c2:	230d      	movs	r3, #13
 80056c4:	e0eb      	b.n	800589e <find_volume+0x482>
 80056c6:	bf00      	nop
 80056c8:	2000010c 	.word	0x2000010c
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 80056cc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80056ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80056d0:	1ad3      	subs	r3, r2, r3
 80056d2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80056d4:	8952      	ldrh	r2, [r2, #10]
 80056d6:	fbb3 f3f2 	udiv	r3, r3, r2
 80056da:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 80056dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d101      	bne.n	80056e6 <find_volume+0x2ca>
 80056e2:	230d      	movs	r3, #13
 80056e4:	e0db      	b.n	800589e <find_volume+0x482>
		fmt = FS_FAT32;
 80056e6:	2303      	movs	r3, #3
 80056e8:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 80056ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056ee:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 80056f2:	4293      	cmp	r3, r2
 80056f4:	d802      	bhi.n	80056fc <find_volume+0x2e0>
 80056f6:	2302      	movs	r3, #2
 80056f8:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 80056fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056fe:	f640 72f5 	movw	r2, #4085	@ 0xff5
 8005702:	4293      	cmp	r3, r2
 8005704:	d802      	bhi.n	800570c <find_volume+0x2f0>
 8005706:	2301      	movs	r3, #1
 8005708:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800570c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800570e:	1c9a      	adds	r2, r3, #2
 8005710:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005712:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 8005714:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005716:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8005718:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800571a:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800571c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800571e:	441a      	add	r2, r3
 8005720:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005722:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 8005724:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8005726:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005728:	441a      	add	r2, r3
 800572a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800572c:	629a      	str	r2, [r3, #40]	@ 0x28
		if (fmt == FS_FAT32) {
 800572e:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005732:	2b03      	cmp	r3, #3
 8005734:	d11e      	bne.n	8005774 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8005736:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005738:	3330      	adds	r3, #48	@ 0x30
 800573a:	332a      	adds	r3, #42	@ 0x2a
 800573c:	4618      	mov	r0, r3
 800573e:	f7fe fc51 	bl	8003fe4 <ld_word>
 8005742:	4603      	mov	r3, r0
 8005744:	2b00      	cmp	r3, #0
 8005746:	d001      	beq.n	800574c <find_volume+0x330>
 8005748:	230d      	movs	r3, #13
 800574a:	e0a8      	b.n	800589e <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800574c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800574e:	891b      	ldrh	r3, [r3, #8]
 8005750:	2b00      	cmp	r3, #0
 8005752:	d001      	beq.n	8005758 <find_volume+0x33c>
 8005754:	230d      	movs	r3, #13
 8005756:	e0a2      	b.n	800589e <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8005758:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800575a:	3330      	adds	r3, #48	@ 0x30
 800575c:	332c      	adds	r3, #44	@ 0x2c
 800575e:	4618      	mov	r0, r3
 8005760:	f7fe fc59 	bl	8004016 <ld_dword>
 8005764:	4602      	mov	r2, r0
 8005766:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005768:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800576a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800576c:	695b      	ldr	r3, [r3, #20]
 800576e:	009b      	lsls	r3, r3, #2
 8005770:	647b      	str	r3, [r7, #68]	@ 0x44
 8005772:	e01f      	b.n	80057b4 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8005774:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005776:	891b      	ldrh	r3, [r3, #8]
 8005778:	2b00      	cmp	r3, #0
 800577a:	d101      	bne.n	8005780 <find_volume+0x364>
 800577c:	230d      	movs	r3, #13
 800577e:	e08e      	b.n	800589e <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8005780:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005782:	6a1a      	ldr	r2, [r3, #32]
 8005784:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005786:	441a      	add	r2, r3
 8005788:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800578a:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800578c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005790:	2b02      	cmp	r3, #2
 8005792:	d103      	bne.n	800579c <find_volume+0x380>
 8005794:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005796:	695b      	ldr	r3, [r3, #20]
 8005798:	005b      	lsls	r3, r3, #1
 800579a:	e00a      	b.n	80057b2 <find_volume+0x396>
 800579c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800579e:	695a      	ldr	r2, [r3, #20]
 80057a0:	4613      	mov	r3, r2
 80057a2:	005b      	lsls	r3, r3, #1
 80057a4:	4413      	add	r3, r2
 80057a6:	085a      	lsrs	r2, r3, #1
 80057a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80057aa:	695b      	ldr	r3, [r3, #20]
 80057ac:	f003 0301 	and.w	r3, r3, #1
 80057b0:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 80057b2:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 80057b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80057b6:	699a      	ldr	r2, [r3, #24]
 80057b8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80057ba:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 80057be:	0a5b      	lsrs	r3, r3, #9
 80057c0:	429a      	cmp	r2, r3
 80057c2:	d201      	bcs.n	80057c8 <find_volume+0x3ac>
 80057c4:	230d      	movs	r3, #13
 80057c6:	e06a      	b.n	800589e <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 80057c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80057ca:	f04f 32ff 	mov.w	r2, #4294967295
 80057ce:	611a      	str	r2, [r3, #16]
 80057d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80057d2:	691a      	ldr	r2, [r3, #16]
 80057d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80057d6:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 80057d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80057da:	2280      	movs	r2, #128	@ 0x80
 80057dc:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 80057de:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80057e2:	2b03      	cmp	r3, #3
 80057e4:	d149      	bne.n	800587a <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 80057e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80057e8:	3330      	adds	r3, #48	@ 0x30
 80057ea:	3330      	adds	r3, #48	@ 0x30
 80057ec:	4618      	mov	r0, r3
 80057ee:	f7fe fbf9 	bl	8003fe4 <ld_word>
 80057f2:	4603      	mov	r3, r0
 80057f4:	2b01      	cmp	r3, #1
 80057f6:	d140      	bne.n	800587a <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 80057f8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80057fa:	3301      	adds	r3, #1
 80057fc:	4619      	mov	r1, r3
 80057fe:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8005800:	f7fe fea2 	bl	8004548 <move_window>
 8005804:	4603      	mov	r3, r0
 8005806:	2b00      	cmp	r3, #0
 8005808:	d137      	bne.n	800587a <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 800580a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800580c:	2200      	movs	r2, #0
 800580e:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8005810:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005812:	3330      	adds	r3, #48	@ 0x30
 8005814:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8005818:	4618      	mov	r0, r3
 800581a:	f7fe fbe3 	bl	8003fe4 <ld_word>
 800581e:	4603      	mov	r3, r0
 8005820:	461a      	mov	r2, r3
 8005822:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8005826:	429a      	cmp	r2, r3
 8005828:	d127      	bne.n	800587a <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800582a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800582c:	3330      	adds	r3, #48	@ 0x30
 800582e:	4618      	mov	r0, r3
 8005830:	f7fe fbf1 	bl	8004016 <ld_dword>
 8005834:	4603      	mov	r3, r0
 8005836:	4a1c      	ldr	r2, [pc, #112]	@ (80058a8 <find_volume+0x48c>)
 8005838:	4293      	cmp	r3, r2
 800583a:	d11e      	bne.n	800587a <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800583c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800583e:	3330      	adds	r3, #48	@ 0x30
 8005840:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8005844:	4618      	mov	r0, r3
 8005846:	f7fe fbe6 	bl	8004016 <ld_dword>
 800584a:	4603      	mov	r3, r0
 800584c:	4a17      	ldr	r2, [pc, #92]	@ (80058ac <find_volume+0x490>)
 800584e:	4293      	cmp	r3, r2
 8005850:	d113      	bne.n	800587a <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8005852:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005854:	3330      	adds	r3, #48	@ 0x30
 8005856:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 800585a:	4618      	mov	r0, r3
 800585c:	f7fe fbdb 	bl	8004016 <ld_dword>
 8005860:	4602      	mov	r2, r0
 8005862:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005864:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8005866:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005868:	3330      	adds	r3, #48	@ 0x30
 800586a:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 800586e:	4618      	mov	r0, r3
 8005870:	f7fe fbd1 	bl	8004016 <ld_dword>
 8005874:	4602      	mov	r2, r0
 8005876:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005878:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800587a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800587c:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 8005880:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8005882:	4b0b      	ldr	r3, [pc, #44]	@ (80058b0 <find_volume+0x494>)
 8005884:	881b      	ldrh	r3, [r3, #0]
 8005886:	3301      	adds	r3, #1
 8005888:	b29a      	uxth	r2, r3
 800588a:	4b09      	ldr	r3, [pc, #36]	@ (80058b0 <find_volume+0x494>)
 800588c:	801a      	strh	r2, [r3, #0]
 800588e:	4b08      	ldr	r3, [pc, #32]	@ (80058b0 <find_volume+0x494>)
 8005890:	881a      	ldrh	r2, [r3, #0]
 8005892:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005894:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8005896:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8005898:	f7fe fdee 	bl	8004478 <clear_lock>
#endif
	return FR_OK;
 800589c:	2300      	movs	r3, #0
}
 800589e:	4618      	mov	r0, r3
 80058a0:	3758      	adds	r7, #88	@ 0x58
 80058a2:	46bd      	mov	sp, r7
 80058a4:	bd80      	pop	{r7, pc}
 80058a6:	bf00      	nop
 80058a8:	41615252 	.word	0x41615252
 80058ac:	61417272 	.word	0x61417272
 80058b0:	20000110 	.word	0x20000110

080058b4 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 80058b4:	b580      	push	{r7, lr}
 80058b6:	b084      	sub	sp, #16
 80058b8:	af00      	add	r7, sp, #0
 80058ba:	6078      	str	r0, [r7, #4]
 80058bc:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 80058be:	2309      	movs	r3, #9
 80058c0:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d01c      	beq.n	8005902 <validate+0x4e>
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d018      	beq.n	8005902 <validate+0x4e>
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	781b      	ldrb	r3, [r3, #0]
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d013      	beq.n	8005902 <validate+0x4e>
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	889a      	ldrh	r2, [r3, #4]
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	88db      	ldrh	r3, [r3, #6]
 80058e4:	429a      	cmp	r2, r3
 80058e6:	d10c      	bne.n	8005902 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	785b      	ldrb	r3, [r3, #1]
 80058ee:	4618      	mov	r0, r3
 80058f0:	f7fe fada 	bl	8003ea8 <disk_status>
 80058f4:	4603      	mov	r3, r0
 80058f6:	f003 0301 	and.w	r3, r3, #1
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d101      	bne.n	8005902 <validate+0x4e>
			res = FR_OK;
 80058fe:	2300      	movs	r3, #0
 8005900:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8005902:	7bfb      	ldrb	r3, [r7, #15]
 8005904:	2b00      	cmp	r3, #0
 8005906:	d102      	bne.n	800590e <validate+0x5a>
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	e000      	b.n	8005910 <validate+0x5c>
 800590e:	2300      	movs	r3, #0
 8005910:	683a      	ldr	r2, [r7, #0]
 8005912:	6013      	str	r3, [r2, #0]
	return res;
 8005914:	7bfb      	ldrb	r3, [r7, #15]
}
 8005916:	4618      	mov	r0, r3
 8005918:	3710      	adds	r7, #16
 800591a:	46bd      	mov	sp, r7
 800591c:	bd80      	pop	{r7, pc}
	...

08005920 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8005920:	b580      	push	{r7, lr}
 8005922:	b088      	sub	sp, #32
 8005924:	af00      	add	r7, sp, #0
 8005926:	60f8      	str	r0, [r7, #12]
 8005928:	60b9      	str	r1, [r7, #8]
 800592a:	4613      	mov	r3, r2
 800592c:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800592e:	68bb      	ldr	r3, [r7, #8]
 8005930:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8005932:	f107 0310 	add.w	r3, r7, #16
 8005936:	4618      	mov	r0, r3
 8005938:	f7ff fcd5 	bl	80052e6 <get_ldnumber>
 800593c:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800593e:	69fb      	ldr	r3, [r7, #28]
 8005940:	2b00      	cmp	r3, #0
 8005942:	da01      	bge.n	8005948 <f_mount+0x28>
 8005944:	230b      	movs	r3, #11
 8005946:	e02b      	b.n	80059a0 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8005948:	4a17      	ldr	r2, [pc, #92]	@ (80059a8 <f_mount+0x88>)
 800594a:	69fb      	ldr	r3, [r7, #28]
 800594c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005950:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8005952:	69bb      	ldr	r3, [r7, #24]
 8005954:	2b00      	cmp	r3, #0
 8005956:	d005      	beq.n	8005964 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8005958:	69b8      	ldr	r0, [r7, #24]
 800595a:	f7fe fd8d 	bl	8004478 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800595e:	69bb      	ldr	r3, [r7, #24]
 8005960:	2200      	movs	r2, #0
 8005962:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	2b00      	cmp	r3, #0
 8005968:	d002      	beq.n	8005970 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	2200      	movs	r2, #0
 800596e:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8005970:	68fa      	ldr	r2, [r7, #12]
 8005972:	490d      	ldr	r1, [pc, #52]	@ (80059a8 <f_mount+0x88>)
 8005974:	69fb      	ldr	r3, [r7, #28]
 8005976:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	2b00      	cmp	r3, #0
 800597e:	d002      	beq.n	8005986 <f_mount+0x66>
 8005980:	79fb      	ldrb	r3, [r7, #7]
 8005982:	2b01      	cmp	r3, #1
 8005984:	d001      	beq.n	800598a <f_mount+0x6a>
 8005986:	2300      	movs	r3, #0
 8005988:	e00a      	b.n	80059a0 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800598a:	f107 010c 	add.w	r1, r7, #12
 800598e:	f107 0308 	add.w	r3, r7, #8
 8005992:	2200      	movs	r2, #0
 8005994:	4618      	mov	r0, r3
 8005996:	f7ff fd41 	bl	800541c <find_volume>
 800599a:	4603      	mov	r3, r0
 800599c:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800599e:	7dfb      	ldrb	r3, [r7, #23]
}
 80059a0:	4618      	mov	r0, r3
 80059a2:	3720      	adds	r7, #32
 80059a4:	46bd      	mov	sp, r7
 80059a6:	bd80      	pop	{r7, pc}
 80059a8:	2000010c 	.word	0x2000010c

080059ac <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 80059ac:	b580      	push	{r7, lr}
 80059ae:	b098      	sub	sp, #96	@ 0x60
 80059b0:	af00      	add	r7, sp, #0
 80059b2:	60f8      	str	r0, [r7, #12]
 80059b4:	60b9      	str	r1, [r7, #8]
 80059b6:	4613      	mov	r3, r2
 80059b8:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d101      	bne.n	80059c4 <f_open+0x18>
 80059c0:	2309      	movs	r3, #9
 80059c2:	e1a9      	b.n	8005d18 <f_open+0x36c>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 80059c4:	79fb      	ldrb	r3, [r7, #7]
 80059c6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80059ca:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 80059cc:	79fa      	ldrb	r2, [r7, #7]
 80059ce:	f107 0110 	add.w	r1, r7, #16
 80059d2:	f107 0308 	add.w	r3, r7, #8
 80059d6:	4618      	mov	r0, r3
 80059d8:	f7ff fd20 	bl	800541c <find_volume>
 80059dc:	4603      	mov	r3, r0
 80059de:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	if (res == FR_OK) {
 80059e2:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	f040 818d 	bne.w	8005d06 <f_open+0x35a>
		dj.obj.fs = fs;
 80059ec:	693b      	ldr	r3, [r7, #16]
 80059ee:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 80059f0:	68ba      	ldr	r2, [r7, #8]
 80059f2:	f107 0314 	add.w	r3, r7, #20
 80059f6:	4611      	mov	r1, r2
 80059f8:	4618      	mov	r0, r3
 80059fa:	f7ff fc03 	bl	8005204 <follow_path>
 80059fe:	4603      	mov	r3, r0
 8005a00:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8005a04:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d118      	bne.n	8005a3e <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8005a0c:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8005a10:	b25b      	sxtb	r3, r3
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	da03      	bge.n	8005a1e <f_open+0x72>
				res = FR_INVALID_NAME;
 8005a16:	2306      	movs	r3, #6
 8005a18:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8005a1c:	e00f      	b.n	8005a3e <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8005a1e:	79fb      	ldrb	r3, [r7, #7]
 8005a20:	2b01      	cmp	r3, #1
 8005a22:	bf8c      	ite	hi
 8005a24:	2301      	movhi	r3, #1
 8005a26:	2300      	movls	r3, #0
 8005a28:	b2db      	uxtb	r3, r3
 8005a2a:	461a      	mov	r2, r3
 8005a2c:	f107 0314 	add.w	r3, r7, #20
 8005a30:	4611      	mov	r1, r2
 8005a32:	4618      	mov	r0, r3
 8005a34:	f7fe fbd8 	bl	80041e8 <chk_lock>
 8005a38:	4603      	mov	r3, r0
 8005a3a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8005a3e:	79fb      	ldrb	r3, [r7, #7]
 8005a40:	f003 031c 	and.w	r3, r3, #28
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d07f      	beq.n	8005b48 <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 8005a48:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d017      	beq.n	8005a80 <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8005a50:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8005a54:	2b04      	cmp	r3, #4
 8005a56:	d10e      	bne.n	8005a76 <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8005a58:	f7fe fc22 	bl	80042a0 <enq_lock>
 8005a5c:	4603      	mov	r3, r0
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d006      	beq.n	8005a70 <f_open+0xc4>
 8005a62:	f107 0314 	add.w	r3, r7, #20
 8005a66:	4618      	mov	r0, r3
 8005a68:	f7ff fb06 	bl	8005078 <dir_register>
 8005a6c:	4603      	mov	r3, r0
 8005a6e:	e000      	b.n	8005a72 <f_open+0xc6>
 8005a70:	2312      	movs	r3, #18
 8005a72:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8005a76:	79fb      	ldrb	r3, [r7, #7]
 8005a78:	f043 0308 	orr.w	r3, r3, #8
 8005a7c:	71fb      	strb	r3, [r7, #7]
 8005a7e:	e010      	b.n	8005aa2 <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8005a80:	7ebb      	ldrb	r3, [r7, #26]
 8005a82:	f003 0311 	and.w	r3, r3, #17
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d003      	beq.n	8005a92 <f_open+0xe6>
					res = FR_DENIED;
 8005a8a:	2307      	movs	r3, #7
 8005a8c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8005a90:	e007      	b.n	8005aa2 <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8005a92:	79fb      	ldrb	r3, [r7, #7]
 8005a94:	f003 0304 	and.w	r3, r3, #4
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d002      	beq.n	8005aa2 <f_open+0xf6>
 8005a9c:	2308      	movs	r3, #8
 8005a9e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8005aa2:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d168      	bne.n	8005b7c <f_open+0x1d0>
 8005aaa:	79fb      	ldrb	r3, [r7, #7]
 8005aac:	f003 0308 	and.w	r3, r3, #8
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d063      	beq.n	8005b7c <f_open+0x1d0>
				dw = GET_FATTIME();
 8005ab4:	f7fe f902 	bl	8003cbc <get_fattime>
 8005ab8:	6538      	str	r0, [r7, #80]	@ 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8005aba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005abc:	330e      	adds	r3, #14
 8005abe:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8005ac0:	4618      	mov	r0, r3
 8005ac2:	f7fe fae6 	bl	8004092 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8005ac6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005ac8:	3316      	adds	r3, #22
 8005aca:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8005acc:	4618      	mov	r0, r3
 8005ace:	f7fe fae0 	bl	8004092 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8005ad2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005ad4:	330b      	adds	r3, #11
 8005ad6:	2220      	movs	r2, #32
 8005ad8:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8005ada:	693b      	ldr	r3, [r7, #16]
 8005adc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005ade:	4611      	mov	r1, r2
 8005ae0:	4618      	mov	r0, r3
 8005ae2:	f7ff fa35 	bl	8004f50 <ld_clust>
 8005ae6:	64f8      	str	r0, [r7, #76]	@ 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8005ae8:	693b      	ldr	r3, [r7, #16]
 8005aea:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8005aec:	2200      	movs	r2, #0
 8005aee:	4618      	mov	r0, r3
 8005af0:	f7ff fa4d 	bl	8004f8e <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8005af4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005af6:	331c      	adds	r3, #28
 8005af8:	2100      	movs	r1, #0
 8005afa:	4618      	mov	r0, r3
 8005afc:	f7fe fac9 	bl	8004092 <st_dword>
					fs->wflag = 1;
 8005b00:	693b      	ldr	r3, [r7, #16]
 8005b02:	2201      	movs	r2, #1
 8005b04:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8005b06:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d037      	beq.n	8005b7c <f_open+0x1d0>
						dw = fs->winsect;
 8005b0c:	693b      	ldr	r3, [r7, #16]
 8005b0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b10:	653b      	str	r3, [r7, #80]	@ 0x50
						res = remove_chain(&dj.obj, cl, 0);
 8005b12:	f107 0314 	add.w	r3, r7, #20
 8005b16:	2200      	movs	r2, #0
 8005b18:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8005b1a:	4618      	mov	r0, r3
 8005b1c:	f7fe ff60 	bl	80049e0 <remove_chain>
 8005b20:	4603      	mov	r3, r0
 8005b22:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
						if (res == FR_OK) {
 8005b26:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d126      	bne.n	8005b7c <f_open+0x1d0>
							res = move_window(fs, dw);
 8005b2e:	693b      	ldr	r3, [r7, #16]
 8005b30:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8005b32:	4618      	mov	r0, r3
 8005b34:	f7fe fd08 	bl	8004548 <move_window>
 8005b38:	4603      	mov	r3, r0
 8005b3a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8005b3e:	693b      	ldr	r3, [r7, #16]
 8005b40:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005b42:	3a01      	subs	r2, #1
 8005b44:	60da      	str	r2, [r3, #12]
 8005b46:	e019      	b.n	8005b7c <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8005b48:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d115      	bne.n	8005b7c <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8005b50:	7ebb      	ldrb	r3, [r7, #26]
 8005b52:	f003 0310 	and.w	r3, r3, #16
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d003      	beq.n	8005b62 <f_open+0x1b6>
					res = FR_NO_FILE;
 8005b5a:	2304      	movs	r3, #4
 8005b5c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8005b60:	e00c      	b.n	8005b7c <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8005b62:	79fb      	ldrb	r3, [r7, #7]
 8005b64:	f003 0302 	and.w	r3, r3, #2
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d007      	beq.n	8005b7c <f_open+0x1d0>
 8005b6c:	7ebb      	ldrb	r3, [r7, #26]
 8005b6e:	f003 0301 	and.w	r3, r3, #1
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d002      	beq.n	8005b7c <f_open+0x1d0>
						res = FR_DENIED;
 8005b76:	2307      	movs	r3, #7
 8005b78:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8005b7c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d126      	bne.n	8005bd2 <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8005b84:	79fb      	ldrb	r3, [r7, #7]
 8005b86:	f003 0308 	and.w	r3, r3, #8
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d003      	beq.n	8005b96 <f_open+0x1ea>
				mode |= FA_MODIFIED;
 8005b8e:	79fb      	ldrb	r3, [r7, #7]
 8005b90:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005b94:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8005b96:	693b      	ldr	r3, [r7, #16]
 8005b98:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 8005b9e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8005ba4:	79fb      	ldrb	r3, [r7, #7]
 8005ba6:	2b01      	cmp	r3, #1
 8005ba8:	bf8c      	ite	hi
 8005baa:	2301      	movhi	r3, #1
 8005bac:	2300      	movls	r3, #0
 8005bae:	b2db      	uxtb	r3, r3
 8005bb0:	461a      	mov	r2, r3
 8005bb2:	f107 0314 	add.w	r3, r7, #20
 8005bb6:	4611      	mov	r1, r2
 8005bb8:	4618      	mov	r0, r3
 8005bba:	f7fe fb93 	bl	80042e4 <inc_lock>
 8005bbe:	4602      	mov	r2, r0
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	691b      	ldr	r3, [r3, #16]
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d102      	bne.n	8005bd2 <f_open+0x226>
 8005bcc:	2302      	movs	r3, #2
 8005bce:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 8005bd2:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	f040 8095 	bne.w	8005d06 <f_open+0x35a>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8005bdc:	693b      	ldr	r3, [r7, #16]
 8005bde:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005be0:	4611      	mov	r1, r2
 8005be2:	4618      	mov	r0, r3
 8005be4:	f7ff f9b4 	bl	8004f50 <ld_clust>
 8005be8:	4602      	mov	r2, r0
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8005bee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005bf0:	331c      	adds	r3, #28
 8005bf2:	4618      	mov	r0, r3
 8005bf4:	f7fe fa0f 	bl	8004016 <ld_dword>
 8005bf8:	4602      	mov	r2, r0
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	2200      	movs	r2, #0
 8005c02:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8005c04:	693a      	ldr	r2, [r7, #16]
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8005c0a:	693b      	ldr	r3, [r7, #16]
 8005c0c:	88da      	ldrh	r2, [r3, #6]
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	79fa      	ldrb	r2, [r7, #7]
 8005c16:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	2200      	movs	r2, #0
 8005c1c:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	2200      	movs	r2, #0
 8005c22:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	2200      	movs	r2, #0
 8005c28:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	3330      	adds	r3, #48	@ 0x30
 8005c2e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005c32:	2100      	movs	r1, #0
 8005c34:	4618      	mov	r0, r3
 8005c36:	f7fe fa79 	bl	800412c <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8005c3a:	79fb      	ldrb	r3, [r7, #7]
 8005c3c:	f003 0320 	and.w	r3, r3, #32
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d060      	beq.n	8005d06 <f_open+0x35a>
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	68db      	ldr	r3, [r3, #12]
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d05c      	beq.n	8005d06 <f_open+0x35a>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	68da      	ldr	r2, [r3, #12]
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8005c54:	693b      	ldr	r3, [r7, #16]
 8005c56:	895b      	ldrh	r3, [r3, #10]
 8005c58:	025b      	lsls	r3, r3, #9
 8005c5a:	64bb      	str	r3, [r7, #72]	@ 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	689b      	ldr	r3, [r3, #8]
 8005c60:	65bb      	str	r3, [r7, #88]	@ 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	68db      	ldr	r3, [r3, #12]
 8005c66:	657b      	str	r3, [r7, #84]	@ 0x54
 8005c68:	e016      	b.n	8005c98 <f_open+0x2ec>
					clst = get_fat(&fp->obj, clst);
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8005c6e:	4618      	mov	r0, r3
 8005c70:	f7fe fd25 	bl	80046be <get_fat>
 8005c74:	65b8      	str	r0, [r7, #88]	@ 0x58
					if (clst <= 1) res = FR_INT_ERR;
 8005c76:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005c78:	2b01      	cmp	r3, #1
 8005c7a:	d802      	bhi.n	8005c82 <f_open+0x2d6>
 8005c7c:	2302      	movs	r3, #2
 8005c7e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8005c82:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005c84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c88:	d102      	bne.n	8005c90 <f_open+0x2e4>
 8005c8a:	2301      	movs	r3, #1
 8005c8c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8005c90:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8005c92:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005c94:	1ad3      	subs	r3, r2, r3
 8005c96:	657b      	str	r3, [r7, #84]	@ 0x54
 8005c98:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d103      	bne.n	8005ca8 <f_open+0x2fc>
 8005ca0:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8005ca2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005ca4:	429a      	cmp	r2, r3
 8005ca6:	d8e0      	bhi.n	8005c6a <f_open+0x2be>
				}
				fp->clust = clst;
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005cac:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8005cae:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d127      	bne.n	8005d06 <f_open+0x35a>
 8005cb6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005cb8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d022      	beq.n	8005d06 <f_open+0x35a>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8005cc0:	693b      	ldr	r3, [r7, #16]
 8005cc2:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8005cc4:	4618      	mov	r0, r3
 8005cc6:	f7fe fcdb 	bl	8004680 <clust2sect>
 8005cca:	6478      	str	r0, [r7, #68]	@ 0x44
 8005ccc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d103      	bne.n	8005cda <f_open+0x32e>
						res = FR_INT_ERR;
 8005cd2:	2302      	movs	r3, #2
 8005cd4:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8005cd8:	e015      	b.n	8005d06 <f_open+0x35a>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8005cda:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005cdc:	0a5a      	lsrs	r2, r3, #9
 8005cde:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005ce0:	441a      	add	r2, r3
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8005ce6:	693b      	ldr	r3, [r7, #16]
 8005ce8:	7858      	ldrb	r0, [r3, #1]
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	6a1a      	ldr	r2, [r3, #32]
 8005cf4:	2301      	movs	r3, #1
 8005cf6:	f7fe f917 	bl	8003f28 <disk_read>
 8005cfa:	4603      	mov	r3, r0
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d002      	beq.n	8005d06 <f_open+0x35a>
 8005d00:	2301      	movs	r3, #1
 8005d02:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8005d06:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d002      	beq.n	8005d14 <f_open+0x368>
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	2200      	movs	r2, #0
 8005d12:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8005d14:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
 8005d18:	4618      	mov	r0, r3
 8005d1a:	3760      	adds	r7, #96	@ 0x60
 8005d1c:	46bd      	mov	sp, r7
 8005d1e:	bd80      	pop	{r7, pc}

08005d20 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8005d20:	b580      	push	{r7, lr}
 8005d22:	b08e      	sub	sp, #56	@ 0x38
 8005d24:	af00      	add	r7, sp, #0
 8005d26:	60f8      	str	r0, [r7, #12]
 8005d28:	60b9      	str	r1, [r7, #8]
 8005d2a:	607a      	str	r2, [r7, #4]
 8005d2c:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 8005d2e:	68bb      	ldr	r3, [r7, #8]
 8005d30:	627b      	str	r3, [r7, #36]	@ 0x24


	*br = 0;	/* Clear read byte counter */
 8005d32:	683b      	ldr	r3, [r7, #0]
 8005d34:	2200      	movs	r2, #0
 8005d36:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	f107 0214 	add.w	r2, r7, #20
 8005d3e:	4611      	mov	r1, r2
 8005d40:	4618      	mov	r0, r3
 8005d42:	f7ff fdb7 	bl	80058b4 <validate>
 8005d46:	4603      	mov	r3, r0
 8005d48:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8005d4c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d107      	bne.n	8005d64 <f_read+0x44>
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	7d5b      	ldrb	r3, [r3, #21]
 8005d58:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8005d5c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d002      	beq.n	8005d6a <f_read+0x4a>
 8005d64:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8005d68:	e115      	b.n	8005f96 <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	7d1b      	ldrb	r3, [r3, #20]
 8005d6e:	f003 0301 	and.w	r3, r3, #1
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d101      	bne.n	8005d7a <f_read+0x5a>
 8005d76:	2307      	movs	r3, #7
 8005d78:	e10d      	b.n	8005f96 <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	68da      	ldr	r2, [r3, #12]
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	699b      	ldr	r3, [r3, #24]
 8005d82:	1ad3      	subs	r3, r2, r3
 8005d84:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8005d86:	687a      	ldr	r2, [r7, #4]
 8005d88:	6a3b      	ldr	r3, [r7, #32]
 8005d8a:	429a      	cmp	r2, r3
 8005d8c:	f240 80fe 	bls.w	8005f8c <f_read+0x26c>
 8005d90:	6a3b      	ldr	r3, [r7, #32]
 8005d92:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8005d94:	e0fa      	b.n	8005f8c <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	699b      	ldr	r3, [r3, #24]
 8005d9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	f040 80c6 	bne.w	8005f30 <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	699b      	ldr	r3, [r3, #24]
 8005da8:	0a5b      	lsrs	r3, r3, #9
 8005daa:	697a      	ldr	r2, [r7, #20]
 8005dac:	8952      	ldrh	r2, [r2, #10]
 8005dae:	3a01      	subs	r2, #1
 8005db0:	4013      	ands	r3, r2
 8005db2:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 8005db4:	69fb      	ldr	r3, [r7, #28]
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d12f      	bne.n	8005e1a <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	699b      	ldr	r3, [r3, #24]
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d103      	bne.n	8005dca <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	689b      	ldr	r3, [r3, #8]
 8005dc6:	633b      	str	r3, [r7, #48]	@ 0x30
 8005dc8:	e013      	b.n	8005df2 <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d007      	beq.n	8005de2 <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	699b      	ldr	r3, [r3, #24]
 8005dd6:	4619      	mov	r1, r3
 8005dd8:	68f8      	ldr	r0, [r7, #12]
 8005dda:	f7fe fefe 	bl	8004bda <clmt_clust>
 8005dde:	6338      	str	r0, [r7, #48]	@ 0x30
 8005de0:	e007      	b.n	8005df2 <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 8005de2:	68fa      	ldr	r2, [r7, #12]
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	69db      	ldr	r3, [r3, #28]
 8005de8:	4619      	mov	r1, r3
 8005dea:	4610      	mov	r0, r2
 8005dec:	f7fe fc67 	bl	80046be <get_fat>
 8005df0:	6338      	str	r0, [r7, #48]	@ 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8005df2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005df4:	2b01      	cmp	r3, #1
 8005df6:	d804      	bhi.n	8005e02 <f_read+0xe2>
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	2202      	movs	r2, #2
 8005dfc:	755a      	strb	r2, [r3, #21]
 8005dfe:	2302      	movs	r3, #2
 8005e00:	e0c9      	b.n	8005f96 <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8005e02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e08:	d104      	bne.n	8005e14 <f_read+0xf4>
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	2201      	movs	r2, #1
 8005e0e:	755a      	strb	r2, [r3, #21]
 8005e10:	2301      	movs	r3, #1
 8005e12:	e0c0      	b.n	8005f96 <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005e18:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8005e1a:	697a      	ldr	r2, [r7, #20]
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	69db      	ldr	r3, [r3, #28]
 8005e20:	4619      	mov	r1, r3
 8005e22:	4610      	mov	r0, r2
 8005e24:	f7fe fc2c 	bl	8004680 <clust2sect>
 8005e28:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8005e2a:	69bb      	ldr	r3, [r7, #24]
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d104      	bne.n	8005e3a <f_read+0x11a>
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	2202      	movs	r2, #2
 8005e34:	755a      	strb	r2, [r3, #21]
 8005e36:	2302      	movs	r3, #2
 8005e38:	e0ad      	b.n	8005f96 <f_read+0x276>
			sect += csect;
 8005e3a:	69ba      	ldr	r2, [r7, #24]
 8005e3c:	69fb      	ldr	r3, [r7, #28]
 8005e3e:	4413      	add	r3, r2
 8005e40:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	0a5b      	lsrs	r3, r3, #9
 8005e46:	62bb      	str	r3, [r7, #40]	@ 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 8005e48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d039      	beq.n	8005ec2 <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8005e4e:	69fa      	ldr	r2, [r7, #28]
 8005e50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e52:	4413      	add	r3, r2
 8005e54:	697a      	ldr	r2, [r7, #20]
 8005e56:	8952      	ldrh	r2, [r2, #10]
 8005e58:	4293      	cmp	r3, r2
 8005e5a:	d905      	bls.n	8005e68 <f_read+0x148>
					cc = fs->csize - csect;
 8005e5c:	697b      	ldr	r3, [r7, #20]
 8005e5e:	895b      	ldrh	r3, [r3, #10]
 8005e60:	461a      	mov	r2, r3
 8005e62:	69fb      	ldr	r3, [r7, #28]
 8005e64:	1ad3      	subs	r3, r2, r3
 8005e66:	62bb      	str	r3, [r7, #40]	@ 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8005e68:	697b      	ldr	r3, [r7, #20]
 8005e6a:	7858      	ldrb	r0, [r3, #1]
 8005e6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e6e:	69ba      	ldr	r2, [r7, #24]
 8005e70:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005e72:	f7fe f859 	bl	8003f28 <disk_read>
 8005e76:	4603      	mov	r3, r0
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d004      	beq.n	8005e86 <f_read+0x166>
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	2201      	movs	r2, #1
 8005e80:	755a      	strb	r2, [r3, #21]
 8005e82:	2301      	movs	r3, #1
 8005e84:	e087      	b.n	8005f96 <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	7d1b      	ldrb	r3, [r3, #20]
 8005e8a:	b25b      	sxtb	r3, r3
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	da14      	bge.n	8005eba <f_read+0x19a>
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	6a1a      	ldr	r2, [r3, #32]
 8005e94:	69bb      	ldr	r3, [r7, #24]
 8005e96:	1ad3      	subs	r3, r2, r3
 8005e98:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005e9a:	429a      	cmp	r2, r3
 8005e9c:	d90d      	bls.n	8005eba <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	6a1a      	ldr	r2, [r3, #32]
 8005ea2:	69bb      	ldr	r3, [r7, #24]
 8005ea4:	1ad3      	subs	r3, r2, r3
 8005ea6:	025b      	lsls	r3, r3, #9
 8005ea8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005eaa:	18d0      	adds	r0, r2, r3
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	3330      	adds	r3, #48	@ 0x30
 8005eb0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005eb4:	4619      	mov	r1, r3
 8005eb6:	f7fe f918 	bl	80040ea <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8005eba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ebc:	025b      	lsls	r3, r3, #9
 8005ebe:	62fb      	str	r3, [r7, #44]	@ 0x2c
				continue;
 8005ec0:	e050      	b.n	8005f64 <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	6a1b      	ldr	r3, [r3, #32]
 8005ec6:	69ba      	ldr	r2, [r7, #24]
 8005ec8:	429a      	cmp	r2, r3
 8005eca:	d02e      	beq.n	8005f2a <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	7d1b      	ldrb	r3, [r3, #20]
 8005ed0:	b25b      	sxtb	r3, r3
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	da18      	bge.n	8005f08 <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8005ed6:	697b      	ldr	r3, [r7, #20]
 8005ed8:	7858      	ldrb	r0, [r3, #1]
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	6a1a      	ldr	r2, [r3, #32]
 8005ee4:	2301      	movs	r3, #1
 8005ee6:	f7fe f83f 	bl	8003f68 <disk_write>
 8005eea:	4603      	mov	r3, r0
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d004      	beq.n	8005efa <f_read+0x1da>
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	2201      	movs	r2, #1
 8005ef4:	755a      	strb	r2, [r3, #21]
 8005ef6:	2301      	movs	r3, #1
 8005ef8:	e04d      	b.n	8005f96 <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	7d1b      	ldrb	r3, [r3, #20]
 8005efe:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005f02:	b2da      	uxtb	r2, r3
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8005f08:	697b      	ldr	r3, [r7, #20]
 8005f0a:	7858      	ldrb	r0, [r3, #1]
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8005f12:	2301      	movs	r3, #1
 8005f14:	69ba      	ldr	r2, [r7, #24]
 8005f16:	f7fe f807 	bl	8003f28 <disk_read>
 8005f1a:	4603      	mov	r3, r0
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d004      	beq.n	8005f2a <f_read+0x20a>
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	2201      	movs	r2, #1
 8005f24:	755a      	strb	r2, [r3, #21]
 8005f26:	2301      	movs	r3, #1
 8005f28:	e035      	b.n	8005f96 <f_read+0x276>
			}
#endif
			fp->sect = sect;
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	69ba      	ldr	r2, [r7, #24]
 8005f2e:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	699b      	ldr	r3, [r3, #24]
 8005f34:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f38:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 8005f3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 8005f3e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	429a      	cmp	r2, r3
 8005f44:	d901      	bls.n	8005f4a <f_read+0x22a>
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	62fb      	str	r3, [r7, #44]	@ 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	699b      	ldr	r3, [r3, #24]
 8005f54:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f58:	4413      	add	r3, r2
 8005f5a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005f5c:	4619      	mov	r1, r3
 8005f5e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005f60:	f7fe f8c3 	bl	80040ea <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8005f64:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005f66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f68:	4413      	add	r3, r2
 8005f6a:	627b      	str	r3, [r7, #36]	@ 0x24
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	699a      	ldr	r2, [r3, #24]
 8005f70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f72:	441a      	add	r2, r3
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	619a      	str	r2, [r3, #24]
 8005f78:	683b      	ldr	r3, [r7, #0]
 8005f7a:	681a      	ldr	r2, [r3, #0]
 8005f7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f7e:	441a      	add	r2, r3
 8005f80:	683b      	ldr	r3, [r7, #0]
 8005f82:	601a      	str	r2, [r3, #0]
 8005f84:	687a      	ldr	r2, [r7, #4]
 8005f86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f88:	1ad3      	subs	r3, r2, r3
 8005f8a:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	f47f af01 	bne.w	8005d96 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8005f94:	2300      	movs	r3, #0
}
 8005f96:	4618      	mov	r0, r3
 8005f98:	3738      	adds	r7, #56	@ 0x38
 8005f9a:	46bd      	mov	sp, r7
 8005f9c:	bd80      	pop	{r7, pc}

08005f9e <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8005f9e:	b580      	push	{r7, lr}
 8005fa0:	b08c      	sub	sp, #48	@ 0x30
 8005fa2:	af00      	add	r7, sp, #0
 8005fa4:	60f8      	str	r0, [r7, #12]
 8005fa6:	60b9      	str	r1, [r7, #8]
 8005fa8:	607a      	str	r2, [r7, #4]
 8005faa:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8005fac:	68bb      	ldr	r3, [r7, #8]
 8005fae:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8005fb0:	683b      	ldr	r3, [r7, #0]
 8005fb2:	2200      	movs	r2, #0
 8005fb4:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	f107 0210 	add.w	r2, r7, #16
 8005fbc:	4611      	mov	r1, r2
 8005fbe:	4618      	mov	r0, r3
 8005fc0:	f7ff fc78 	bl	80058b4 <validate>
 8005fc4:	4603      	mov	r3, r0
 8005fc6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8005fca:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d107      	bne.n	8005fe2 <f_write+0x44>
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	7d5b      	ldrb	r3, [r3, #21]
 8005fd6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8005fda:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d002      	beq.n	8005fe8 <f_write+0x4a>
 8005fe2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8005fe6:	e14b      	b.n	8006280 <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	7d1b      	ldrb	r3, [r3, #20]
 8005fec:	f003 0302 	and.w	r3, r3, #2
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d101      	bne.n	8005ff8 <f_write+0x5a>
 8005ff4:	2307      	movs	r3, #7
 8005ff6:	e143      	b.n	8006280 <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	699a      	ldr	r2, [r3, #24]
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	441a      	add	r2, r3
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	699b      	ldr	r3, [r3, #24]
 8006004:	429a      	cmp	r2, r3
 8006006:	f080 812d 	bcs.w	8006264 <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	699b      	ldr	r3, [r3, #24]
 800600e:	43db      	mvns	r3, r3
 8006010:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8006012:	e127      	b.n	8006264 <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	699b      	ldr	r3, [r3, #24]
 8006018:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800601c:	2b00      	cmp	r3, #0
 800601e:	f040 80e3 	bne.w	80061e8 <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	699b      	ldr	r3, [r3, #24]
 8006026:	0a5b      	lsrs	r3, r3, #9
 8006028:	693a      	ldr	r2, [r7, #16]
 800602a:	8952      	ldrh	r2, [r2, #10]
 800602c:	3a01      	subs	r2, #1
 800602e:	4013      	ands	r3, r2
 8006030:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8006032:	69bb      	ldr	r3, [r7, #24]
 8006034:	2b00      	cmp	r3, #0
 8006036:	d143      	bne.n	80060c0 <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	699b      	ldr	r3, [r3, #24]
 800603c:	2b00      	cmp	r3, #0
 800603e:	d10c      	bne.n	800605a <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	689b      	ldr	r3, [r3, #8]
 8006044:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8006046:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006048:	2b00      	cmp	r3, #0
 800604a:	d11a      	bne.n	8006082 <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	2100      	movs	r1, #0
 8006050:	4618      	mov	r0, r3
 8006052:	f7fe fd2a 	bl	8004aaa <create_chain>
 8006056:	62b8      	str	r0, [r7, #40]	@ 0x28
 8006058:	e013      	b.n	8006082 <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800605e:	2b00      	cmp	r3, #0
 8006060:	d007      	beq.n	8006072 <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	699b      	ldr	r3, [r3, #24]
 8006066:	4619      	mov	r1, r3
 8006068:	68f8      	ldr	r0, [r7, #12]
 800606a:	f7fe fdb6 	bl	8004bda <clmt_clust>
 800606e:	62b8      	str	r0, [r7, #40]	@ 0x28
 8006070:	e007      	b.n	8006082 <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8006072:	68fa      	ldr	r2, [r7, #12]
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	69db      	ldr	r3, [r3, #28]
 8006078:	4619      	mov	r1, r3
 800607a:	4610      	mov	r0, r2
 800607c:	f7fe fd15 	bl	8004aaa <create_chain>
 8006080:	62b8      	str	r0, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8006082:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006084:	2b00      	cmp	r3, #0
 8006086:	f000 80f2 	beq.w	800626e <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800608a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800608c:	2b01      	cmp	r3, #1
 800608e:	d104      	bne.n	800609a <f_write+0xfc>
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	2202      	movs	r2, #2
 8006094:	755a      	strb	r2, [r3, #21]
 8006096:	2302      	movs	r3, #2
 8006098:	e0f2      	b.n	8006280 <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800609a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800609c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060a0:	d104      	bne.n	80060ac <f_write+0x10e>
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	2201      	movs	r2, #1
 80060a6:	755a      	strb	r2, [r3, #21]
 80060a8:	2301      	movs	r3, #1
 80060aa:	e0e9      	b.n	8006280 <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80060b0:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	689b      	ldr	r3, [r3, #8]
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d102      	bne.n	80060c0 <f_write+0x122>
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80060be:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	7d1b      	ldrb	r3, [r3, #20]
 80060c4:	b25b      	sxtb	r3, r3
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	da18      	bge.n	80060fc <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80060ca:	693b      	ldr	r3, [r7, #16]
 80060cc:	7858      	ldrb	r0, [r3, #1]
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	6a1a      	ldr	r2, [r3, #32]
 80060d8:	2301      	movs	r3, #1
 80060da:	f7fd ff45 	bl	8003f68 <disk_write>
 80060de:	4603      	mov	r3, r0
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d004      	beq.n	80060ee <f_write+0x150>
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	2201      	movs	r2, #1
 80060e8:	755a      	strb	r2, [r3, #21]
 80060ea:	2301      	movs	r3, #1
 80060ec:	e0c8      	b.n	8006280 <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	7d1b      	ldrb	r3, [r3, #20]
 80060f2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80060f6:	b2da      	uxtb	r2, r3
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 80060fc:	693a      	ldr	r2, [r7, #16]
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	69db      	ldr	r3, [r3, #28]
 8006102:	4619      	mov	r1, r3
 8006104:	4610      	mov	r0, r2
 8006106:	f7fe fabb 	bl	8004680 <clust2sect>
 800610a:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800610c:	697b      	ldr	r3, [r7, #20]
 800610e:	2b00      	cmp	r3, #0
 8006110:	d104      	bne.n	800611c <f_write+0x17e>
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	2202      	movs	r2, #2
 8006116:	755a      	strb	r2, [r3, #21]
 8006118:	2302      	movs	r3, #2
 800611a:	e0b1      	b.n	8006280 <f_write+0x2e2>
			sect += csect;
 800611c:	697a      	ldr	r2, [r7, #20]
 800611e:	69bb      	ldr	r3, [r7, #24]
 8006120:	4413      	add	r3, r2
 8006122:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	0a5b      	lsrs	r3, r3, #9
 8006128:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800612a:	6a3b      	ldr	r3, [r7, #32]
 800612c:	2b00      	cmp	r3, #0
 800612e:	d03c      	beq.n	80061aa <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8006130:	69ba      	ldr	r2, [r7, #24]
 8006132:	6a3b      	ldr	r3, [r7, #32]
 8006134:	4413      	add	r3, r2
 8006136:	693a      	ldr	r2, [r7, #16]
 8006138:	8952      	ldrh	r2, [r2, #10]
 800613a:	4293      	cmp	r3, r2
 800613c:	d905      	bls.n	800614a <f_write+0x1ac>
					cc = fs->csize - csect;
 800613e:	693b      	ldr	r3, [r7, #16]
 8006140:	895b      	ldrh	r3, [r3, #10]
 8006142:	461a      	mov	r2, r3
 8006144:	69bb      	ldr	r3, [r7, #24]
 8006146:	1ad3      	subs	r3, r2, r3
 8006148:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800614a:	693b      	ldr	r3, [r7, #16]
 800614c:	7858      	ldrb	r0, [r3, #1]
 800614e:	6a3b      	ldr	r3, [r7, #32]
 8006150:	697a      	ldr	r2, [r7, #20]
 8006152:	69f9      	ldr	r1, [r7, #28]
 8006154:	f7fd ff08 	bl	8003f68 <disk_write>
 8006158:	4603      	mov	r3, r0
 800615a:	2b00      	cmp	r3, #0
 800615c:	d004      	beq.n	8006168 <f_write+0x1ca>
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	2201      	movs	r2, #1
 8006162:	755a      	strb	r2, [r3, #21]
 8006164:	2301      	movs	r3, #1
 8006166:	e08b      	b.n	8006280 <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	6a1a      	ldr	r2, [r3, #32]
 800616c:	697b      	ldr	r3, [r7, #20]
 800616e:	1ad3      	subs	r3, r2, r3
 8006170:	6a3a      	ldr	r2, [r7, #32]
 8006172:	429a      	cmp	r2, r3
 8006174:	d915      	bls.n	80061a2 <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	6a1a      	ldr	r2, [r3, #32]
 8006180:	697b      	ldr	r3, [r7, #20]
 8006182:	1ad3      	subs	r3, r2, r3
 8006184:	025b      	lsls	r3, r3, #9
 8006186:	69fa      	ldr	r2, [r7, #28]
 8006188:	4413      	add	r3, r2
 800618a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800618e:	4619      	mov	r1, r3
 8006190:	f7fd ffab 	bl	80040ea <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	7d1b      	ldrb	r3, [r3, #20]
 8006198:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800619c:	b2da      	uxtb	r2, r3
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 80061a2:	6a3b      	ldr	r3, [r7, #32]
 80061a4:	025b      	lsls	r3, r3, #9
 80061a6:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 80061a8:	e03f      	b.n	800622a <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	6a1b      	ldr	r3, [r3, #32]
 80061ae:	697a      	ldr	r2, [r7, #20]
 80061b0:	429a      	cmp	r2, r3
 80061b2:	d016      	beq.n	80061e2 <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	699a      	ldr	r2, [r3, #24]
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80061bc:	429a      	cmp	r2, r3
 80061be:	d210      	bcs.n	80061e2 <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 80061c0:	693b      	ldr	r3, [r7, #16]
 80061c2:	7858      	ldrb	r0, [r3, #1]
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80061ca:	2301      	movs	r3, #1
 80061cc:	697a      	ldr	r2, [r7, #20]
 80061ce:	f7fd feab 	bl	8003f28 <disk_read>
 80061d2:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d004      	beq.n	80061e2 <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	2201      	movs	r2, #1
 80061dc:	755a      	strb	r2, [r3, #21]
 80061de:	2301      	movs	r3, #1
 80061e0:	e04e      	b.n	8006280 <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	697a      	ldr	r2, [r7, #20]
 80061e6:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	699b      	ldr	r3, [r3, #24]
 80061ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80061f0:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 80061f4:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 80061f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	429a      	cmp	r2, r3
 80061fc:	d901      	bls.n	8006202 <f_write+0x264>
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	627b      	str	r3, [r7, #36]	@ 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	699b      	ldr	r3, [r3, #24]
 800620c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006210:	4413      	add	r3, r2
 8006212:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006214:	69f9      	ldr	r1, [r7, #28]
 8006216:	4618      	mov	r0, r3
 8006218:	f7fd ff67 	bl	80040ea <mem_cpy>
		fp->flag |= FA_DIRTY;
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	7d1b      	ldrb	r3, [r3, #20]
 8006220:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8006224:	b2da      	uxtb	r2, r3
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800622a:	69fa      	ldr	r2, [r7, #28]
 800622c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800622e:	4413      	add	r3, r2
 8006230:	61fb      	str	r3, [r7, #28]
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	699a      	ldr	r2, [r3, #24]
 8006236:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006238:	441a      	add	r2, r3
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	619a      	str	r2, [r3, #24]
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	68da      	ldr	r2, [r3, #12]
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	699b      	ldr	r3, [r3, #24]
 8006246:	429a      	cmp	r2, r3
 8006248:	bf38      	it	cc
 800624a:	461a      	movcc	r2, r3
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	60da      	str	r2, [r3, #12]
 8006250:	683b      	ldr	r3, [r7, #0]
 8006252:	681a      	ldr	r2, [r3, #0]
 8006254:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006256:	441a      	add	r2, r3
 8006258:	683b      	ldr	r3, [r7, #0]
 800625a:	601a      	str	r2, [r3, #0]
 800625c:	687a      	ldr	r2, [r7, #4]
 800625e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006260:	1ad3      	subs	r3, r2, r3
 8006262:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	2b00      	cmp	r3, #0
 8006268:	f47f aed4 	bne.w	8006014 <f_write+0x76>
 800626c:	e000      	b.n	8006270 <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800626e:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	7d1b      	ldrb	r3, [r3, #20]
 8006274:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006278:	b2da      	uxtb	r2, r3
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800627e:	2300      	movs	r3, #0
}
 8006280:	4618      	mov	r0, r3
 8006282:	3730      	adds	r7, #48	@ 0x30
 8006284:	46bd      	mov	sp, r7
 8006286:	bd80      	pop	{r7, pc}

08006288 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8006288:	b580      	push	{r7, lr}
 800628a:	b086      	sub	sp, #24
 800628c:	af00      	add	r7, sp, #0
 800628e:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	f107 0208 	add.w	r2, r7, #8
 8006296:	4611      	mov	r1, r2
 8006298:	4618      	mov	r0, r3
 800629a:	f7ff fb0b 	bl	80058b4 <validate>
 800629e:	4603      	mov	r3, r0
 80062a0:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80062a2:	7dfb      	ldrb	r3, [r7, #23]
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d168      	bne.n	800637a <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	7d1b      	ldrb	r3, [r3, #20]
 80062ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d062      	beq.n	800637a <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	7d1b      	ldrb	r3, [r3, #20]
 80062b8:	b25b      	sxtb	r3, r3
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	da15      	bge.n	80062ea <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 80062be:	68bb      	ldr	r3, [r7, #8]
 80062c0:	7858      	ldrb	r0, [r3, #1]
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	6a1a      	ldr	r2, [r3, #32]
 80062cc:	2301      	movs	r3, #1
 80062ce:	f7fd fe4b 	bl	8003f68 <disk_write>
 80062d2:	4603      	mov	r3, r0
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d001      	beq.n	80062dc <f_sync+0x54>
 80062d8:	2301      	movs	r3, #1
 80062da:	e04f      	b.n	800637c <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	7d1b      	ldrb	r3, [r3, #20]
 80062e0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80062e4:	b2da      	uxtb	r2, r3
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 80062ea:	f7fd fce7 	bl	8003cbc <get_fattime>
 80062ee:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 80062f0:	68ba      	ldr	r2, [r7, #8]
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062f6:	4619      	mov	r1, r3
 80062f8:	4610      	mov	r0, r2
 80062fa:	f7fe f925 	bl	8004548 <move_window>
 80062fe:	4603      	mov	r3, r0
 8006300:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8006302:	7dfb      	ldrb	r3, [r7, #23]
 8006304:	2b00      	cmp	r3, #0
 8006306:	d138      	bne.n	800637a <f_sync+0xf2>
					dir = fp->dir_ptr;
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800630c:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	330b      	adds	r3, #11
 8006312:	781a      	ldrb	r2, [r3, #0]
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	330b      	adds	r3, #11
 8006318:	f042 0220 	orr.w	r2, r2, #32
 800631c:	b2d2      	uxtb	r2, r2
 800631e:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	6818      	ldr	r0, [r3, #0]
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	689b      	ldr	r3, [r3, #8]
 8006328:	461a      	mov	r2, r3
 800632a:	68f9      	ldr	r1, [r7, #12]
 800632c:	f7fe fe2f 	bl	8004f8e <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	f103 021c 	add.w	r2, r3, #28
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	68db      	ldr	r3, [r3, #12]
 800633a:	4619      	mov	r1, r3
 800633c:	4610      	mov	r0, r2
 800633e:	f7fd fea8 	bl	8004092 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	3316      	adds	r3, #22
 8006346:	6939      	ldr	r1, [r7, #16]
 8006348:	4618      	mov	r0, r3
 800634a:	f7fd fea2 	bl	8004092 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	3312      	adds	r3, #18
 8006352:	2100      	movs	r1, #0
 8006354:	4618      	mov	r0, r3
 8006356:	f7fd fe81 	bl	800405c <st_word>
					fs->wflag = 1;
 800635a:	68bb      	ldr	r3, [r7, #8]
 800635c:	2201      	movs	r2, #1
 800635e:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8006360:	68bb      	ldr	r3, [r7, #8]
 8006362:	4618      	mov	r0, r3
 8006364:	f7fe f91e 	bl	80045a4 <sync_fs>
 8006368:	4603      	mov	r3, r0
 800636a:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	7d1b      	ldrb	r3, [r3, #20]
 8006370:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006374:	b2da      	uxtb	r2, r3
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800637a:	7dfb      	ldrb	r3, [r7, #23]
}
 800637c:	4618      	mov	r0, r3
 800637e:	3718      	adds	r7, #24
 8006380:	46bd      	mov	sp, r7
 8006382:	bd80      	pop	{r7, pc}

08006384 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8006384:	b580      	push	{r7, lr}
 8006386:	b084      	sub	sp, #16
 8006388:	af00      	add	r7, sp, #0
 800638a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800638c:	6878      	ldr	r0, [r7, #4]
 800638e:	f7ff ff7b 	bl	8006288 <f_sync>
 8006392:	4603      	mov	r3, r0
 8006394:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8006396:	7bfb      	ldrb	r3, [r7, #15]
 8006398:	2b00      	cmp	r3, #0
 800639a:	d118      	bne.n	80063ce <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	f107 0208 	add.w	r2, r7, #8
 80063a2:	4611      	mov	r1, r2
 80063a4:	4618      	mov	r0, r3
 80063a6:	f7ff fa85 	bl	80058b4 <validate>
 80063aa:	4603      	mov	r3, r0
 80063ac:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 80063ae:	7bfb      	ldrb	r3, [r7, #15]
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d10c      	bne.n	80063ce <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	691b      	ldr	r3, [r3, #16]
 80063b8:	4618      	mov	r0, r3
 80063ba:	f7fe f821 	bl	8004400 <dec_lock>
 80063be:	4603      	mov	r3, r0
 80063c0:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 80063c2:	7bfb      	ldrb	r3, [r7, #15]
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d102      	bne.n	80063ce <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	2200      	movs	r2, #0
 80063cc:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 80063ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80063d0:	4618      	mov	r0, r3
 80063d2:	3710      	adds	r7, #16
 80063d4:	46bd      	mov	sp, r7
 80063d6:	bd80      	pop	{r7, pc}

080063d8 <memset>:
 80063d8:	4402      	add	r2, r0
 80063da:	4603      	mov	r3, r0
 80063dc:	4293      	cmp	r3, r2
 80063de:	d100      	bne.n	80063e2 <memset+0xa>
 80063e0:	4770      	bx	lr
 80063e2:	f803 1b01 	strb.w	r1, [r3], #1
 80063e6:	e7f9      	b.n	80063dc <memset+0x4>

080063e8 <__libc_init_array>:
 80063e8:	b570      	push	{r4, r5, r6, lr}
 80063ea:	4d0d      	ldr	r5, [pc, #52]	@ (8006420 <__libc_init_array+0x38>)
 80063ec:	4c0d      	ldr	r4, [pc, #52]	@ (8006424 <__libc_init_array+0x3c>)
 80063ee:	1b64      	subs	r4, r4, r5
 80063f0:	10a4      	asrs	r4, r4, #2
 80063f2:	2600      	movs	r6, #0
 80063f4:	42a6      	cmp	r6, r4
 80063f6:	d109      	bne.n	800640c <__libc_init_array+0x24>
 80063f8:	4d0b      	ldr	r5, [pc, #44]	@ (8006428 <__libc_init_array+0x40>)
 80063fa:	4c0c      	ldr	r4, [pc, #48]	@ (800642c <__libc_init_array+0x44>)
 80063fc:	f000 f826 	bl	800644c <_init>
 8006400:	1b64      	subs	r4, r4, r5
 8006402:	10a4      	asrs	r4, r4, #2
 8006404:	2600      	movs	r6, #0
 8006406:	42a6      	cmp	r6, r4
 8006408:	d105      	bne.n	8006416 <__libc_init_array+0x2e>
 800640a:	bd70      	pop	{r4, r5, r6, pc}
 800640c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006410:	4798      	blx	r3
 8006412:	3601      	adds	r6, #1
 8006414:	e7ee      	b.n	80063f4 <__libc_init_array+0xc>
 8006416:	f855 3b04 	ldr.w	r3, [r5], #4
 800641a:	4798      	blx	r3
 800641c:	3601      	adds	r6, #1
 800641e:	e7f2      	b.n	8006406 <__libc_init_array+0x1e>
 8006420:	08006648 	.word	0x08006648
 8006424:	08006648 	.word	0x08006648
 8006428:	08006648 	.word	0x08006648
 800642c:	0800664c 	.word	0x0800664c

08006430 <memcpy>:
 8006430:	440a      	add	r2, r1
 8006432:	4291      	cmp	r1, r2
 8006434:	f100 33ff 	add.w	r3, r0, #4294967295
 8006438:	d100      	bne.n	800643c <memcpy+0xc>
 800643a:	4770      	bx	lr
 800643c:	b510      	push	{r4, lr}
 800643e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006442:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006446:	4291      	cmp	r1, r2
 8006448:	d1f9      	bne.n	800643e <memcpy+0xe>
 800644a:	bd10      	pop	{r4, pc}

0800644c <_init>:
 800644c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800644e:	bf00      	nop
 8006450:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006452:	bc08      	pop	{r3}
 8006454:	469e      	mov	lr, r3
 8006456:	4770      	bx	lr

08006458 <_fini>:
 8006458:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800645a:	bf00      	nop
 800645c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800645e:	bc08      	pop	{r3}
 8006460:	469e      	mov	lr, r3
 8006462:	4770      	bx	lr
